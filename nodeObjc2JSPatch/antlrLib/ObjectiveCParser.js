// Generated from ObjectiveCParser.g4 by ANTLR 4.5
// jshint ignore: start
var antlr4 = require('.././antlr4/index');
var ObjectiveCParserListener = require('./ObjectiveCParserListener').ObjectiveCParserListener;
var grammarFileName = "ObjectiveCParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u0097\u0631\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\3\2\7\2\u0108\n\2\f\2\16\2\u010b\13\2",
    "\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u011b\n",
    "\3\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\5\6\u0127\n\6\3\6\5\6\u012a",
    "\n\6\3\6\5\6\u012d\n\6\3\6\5\6\u0130\n\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7",
    "\u0138\n\7\3\7\3\7\5\7\u013c\n\7\3\7\5\7\u013f\n\7\3\7\5\7\u0142\n\7",
    "\3\7\3\7\3\b\3\b\3\b\3\b\5\b\u014a\n\b\3\b\5\b\u014d\n\b\3\b\5\b\u0150",
    "\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u015a\n\t\3\t\3\t\3\n\3\n\3",
    "\n\5\n\u0161\n\n\3\n\5\n\u0164\n\n\3\n\5\n\u0167\n\n\3\n\5\n\u016a\n",
    "\n\3\n\5\n\u016d\n\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r",
    "\3\r\3\r\7\r\u017c\n\r\f\r\16\r\u017f\13\r\3\16\3\16\3\16\3\16\3\17",
    "\3\17\3\17\7\17\u0188\n\17\f\17\16\17\u018b\13\17\3\20\3\20\3\20\3\20",
    "\3\20\5\20\u0192\n\20\3\20\3\20\3\21\3\21\3\21\7\21\u0199\n\21\f\21",
    "\16\21\u019c\13\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22",
    "\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u01ae\n\22\3\23\3\23\3\24\3\24\3",
    "\25\3\25\3\26\3\26\5\26\u01b8\n\26\3\26\5\26\u01bb\n\26\3\27\3\27\7",
    "\27\u01bf\n\27\f\27\16\27\u01c2\13\27\3\27\3\27\3\27\3\27\6\27\u01c8",
    "\n\27\r\27\16\27\u01c9\3\27\3\27\3\27\3\27\6\27\u01d0\n\27\r\27\16\27",
    "\u01d1\3\27\3\27\3\27\3\27\3\27\3\27\6\27\u01da\n\27\r\27\16\27\u01db",
    "\3\27\3\27\3\27\5\27\u01e1\n\27\3\30\3\30\3\31\6\31\u01e6\n\31\r\31",
    "\16\31\u01e7\3\32\3\32\3\32\3\32\5\32\u01ee\n\32\3\33\3\33\3\33\3\34",
    "\3\34\3\34\3\35\5\35\u01f7\n\35\3\35\3\35\5\35\u01fb\n\35\3\35\3\35",
    "\3\36\6\36\u0200\n\36\r\36\16\36\u0201\3\37\3\37\3\37\3\37\3\37\5\37",
    "\u0209\n\37\3 \3 \3 \3!\3!\3!\3\"\5\"\u0212\n\"\3\"\3\"\5\"\u0216\n",
    "\"\3\"\5\"\u0219\n\"\3\"\3\"\3#\3#\6#\u021f\n#\r#\16#\u0220\3#\3#\5",
    "#\u0225\n#\5#\u0227\n#\3$\5$\u022a\n$\3$\3$\7$\u022e\n$\f$\16$\u0231",
    "\13$\3$\5$\u0234\n$\3$\3$\3%\3%\5%\u023a\n%\3&\3&\3&\3&\3\'\3\'\3\'",
    "\3\'\3\'\3\'\3\'\3\'\5\'\u0248\n\'\3(\3(\3(\7(\u024d\n(\f(\16(\u0250",
    "\13(\3)\3)\3)\5)\u0255\n)\3*\3*\3*\3*\5*\u025b\n*\3*\3*\5*\u025f\n*",
    "\3+\3+\5+\u0263\n+\3+\3+\7+\u0267\n+\f+\16+\u026a\13+\3+\3+\3,\5,\u026f",
    "\n,\3,\3,\3,\3,\3,\5,\u0276\n,\5,\u0278\n,\3,\3,\5,\u027c\n,\3-\3-\3",
    ".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0293\n.",
    "\3/\3/\3/\5/\u0298\n/\6/\u029a\n/\r/\16/\u029b\3/\3/\3\60\3\60\3\60",
    "\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\5\62\u02af",
    "\n\62\3\62\3\62\7\62\u02b3\n\62\f\62\16\62\u02b6\13\62\3\62\5\62\u02b9",
    "\n\62\3\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64\5\64\u02c4\n\64\3",
    "\64\3\64\7\64\u02c8\n\64\f\64\16\64\u02cb\13\64\3\64\5\64\u02ce\n\64",
    "\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u02da\n\65\5",
    "\65\u02dc\n\65\3\66\3\66\3\66\3\66\5\66\u02e2\n\66\3\66\3\66\3\66\5",
    "\66\u02e7\n\66\7\66\u02e9\n\66\f\66\16\66\u02ec\13\66\3\66\3\66\3\67",
    "\3\67\5\67\u02f2\n\67\3\67\5\67\u02f5\n\67\3\67\3\67\38\38\38\38\38",
    "\39\39\39\59\u0301\n9\3:\3:\6:\u0305\n:\r:\16:\u0306\5:\u0309\n:\3;",
    "\5;\u030c\n;\3;\3;\3;\3;\3;\5;\u0313\n;\3;\3;\5;\u0317\n;\3;\3;\3;\3",
    ";\3;\5;\u031e\n;\3;\3;\5;\u0322\n;\7;\u0324\n;\f;\16;\u0327\13;\3<\3",
    "<\3<\3<\3<\3=\3=\5=\u0330\n=\3=\6=\u0333\n=\r=\16=\u0334\5=\u0337\n",
    "=\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3@\6@\u0344\n@\r@\16@\u0345\3@\3@\3",
    "A\3A\3A\3B\3B\3B\3B\3B\3B\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\5D\u035d\nD",
    "\3E\3E\7E\u0361\nE\fE\16E\u0364\13E\3E\5E\u0367\nE\3F\3F\3F\3F\3F\3",
    "F\3G\3G\3G\3H\7H\u0373\nH\fH\16H\u0376\13H\3H\3H\3H\3I\3I\3J\7J\u037e",
    "\nJ\fJ\16J\u0381\13J\3J\5J\u0384\nJ\3J\5J\u0387\nJ\3J\3J\3K\3K\3K\3",
    "K\5K\u038f\nK\3L\3L\3L\7L\u0394\nL\fL\16L\u0397\13L\3M\3M\3M\5M\u039c",
    "\nM\3N\3N\3N\5N\u03a1\nN\3N\3N\6N\u03a5\nN\rN\16N\u03a6\3N\3N\5N\u03ab",
    "\nN\3O\3O\3O\5O\u03b0\nO\3O\3O\3P\3P\5P\u03b6\nP\3P\3P\6P\u03ba\nP\r",
    "P\16P\u03bb\3Q\3Q\3R\3R\3S\3S\3S\3S\3S\3S\5S\u03c8\nS\3S\3S\5S\u03cc",
    "\nS\5S\u03ce\nS\3T\5T\u03d1\nT\3T\3T\3T\3T\3T\3T\3T\3T\5T\u03db\nT\3",
    "T\3T\3T\3T\5T\u03e1\nT\3T\5T\u03e4\nT\3U\3U\3U\5U\u03e9\nU\3V\3V\3V",
    "\5V\u03ee\nV\3W\3W\3W\7W\u03f3\nW\fW\16W\u03f6\13W\3X\3X\5X\u03fa\n",
    "X\3X\3X\5X\u03fe\nX\3Y\3Y\3Y\3Y\5Y\u0404\nY\3Y\3Y\3Y\3Y\5Y\u040a\nY",
    "\3Y\3Y\5Y\u040e\nY\3Y\3Y\3Y\3Y\5Y\u0414\nY\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3",
    "Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u042a\nY\3Z\3Z\3Z\7Z\u042f\nZ",
    "\fZ\16Z\u0432\13Z\3Z\5Z\u0435\nZ\3[\3[\3[\5[\u043a\n[\3\\\3\\\7\\\u043e",
    "\n\\\f\\\16\\\u0441\13\\\3\\\3\\\3\\\3\\\7\\\u0447\n\\\f\\\16\\\u044a",
    "\13\\\3\\\3\\\3\\\5\\\u044f\n\\\3\\\3\\\5\\\u0453\n\\\3]\3]\5]\u0457",
    "\n]\3]\3]\3]\3]\3]\5]\u045e\n]\5]\u0460\n]\3]\5]\u0463\n]\3^\5^\u0466",
    "\n^\3^\3^\3_\3_\7_\u046c\n_\f_\16_\u046f\13_\3_\5_\u0472\n_\3`\3`\3",
    "`\3`\3`\7`\u0479\n`\f`\16`\u047c\13`\3`\3`\5`\u0480\n`\3a\3a\3a\3a\5",
    "a\u0486\na\5a\u0488\na\3a\5a\u048b\na\3b\5b\u048e\nb\3b\3b\3b\5b\u0493",
    "\nb\3b\7b\u0496\nb\fb\16b\u0499\13b\3c\6c\u049c\nc\rc\16c\u049d\3c\3",
    "c\3d\3d\3d\3d\3d\3d\5d\u04a8\nd\3e\3e\5e\u04ac\ne\3e\5e\u04af\ne\3f",
    "\3f\3f\3f\3f\3f\3f\6f\u04b8\nf\rf\16f\u04b9\3f\3f\5f\u04be\nf\3f\6f",
    "\u04c1\nf\rf\16f\u04c2\5f\u04c5\nf\3g\3g\5g\u04c9\ng\3g\3g\3g\5g\u04ce",
    "\ng\3g\5g\u04d1\ng\3h\3h\3h\7h\u04d6\nh\fh\16h\u04d9\13h\3i\6i\u04dc",
    "\ni\ri\16i\u04dd\3i\5i\u04e1\ni\3i\5i\u04e4\ni\3j\6j\u04e7\nj\rj\16",
    "j\u04e8\3k\3k\5k\u04ed\nk\3k\3k\5k\u04f1\nk\3k\3k\5k\u04f5\nk\3k\3k",
    "\5k\u04f9\nk\3k\3k\5k\u04fd\nk\3k\3k\5k\u0501\nk\3k\3k\5k\u0505\nk\3",
    "k\3k\5k\u0509\nk\3k\3k\5k\u050d\nk\3k\3k\5k\u0511\nk\3k\5k\u0514\nk",
    "\3l\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0520\nl\3l\3l\3l\3l\3l\3l\5l\u0528",
    "\nl\3m\3m\3m\7m\u052d\nm\fm\16m\u0530\13m\3m\3m\3n\3n\3n\3n\3n\3n\3",
    "n\5n\u053b\nn\3n\3n\3n\3n\3n\3n\5n\u0543\nn\3o\3o\3o\3o\3o\5o\u054a",
    "\no\3o\3o\3o\3p\3p\3p\6p\u0552\np\rp\16p\u0553\3p\3p\3p\5p\u0559\np",
    "\3p\3p\5p\u055d\np\3p\3p\5p\u0561\np\3p\3p\3p\3q\3q\3q\3q\3q\3q\3r\3",
    "r\3r\3r\3r\3r\3r\3r\3s\3s\3s\3s\5s\u0578\ns\3t\3t\3t\3t\3t\3t\3t\3t",
    "\3t\3t\5t\u0584\nt\3t\5t\u0587\nt\3u\3u\3u\7u\u058c\nu\fu\16u\u058f",
    "\13u\3v\3v\3v\3v\3v\5v\u0596\nv\3w\3w\3w\3w\5w\u059c\nw\3w\3w\3w\5w",
    "\u05a1\nw\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u05b2\nx\3",
    "x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\3x\7x",
    "\u05ca\nx\fx\16x\u05cd\13x\3y\3y\3y\3y\3y\3y\5y\u05d5\ny\3z\3z\3{\3",
    "{\5{\u05db\n{\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u05eb\n|",
    "\3|\3|\3|\3|\5|\u05f1\n|\3}\3}\3~\3~\3~\3~\3~\3~\3~\5~\u05fc\n~\3~\3",
    "~\3~\3~\3~\7~\u0603\n~\f~\16~\u0606\13~\3\177\3\177\3\177\3\u0080\3",
    "\u0080\3\u0080\7\u0080\u060e\n\u0080\f\u0080\16\u0080\u0611\13\u0080",
    "\3\u0081\5\u0081\u0614\n\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081",
    "\5\u0081\u061b\n\u0081\3\u0081\5\u0081\u061e\n\u0081\3\u0082\5\u0082",
    "\u0621\n\u0082\3\u0082\6\u0082\u0624\n\u0082\r\u0082\16\u0082\u0625",
    "\3\u0082\6\u0082\u0629\n\u0082\r\u0082\16\u0082\u062a\5\u0082\u062d",
    "\n\u0082\3\u0083\3\u0083\3\u0083\2\3\u00ee\u0084\2\4\6\b\n\f\16\20\22",
    "\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl",
    "nprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092",
    "\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa",
    "\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2",
    "\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da",
    "\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2",
    "\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\2\23\3\2RS\5",
    "\2\r\r\20\20\22\23\4\2;;BB\5\2 !\60\61\66\67\4\2>>AA\3\2IM\7\2\35\35",
    "++88==@@\3\2NP\4\2rsww\3\2pq\4\2bbij\4\2hhkk\4\2aax\u0081\5\2deprtt",
    "\3\2^_\4\2UU``\b\2\33\33..IIKKNU\u0083\u008c\u06dd\2\u0109\3\2\2\2\4",
    "\u011a\3\2\2\2\6\u011c\3\2\2\2\b\u011e\3\2\2\2\n\u0122\3\2\2\2\f\u0133",
    "\3\2\2\2\16\u0145\3\2\2\2\20\u0153\3\2\2\2\22\u015d\3\2\2\2\24\u0170",
    "\3\2\2\2\26\u0174\3\2\2\2\30\u0178\3\2\2\2\32\u0180\3\2\2\2\34\u0184",
    "\3\2\2\2\36\u018c\3\2\2\2 \u0195\3\2\2\2\"\u01ad\3\2\2\2$\u01af\3\2",
    "\2\2&\u01b1\3\2\2\2(\u01b3\3\2\2\2*\u01ba\3\2\2\2,\u01e0\3\2\2\2.\u01e2",
    "\3\2\2\2\60\u01e5\3\2\2\2\62\u01ed\3\2\2\2\64\u01ef\3\2\2\2\66\u01f2",
    "\3\2\2\28\u01f6\3\2\2\2:\u01ff\3\2\2\2<\u0208\3\2\2\2>\u020a\3\2\2\2",
    "@\u020d\3\2\2\2B\u0211\3\2\2\2D\u0226\3\2\2\2F\u0229\3\2\2\2H\u0239",
    "\3\2\2\2J\u023b\3\2\2\2L\u0247\3\2\2\2N\u0249\3\2\2\2P\u0251\3\2\2\2",
    "R\u0256\3\2\2\2T\u0260\3\2\2\2V\u027b\3\2\2\2X\u027d\3\2\2\2Z\u0292",
    "\3\2\2\2\\\u0294\3\2\2\2^\u029f\3\2\2\2`\u02a4\3\2\2\2b\u02ab\3\2\2",
    "\2d\u02bc\3\2\2\2f\u02c0\3\2\2\2h\u02db\3\2\2\2j\u02dd\3\2\2\2l\u02ef",
    "\3\2\2\2n\u02f8\3\2\2\2p\u0300\3\2\2\2r\u0308\3\2\2\2t\u030b\3\2\2\2",
    "v\u0328\3\2\2\2x\u0336\3\2\2\2z\u0338\3\2\2\2|\u033d\3\2\2\2~\u0343",
    "\3\2\2\2\u0080\u0349\3\2\2\2\u0082\u034c\3\2\2\2\u0084\u0352\3\2\2\2",
    "\u0086\u035c\3\2\2\2\u0088\u035e\3\2\2\2\u008a\u0368\3\2\2\2\u008c\u036e",
    "\3\2\2\2\u008e\u0374\3\2\2\2\u0090\u037a\3\2\2\2\u0092\u037f\3\2\2\2",
    "\u0094\u038e\3\2\2\2\u0096\u0390\3\2\2\2\u0098\u0398\3\2\2\2\u009a\u039d",
    "\3\2\2\2\u009c\u03ac\3\2\2\2\u009e\u03b9\3\2\2\2\u00a0\u03bd\3\2\2\2",
    "\u00a2\u03bf\3\2\2\2\u00a4\u03cd\3\2\2\2\u00a6\u03d0\3\2\2\2\u00a8\u03e8",
    "\3\2\2\2\u00aa\u03ea\3\2\2\2\u00ac\u03ef\3\2\2\2\u00ae\u03fd\3\2\2\2",
    "\u00b0\u0429\3\2\2\2\u00b2\u042b\3\2\2\2\u00b4\u0436\3\2\2\2\u00b6\u0452",
    "\3\2\2\2\u00b8\u0462\3\2\2\2\u00ba\u0465\3\2\2\2\u00bc\u0469\3\2\2\2",
    "\u00be\u0473\3\2\2\2\u00c0\u048a\3\2\2\2\u00c2\u048d\3\2\2\2\u00c4\u049b",
    "\3\2\2\2\u00c6\u04a7\3\2\2\2\u00c8\u04ae\3\2\2\2\u00ca\u04c4\3\2\2\2",
    "\u00cc\u04d0\3\2\2\2\u00ce\u04d2\3\2\2\2\u00d0\u04db\3\2\2\2\u00d2\u04e6",
    "\3\2\2\2\u00d4\u0513\3\2\2\2\u00d6\u0527\3\2\2\2\u00d8\u0529\3\2\2\2",
    "\u00da\u0542\3\2\2\2\u00dc\u0544\3\2\2\2\u00de\u054e\3\2\2\2\u00e0\u0565",
    "\3\2\2\2\u00e2\u056b\3\2\2\2\u00e4\u0577\3\2\2\2\u00e6\u0586\3\2\2\2",
    "\u00e8\u0588\3\2\2\2\u00ea\u0595\3\2\2\2\u00ec\u05a0\3\2\2\2\u00ee\u05a2",
    "\3\2\2\2\u00f0\u05d4\3\2\2\2\u00f2\u05d6\3\2\2\2\u00f4\u05da\3\2\2\2",
    "\u00f6\u05f0\3\2\2\2\u00f8\u05f2\3\2\2\2\u00fa\u05f4\3\2\2\2\u00fc\u0607",
    "\3\2\2\2\u00fe\u060a\3\2\2\2\u0100\u061d\3\2\2\2\u0102\u062c\3\2\2\2",
    "\u0104\u062e\3\2\2\2\u0106\u0108\5\4\3\2\u0107\u0106\3\2\2\2\u0108\u010b",
    "\3\2\2\2\u0109\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\3\2\2\2",
    "\u010b\u0109\3\2\2\2\u010c\u010d\7\2\2\3\u010d\3\3\2\2\2\u010e\u011b",
    "\5\b\5\2\u010f\u011b\5\6\4\2\u0110\u011b\5\u0092J\2\u0111\u011b\5\n",
    "\6\2\u0112\u011b\5\16\b\2\u0113\u011b\5\f\7\2\u0114\u011b\5\20\t\2\u0115",
    "\u011b\5\22\n\2\u0116\u011b\5\24\13\2\u0117\u011b\5\26\f\2\u0118\u011b",
    "\5\u00be`\2\u0119\u011b\5:\36\2\u011a\u010e\3\2\2\2\u011a\u010f\3\2",
    "\2\2\u011a\u0110\3\2\2\2\u011a\u0111\3\2\2\2\u011a\u0112\3\2\2\2\u011a",
    "\u0113\3\2\2\2\u011a\u0114\3\2\2\2\u011a\u0115\3\2\2\2\u011a\u0116\3",
    "\2\2\2\u011a\u0117\3\2\2\2\u011a\u0118\3\2\2\2\u011a\u0119\3\2\2\2\u011b",
    "\5\3\2\2\2\u011c\u011d\5\u008eH\2\u011d\7\3\2\2\2\u011e\u011f\7\f\2",
    "\2\u011f\u0120\5\u0104\u0083\2\u0120\u0121\7\\\2\2\u0121\t\3\2\2\2\u0122",
    "\u0123\7\13\2\2\u0123\u0126\5\u00aaV\2\u0124\u0125\7g\2\2\u0125\u0127",
    "\5&\24\2\u0126\u0124\3\2\2\2\u0126\u0127\3\2\2\2\u0127\u0129\3\2\2\2",
    "\u0128\u012a\5\32\16\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a",
    "\u012c\3\2\2\2\u012b\u012d\5,\27\2\u012c\u012b\3\2\2\2\u012c\u012d\3",
    "\2\2\2\u012d\u012f\3\2\2\2\u012e\u0130\5\60\31\2\u012f\u012e\3\2\2\2",
    "\u012f\u0130\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\7\b\2\2\u0132\13",
    "\3\2\2\2\u0133\u0134\7\13\2\2\u0134\u0135\5\u00aaV\2\u0135\u0137\7V",
    "\2\2\u0136\u0138\5(\25\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2\2\2\u0138",
    "\u0139\3\2\2\2\u0139\u013b\7W\2\2\u013a\u013c\5\32\16\2\u013b\u013a",
    "\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013e\3\2\2\2\u013d\u013f\5,\27\2",
    "\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u0142",
    "\5\60\31\2\u0141\u0140\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3\2\2",
    "\2\u0143\u0144\7\b\2\2\u0144\r\3\2\2\2\u0145\u0146\7\n\2\2\u0146\u0149",
    "\5\u00aaV\2\u0147\u0148\7g\2\2\u0148\u014a\5&\24\2\u0149\u0147\3\2\2",
    "\2\u0149\u014a\3\2\2\2\u014a\u014c\3\2\2\2\u014b\u014d\5,\27\2\u014c",
    "\u014b\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014f\3\2\2\2\u014e\u0150\5",
    ":\36\2\u014f\u014e\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151",
    "\u0152\7\b\2\2\u0152\17\3\2\2\2\u0153\u0154\7\n\2\2\u0154\u0155\5\u00aa",
    "V\2\u0155\u0156\7V\2\2\u0156\u0157\5(\25\2\u0157\u0159\7W\2\2\u0158",
    "\u015a\5:\36\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3",
    "\2\2\2\u015b\u015c\7\b\2\2\u015c\21\3\2\2\2\u015d\u015e\7\16\2\2\u015e",
    "\u0160\5*\26\2\u015f\u0161\5\32\16\2\u0160\u015f\3\2\2\2\u0160\u0161",
    "\3\2\2\2\u0161\u0163\3\2\2\2\u0162\u0164\7\24\2\2\u0163\u0162\3\2\2",
    "\2\u0163\u0164\3\2\2\2\u0164\u0166\3\2\2\2\u0165\u0167\5\60\31\2\u0166",
    "\u0165\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0169\3\2\2\2\u0168\u016a\7",
    "\17\2\2\u0169\u0168\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016c\3\2\2\2",
    "\u016b\u016d\5\60\31\2\u016c\u016b\3\2\2\2\u016c\u016d\3\2\2\2\u016d",
    "\u016e\3\2\2\2\u016e\u016f\7\b\2\2\u016f\23\3\2\2\2\u0170\u0171\7\16",
    "\2\2\u0171\u0172\5\34\17\2\u0172\u0173\7\\\2\2\u0173\25\3\2\2\2\u0174",
    "\u0175\7\5\2\2\u0175\u0176\5\30\r\2\u0176\u0177\7\\\2\2\u0177\27\3\2",
    "\2\2\u0178\u017d\5$\23\2\u0179\u017a\7]\2\2\u017a\u017c\5$\23\2\u017b",
    "\u0179\3\2\2\2\u017c\u017f\3\2\2\2\u017d\u017b\3\2\2\2\u017d\u017e\3",
    "\2\2\2\u017e\31\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0181\7c\2\2\u0181",
    "\u0182\5\34\17\2\u0182\u0183\7b\2\2\u0183\33\3\2\2\2\u0184\u0189\5*",
    "\26\2\u0185\u0186\7]\2\2\u0186\u0188\5*\26\2\u0187\u0185\3\2\2\2\u0188",
    "\u018b\3\2\2\2\u0189\u0187\3\2\2\2\u0189\u018a\3\2\2\2\u018a\35\3\2",
    "\2\2\u018b\u0189\3\2\2\2\u018c\u0191\7\21\2\2\u018d\u018e\7V\2\2\u018e",
    "\u018f\5 \21\2\u018f\u0190\7W\2\2\u0190\u0192\3\2\2\2\u0191\u018d\3",
    "\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0194\5\u009cO",
    "\2\u0194\37\3\2\2\2\u0195\u019a\5\"\22\2\u0196\u0197\7]\2\2\u0197\u0199",
    "\5\"\22\2\u0198\u0196\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2",
    "\2\u019a\u019b\3\2\2\2\u019b!\3\2\2\2\u019c\u019a\3\2\2\2\u019d\u01ae",
    "\7\u0085\2\2\u019e\u01ae\7\u0083\2\2\u019f\u01ae\7\u008b\2\2\u01a0\u01ae",
    "\7\u0087\2\2\u01a1\u01ae\7\u0088\2\2\u01a2\u01ae\7\u0089\2\2\u01a3\u01ae",
    "\7\u008a\2\2\u01a4\u01a5\7\u0084\2\2\u01a5\u01a6\7a\2\2\u01a6\u01ae",
    "\5\u0104\u0083\2\u01a7\u01a8\7\u0086\2\2\u01a8\u01a9\7a\2\2\u01a9\u01aa",
    "\5\u0104\u0083\2\u01aa\u01ab\7g\2\2\u01ab\u01ae\3\2\2\2\u01ac\u01ae",
    "\5\u0104\u0083\2\u01ad\u019d\3\2\2\2\u01ad\u019e\3\2\2\2\u01ad\u019f",
    "\3\2\2\2\u01ad\u01a0\3\2\2\2\u01ad\u01a1\3\2\2\2\u01ad\u01a2\3\2\2\2",
    "\u01ad\u01a3\3\2\2\2\u01ad\u01a4\3\2\2\2\u01ad\u01a7\3\2\2\2\u01ad\u01ac",
    "\3\2\2\2\u01ae#\3\2\2\2\u01af\u01b0\5\u0104\u0083\2\u01b0%\3\2\2\2\u01b1",
    "\u01b2\5\u0104\u0083\2\u01b2\'\3\2\2\2\u01b3\u01b4\5\u0104\u0083\2\u01b4",
    ")\3\2\2\2\u01b5\u01bb\5\32\16\2\u01b6\u01b8\t\2\2\2\u01b7\u01b6\3\2",
    "\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bb\5\u0104\u0083",
    "\2\u01ba\u01b5\3\2\2\2\u01ba\u01b7\3\2\2\2\u01bb+\3\2\2\2\u01bc\u01c0",
    "\7X\2\2\u01bd\u01bf\5\u009cO\2\u01be\u01bd\3\2\2\2\u01bf\u01c2\3\2\2",
    "\2\u01c0\u01be\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c3\3\2\2\2\u01c2",
    "\u01c0\3\2\2\2\u01c3\u01e1\7Y\2\2\u01c4\u01c5\7X\2\2\u01c5\u01c7\5.",
    "\30\2\u01c6\u01c8\5\u009cO\2\u01c7\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2",
    "\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cc",
    "\7Y\2\2\u01cc\u01e1\3\2\2\2\u01cd\u01cf\7X\2\2\u01ce\u01d0\5\u009cO",
    "\2\u01cf\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1",
    "\u01d2\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01d4\5,\27\2\u01d4\u01d5\7",
    "Y\2\2\u01d5\u01e1\3\2\2\2\u01d6\u01d7\7X\2\2\u01d7\u01d9\5.\30\2\u01d8",
    "\u01da\5\u009cO\2\u01d9\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01d9",
    "\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01de\5,\27\2",
    "\u01de\u01df\7Y\2\2\u01df\u01e1\3\2\2\2\u01e0\u01bc\3\2\2\2\u01e0\u01c4",
    "\3\2\2\2\u01e0\u01cd\3\2\2\2\u01e0\u01d6\3\2\2\2\u01e1-\3\2\2\2\u01e2",
    "\u01e3\t\3\2\2\u01e3/\3\2\2\2\u01e4\u01e6\5\62\32\2\u01e5\u01e4\3\2",
    "\2\2\u01e6\u01e7\3\2\2\2\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8",
    "\61\3\2\2\2\u01e9\u01ee\5\u0092J\2\u01ea\u01ee\5\64\33\2\u01eb\u01ee",
    "\5\66\34\2\u01ec\u01ee\5\36\20\2\u01ed\u01e9\3\2\2\2\u01ed\u01ea\3\2",
    "\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ec\3\2\2\2\u01ee\63\3\2\2\2\u01ef",
    "\u01f0\7p\2\2\u01f0\u01f1\58\35\2\u01f1\65\3\2\2\2\u01f2\u01f3\7q\2",
    "\2\u01f3\u01f4\58\35\2\u01f4\67\3\2\2\2\u01f5\u01f7\5J&\2\u01f6\u01f5",
    "\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\5D#\2\u01f9",
    "\u01fb\5\u00be`\2\u01fa\u01f9\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fc",
    "\3\2\2\2\u01fc\u01fd\7\\\2\2\u01fd9\3\2\2\2\u01fe\u0200\5<\37\2\u01ff",
    "\u01fe\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u01ff\3\2\2\2\u0201\u0202\3",
    "\2\2\2\u0202;\3\2\2\2\u0203\u0209\5\u008eH\2\u0204\u0209\5\u0092J\2",
    "\u0205\u0209\5> \2\u0206\u0209\5@!\2\u0207\u0209\5L\'\2\u0208\u0203",
    "\3\2\2\2\u0208\u0204\3\2\2\2\u0208\u0205\3\2\2\2\u0208\u0206\3\2\2\2",
    "\u0208\u0207\3\2\2\2\u0209=\3\2\2\2\u020a\u020b\7p\2\2\u020b\u020c\5",
    "B\"\2\u020c?\3\2\2\2\u020d\u020e\7q\2\2\u020e\u020f\5B\"\2\u020fA\3",
    "\2\2\2\u0210\u0212\5J&\2\u0211\u0210\3\2\2\2\u0211\u0212\3\2\2\2\u0212",
    "\u0213\3\2\2\2\u0213\u0215\5D#\2\u0214\u0216\5\u0096L\2\u0215\u0214",
    "\3\2\2\2\u0215\u0216\3\2\2\2\u0216\u0218\3\2\2\2\u0217\u0219\7\\\2\2",
    "\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b",
    "\5\u00d8m\2\u021bC\3\2\2\2\u021c\u0227\5H%\2\u021d\u021f\5F$\2\u021e",
    "\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u021e\3\2\2\2\u0220\u0221\3",
    "\2\2\2\u0221\u0224\3\2\2\2\u0222\u0223\7]\2\2\u0223\u0225\7\u0082\2",
    "\2\u0224\u0222\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226",
    "\u021c\3\2\2\2\u0226\u021e\3\2\2\2\u0227E\3\2\2\2\u0228\u022a\5H%\2",
    "\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022f",
    "\7g\2\2\u022c\u022e\5J&\2\u022d\u022c\3\2\2\2\u022e\u0231\3\2\2\2\u022f",
    "\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3",
    "\2\2\2\u0232\u0234\5\u00a0Q\2\u0233\u0232\3\2\2\2\u0233\u0234\3\2\2",
    "\2\u0234\u0235\3\2\2\2\u0235\u0236\5\u0104\u0083\2\u0236G\3\2\2\2\u0237",
    "\u023a\5\u0104\u0083\2\u0238\u023a\79\2\2\u0239\u0237\3\2\2\2\u0239",
    "\u0238\3\2\2\2\u023aI\3\2\2\2\u023b\u023c\7V\2\2\u023c\u023d\5\u00c8",
    "e\2\u023d\u023e\7W\2\2\u023eK\3\2\2\2\u023f\u0240\7\27\2\2\u0240\u0241",
    "\5N(\2\u0241\u0242\7\\\2\2\u0242\u0248\3\2\2\2\u0243\u0244\7\6\2\2\u0244",
    "\u0245\5N(\2\u0245\u0246\7\\\2\2\u0246\u0248\3\2\2\2\u0247\u023f\3\2",
    "\2\2\u0247\u0243\3\2\2\2\u0248M\3\2\2\2\u0249\u024e\5P)\2\u024a\u024b",
    "\7]\2\2\u024b\u024d\5P)\2\u024c\u024a\3\2\2\2\u024d\u0250\3\2\2\2\u024e",
    "\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024fO\3\2\2\2\u0250\u024e\3\2\2",
    "\2\u0251\u0254\5\u0104\u0083\2\u0252\u0253\7a\2\2\u0253\u0255\5\u0104",
    "\u0083\2\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255Q\3\2\2\2\u0256",
    "\u0257\5\u00a4S\2\u0257\u0258\7V\2\2\u0258\u025a\7v\2\2\u0259\u025b",
    "\5\u00a4S\2\u025a\u0259\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025c\3\2",
    "\2\2\u025c\u025e\7W\2\2\u025d\u025f\5j\66\2\u025e\u025d\3\2\2\2\u025e",
    "\u025f\3\2\2\2\u025fS\3\2\2\2\u0260\u0262\7c\2\2\u0261\u0263\5\u00a4",
    "S\2\u0262\u0261\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0268\3\2\2\2\u0264",
    "\u0265\7]\2\2\u0265\u0267\5\u00a4S\2\u0266\u0264\3\2\2\2\u0267\u026a",
    "\3\2\2\2\u0268\u0266\3\2\2\2\u0268\u0269\3\2\2\2\u0269\u026b\3\2\2\2",
    "\u026a\u0268\3\2\2\2\u026b\u026c\7b\2\2\u026cU\3\2\2\2\u026d\u026f\t",
    "\4\2\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0277\3\2\2\2\u0270",
    "\u0278\7#\2\2\u0271\u0278\7:\2\2\u0272\u0278\7\64\2\2\u0273\u0275\7",
    "\65\2\2\u0274\u0276\7\65\2\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2",
    "\u0276\u0278\3\2\2\2\u0277\u0270\3\2\2\2\u0277\u0271\3\2\2\2\u0277\u0272",
    "\3\2\2\2\u0277\u0273\3\2\2\2\u0278\u027c\3\2\2\2\u0279\u027c\7B\2\2",
    "\u027a\u027c\7;\2\2\u027b\u026e\3\2\2\2\u027b\u0279\3\2\2\2\u027b\u027a",
    "\3\2\2\2\u027cW\3\2\2\2\u027d\u027e\t\5\2\2\u027eY\3\2\2\2\u027f\u0293",
    "\5\u0104\u0083\2\u0280\u0293\5`\61\2\u0281\u0293\5\u0100\u0081\2\u0282",
    "\u0293\5\u0102\u0082\2\u0283\u0284\7V\2\2\u0284\u0285\5\u00e8u\2\u0285",
    "\u0286\7W\2\2\u0286\u0293\3\2\2\2\u0287\u0293\7\33\2\2\u0288\u0293\7",
    "\32\2\2\u0289\u0293\5n8\2\u028a\u0293\5v<\2\u028b\u0293\5z>\2\u028c",
    "\u0293\5|?\2\u028d\u0293\5b\62\2\u028e\u0293\5f\64\2\u028f\u0293\5h",
    "\65\2\u0290\u0293\5l\67\2\u0291\u0293\5\\/\2\u0292\u027f\3\2\2\2\u0292",
    "\u0280\3\2\2\2\u0292\u0281\3\2\2\2\u0292\u0282\3\2\2\2\u0292\u0283\3",
    "\2\2\2\u0292\u0287\3\2\2\2\u0292\u0288\3\2\2\2\u0292\u0289\3\2\2\2\u0292",
    "\u028a\3\2\2\2\u0292\u028b\3\2\2\2\u0292\u028c\3\2\2\2\u0292\u028d\3",
    "\2\2\2\u0292\u028e\3\2\2\2\u0292\u028f\3\2\2\2\u0292\u0290\3\2\2\2\u0292",
    "\u0291\3\2\2\2\u0293[\3\2\2\2\u0294\u0299\7X\2\2\u0295\u0297\5^\60\2",
    "\u0296\u0298\7]\2\2\u0297\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a",
    "\3\2\2\2\u0299\u0295\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u0299\3\2\2\2",
    "\u029b\u029c\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u029e\7Y\2\2\u029e]\3",
    "\2\2\2\u029f\u02a0\7^\2\2\u02a0\u02a1\5\u0104\u0083\2\u02a1\u02a2\7",
    "a\2\2\u02a2\u02a3\5\u00fa~\2\u02a3_\3\2\2\2\u02a4\u02a5\7C\2\2\u02a5",
    "\u02a6\7V\2\2\u02a6\u02a7\5\u00fa~\2\u02a7\u02a8\7]\2\2\u02a8\u02a9",
    "\5\u00a6T\2\u02a9\u02aa\7W\2\2\u02aaa\3\2\2\2\u02ab\u02ac\7`\2\2\u02ac",
    "\u02ae\7X\2\2\u02ad\u02af\5d\63\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3",
    "\2\2\2\u02af\u02b4\3\2\2\2\u02b0\u02b1\7]\2\2\u02b1\u02b3\5d\63\2\u02b2",
    "\u02b0\3\2\2\2\u02b3\u02b6\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b4\u02b5\3",
    "\2\2\2\u02b5\u02b8\3\2\2\2\u02b6\u02b4\3\2\2\2\u02b7\u02b9\7]\2\2\u02b8",
    "\u02b7\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb\7",
    "Y\2\2\u02bbc\3\2\2\2\u02bc\u02bd\5\u00f0y\2\u02bd\u02be\7g\2\2\u02be",
    "\u02bf\5\u00ecw\2\u02bfe\3\2\2\2\u02c0\u02c1\7`\2\2\u02c1\u02c3\7Z\2",
    "\2\u02c2\u02c4\5\u00ecw\2\u02c3\u02c2\3\2\2\2\u02c3\u02c4\3\2\2\2\u02c4",
    "\u02c9\3\2\2\2\u02c5\u02c6\7]\2\2\u02c6\u02c8\5\u00ecw\2\u02c7\u02c5",
    "\3\2\2\2\u02c8\u02cb\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2",
    "\u02ca\u02cd\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02ce\7]\2\2\u02cd\u02cc",
    "\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\7[\2\2",
    "\u02d0g\3\2\2\2\u02d1\u02d2\7`\2\2\u02d2\u02d3\7V\2\2\u02d3\u02d4\5",
    "\u00e8u\2\u02d4\u02d5\7W\2\2\u02d5\u02dc\3\2\2\2\u02d6\u02d9\7`\2\2",
    "\u02d7\u02da\5\u0100\u0081\2\u02d8\u02da\5\u0104\u0083\2\u02d9\u02d7",
    "\3\2\2\2\u02d9\u02d8\3\2\2\2\u02da\u02dc\3\2\2\2\u02db\u02d1\3\2\2\2",
    "\u02db\u02d6\3\2\2\2\u02dci\3\2\2\2\u02dd\u02e1\7V\2\2\u02de\u02e2\5",
    "~@\2\u02df\u02e2\5\u00c8e\2\u02e0\u02e2\7D\2\2\u02e1\u02de\3\2\2\2\u02e1",
    "\u02df\3\2\2\2\u02e1\u02e0\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u02ea\3",
    "\2\2\2\u02e3\u02e6\7]\2\2\u02e4\u02e7\5~@\2\u02e5\u02e7\5\u00c8e\2\u02e6",
    "\u02e4\3\2\2\2\u02e6\u02e5\3\2\2\2\u02e7\u02e9\3\2\2\2\u02e8\u02e3\3",
    "\2\2\2\u02e9\u02ec\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb",
    "\u02ed\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\u02ee\7W\2\2\u02eek\3\2\2\2",
    "\u02ef\u02f1\7v\2\2\u02f0\u02f2\5\u00a4S\2\u02f1\u02f0\3\2\2\2\u02f1",
    "\u02f2\3\2\2\2\u02f2\u02f4\3\2\2\2\u02f3\u02f5\5j\66\2\u02f4\u02f3\3",
    "\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6\u02f7\5\u00d8m",
    "\2\u02f7m\3\2\2\2\u02f8\u02f9\7Z\2\2\u02f9\u02fa\5p9\2\u02fa\u02fb\5",
    "r:\2\u02fb\u02fc\7[\2\2\u02fco\3\2\2\2\u02fd\u0301\5\u00e8u\2\u02fe",
    "\u0301\5$\23\2\u02ff\u0301\7\32\2\2\u0300\u02fd\3\2\2\2\u0300\u02fe",
    "\3\2\2\2\u0300\u02ff\3\2\2\2\u0301q\3\2\2\2\u0302\u0309\5H%\2\u0303",
    "\u0305\5t;\2\u0304\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306\u0304\3\2",
    "\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3\2\2\2\u0308\u0302\3\2\2\2\u0308",
    "\u0304\3\2\2\2\u0309s\3\2\2\2\u030a\u030c\5H%\2\u030b\u030a\3\2\2\2",
    "\u030b\u030c\3\2\2\2\u030c\u030d\3\2\2\2\u030d\u030e\7g\2\2\u030e\u0316",
    "\5\u00e8u\2\u030f\u0310\7X\2\2\u0310\u0312\5\u00c2b\2\u0311\u0313\7",
    "]\2\2\u0312\u0311\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314",
    "\u0315\7Y\2\2\u0315\u0317\3\2\2\2\u0316\u030f\3\2\2\2\u0316\u0317\3",
    "\2\2\2\u0317\u0325\3\2\2\2\u0318\u0319\7]\2\2\u0319\u0321\5\u00e8u\2",
    "\u031a\u031b\7X\2\2\u031b\u031d\5\u00c2b\2\u031c\u031e\7]\2\2\u031d",
    "\u031c\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\7",
    "Y\2\2\u0320\u0322\3\2\2\2\u0321\u031a\3\2\2\2\u0321\u0322\3\2\2\2\u0322",
    "\u0324\3\2\2\2\u0323\u0318\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323\3",
    "\2\2\2\u0325\u0326\3\2\2\2\u0326u\3\2\2\2\u0327\u0325\3\2\2\2\u0328",
    "\u0329\7\25\2\2\u0329\u032a\7V\2\2\u032a\u032b\5x=\2\u032b\u032c\7W",
    "\2\2\u032cw\3\2\2\2\u032d\u0337\5H%\2\u032e\u0330\5H%\2\u032f\u032e",
    "\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0333\7g\2\2",
    "\u0332\u032f\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335",
    "\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u032d\3\2\2\2\u0336\u0332\3\2\2\2",
    "\u0337y\3\2\2\2\u0338\u0339\7\16\2\2\u0339\u033a\7V\2\2\u033a\u033b",
    "\5*\26\2\u033b\u033c\7W\2\2\u033c{\3\2\2\2\u033d\u033e\7\7\2\2\u033e",
    "\u033f\7V\2\2\u033f\u0340\5\u00c8e\2\u0340\u0341\7W\2\2\u0341}\3\2\2",
    "\2\u0342\u0344\5\u0094K\2\u0343\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345",
    "\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0348\5",
    "\u00ba^\2\u0348\177\3\2\2\2\u0349\u034a\7\31\2\2\u034a\u034b\5\u00d8",
    "m\2\u034b\u0081\3\2\2\2\u034c\u034d\7\4\2\2\u034d\u034e\7V\2\2\u034e",
    "\u034f\5~@\2\u034f\u0350\7W\2\2\u0350\u0351\5\u00d8m\2\u0351\u0083\3",
    "\2\2\2\u0352\u0353\7\t\2\2\u0353\u0354\5\u00d8m\2\u0354\u0085\3\2\2",
    "\2\u0355\u0356\7\30\2\2\u0356\u0357\7V\2\2\u0357\u0358\5\u0104\u0083",
    "\2\u0358\u0359\7W\2\2\u0359\u035d\3\2\2\2\u035a\u035b\7\30\2\2\u035b",
    "\u035d\5\u00e8u\2\u035c\u0355\3\2\2\2\u035c\u035a\3\2\2\2\u035d\u0087",
    "\3\2\2\2\u035e\u0362\5\u0080A\2\u035f\u0361\5\u0082B\2\u0360\u035f\3",
    "\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363",
    "\u0366\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0367\5\u0084C\2\u0366\u0365",
    "\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0089\3\2\2\2\u0368\u0369\7\26\2",
    "\2\u0369\u036a\7V\2\2\u036a\u036b\5\u00e8u\2\u036b\u036c\7W\2\2\u036c",
    "\u036d\5\u00d8m\2\u036d\u008b\3\2\2\2\u036e\u036f\7\3\2\2\u036f\u0370",
    "\5\u00d8m\2\u0370\u008d\3\2\2\2\u0371\u0373\5\u0094K\2\u0372\u0371\3",
    "\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375",
    "\u0377\3\2\2\2\u0376\u0374\3\2\2\2\u0377\u0378\5\u0090I\2\u0378\u0379",
    "\5\u00d8m\2\u0379\u008f\3\2\2\2\u037a\u037b\5\u00ba^\2\u037b\u0091\3",
    "\2\2\2\u037c\u037e\5\u0094K\2\u037d\u037c\3\2\2\2\u037e\u0381\3\2\2",
    "\2\u037f\u037d\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0383\3\2\2\2\u0381",
    "\u037f\3\2\2\2\u0382\u0384\5\u0096L\2\u0383\u0382\3\2\2\2\u0383\u0384",
    "\3\2\2\2\u0384\u0386\3\2\2\2\u0385\u0387\5\u00be`\2\u0386\u0385\3\2",
    "\2\2\u0386\u0387\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\7\\\2\2\u0389",
    "\u0093\3\2\2\2\u038a\u038f\5\u00a0Q\2\u038b\u038f\5\u00a2R\2\u038c\u038f",
    "\5\u00a4S\2\u038d\u038f\5\u00a8U\2\u038e\u038a\3\2\2\2\u038e\u038b\3",
    "\2\2\2\u038e\u038c\3\2\2\2\u038e\u038d\3\2\2\2\u038f\u0095\3\2\2\2\u0390",
    "\u0395\5\u0098M\2\u0391\u0392\7]\2\2\u0392\u0394\5\u0098M\2\u0393\u0391",
    "\3\2\2\2\u0394\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2",
    "\u0396\u0097\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u039b\5\u00ba^\2\u0399",
    "\u039a\7a\2\2\u039a\u039c\5\u00c0a\2\u039b\u0399\3\2\2\2\u039b\u039c",
    "\3\2\2\2\u039c\u0099\3\2\2\2\u039d\u03aa\t\6\2\2\u039e\u03ab\5\u0104",
    "\u0083\2\u039f\u03a1\5\u0104\u0083\2\u03a0\u039f\3\2\2\2\u03a0\u03a1",
    "\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a4\7X\2\2\u03a3\u03a5\5\u009c",
    "O\2\u03a4\u03a3\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a4\3\2\2\2\u03a6",
    "\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7Y\2\2\u03a9\u03ab\3",
    "\2\2\2\u03aa\u039e\3\2\2\2\u03aa\u03a0\3\2\2\2\u03ab\u009b\3\2\2\2\u03ac",
    "\u03ad\5\u009eP\2\u03ad\u03af\5\u00acW\2\u03ae\u03b0\5\u00be`\2\u03af",
    "\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\7",
    "\\\2\2\u03b2\u009d\3\2\2\2\u03b3\u03b5\5\u00a0Q\2\u03b4\u03b6\7r\2\2",
    "\u03b5\u03b4\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03ba\3\2\2\2\u03b7\u03ba",
    "\5\u00a4S\2\u03b8\u03ba\5\u00a8U\2\u03b9\u03b3\3\2\2\2\u03b9\u03b7\3",
    "\2\2\2\u03b9\u03b8\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb",
    "\u03bc\3\2\2\2\u03bc\u009f\3\2\2\2\u03bd\u03be\t\7\2\2\u03be\u00a1\3",
    "\2\2\2\u03bf\u03c0\t\b\2\2\u03c0\u00a3\3\2\2\2\u03c1\u03c2\t\t\2\2\u03c2",
    "\u03c3\7V\2\2\u03c3\u03c4\5$\23\2\u03c4\u03c5\7W\2\2\u03c5\u03ce\3\2",
    "\2\2\u03c6\u03c8\7Q\2\2\u03c7\u03c6\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8",
    "\u03c9\3\2\2\2\u03c9\u03cb\5\u00a6T\2\u03ca\u03cc\7r\2\2\u03cb\u03ca",
    "\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03c1\3\2\2\2",
    "\u03cd\u03c7\3\2\2\2\u03ce\u00a5\3\2\2\2\u03cf\u03d1\7T\2\2\u03d0\u03cf",
    "\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03e0\3\2\2\2\u03d2\u03e1\7D\2\2",
    "\u03d3\u03e1\7#\2\2\u03d4\u03e1\7,\2\2\u03d5\u03e1\7(\2\2\u03d6\u03e1",
    "\5V,\2\u03d7\u03e1\7\62\2\2\u03d8\u03da\7.\2\2\u03d9\u03db\5\32\16\2",
    "\u03da\u03d9\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03e1\3\2\2\2\u03dc\u03e1",
    "\5\u00aaV\2\u03dd\u03e1\5\u009aN\2\u03de\u03e1\5\u00b0Y\2\u03df\u03e1",
    "\5\u0104\u0083\2\u03e0\u03d2\3\2\2\2\u03e0\u03d3\3\2\2\2\u03e0\u03d4",
    "\3\2\2\2\u03e0\u03d5\3\2\2\2\u03e0\u03d6\3\2\2\2\u03e0\u03d7\3\2\2\2",
    "\u03e0\u03d8\3\2\2\2\u03e0\u03dc\3\2\2\2\u03e0\u03dd\3\2\2\2\u03e0\u03de",
    "\3\2\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e4\5\u00bc",
    "_\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u00a7\3\2\2\2\u03e5",
    "\u03e9\7$\2\2\u03e6\u03e9\7E\2\2\u03e7\u03e9\5X-\2\u03e8\u03e5\3\2\2",
    "\2\u03e8\u03e6\3\2\2\2\u03e8\u03e7\3\2\2\2\u03e9\u00a9\3\2\2\2\u03ea",
    "\u03ed\5$\23\2\u03eb\u03ee\5\32\16\2\u03ec\u03ee\5T+\2\u03ed\u03eb\3",
    "\2\2\2\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u00ab\3\2\2\2\u03ef",
    "\u03f4\5\u00aeX\2\u03f0\u03f1\7]\2\2\u03f1\u03f3\5\u00aeX\2\u03f2\u03f0",
    "\3\2\2\2\u03f3\u03f6\3\2\2\2\u03f4\u03f2\3\2\2\2\u03f4\u03f5\3\2\2\2",
    "\u03f5\u00ad\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f7\u03fe\5\u00ba^\2\u03f8",
    "\u03fa\5\u00ba^\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb",
    "\3\2\2\2\u03fb\u03fc\7g\2\2\u03fc\u03fe\5\u0100\u0081\2\u03fd\u03f7",
    "\3\2\2\2\u03fd\u03f9\3\2\2\2\u03fe\u00af\3\2\2\2\u03ff\u0413\7*\2\2",
    "\u0400\u0403\5\u0104\u0083\2\u0401\u0402\7g\2\2\u0402\u0404\5\u00c8",
    "e\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0409\3\2\2\2\u0405",
    "\u0406\7X\2\2\u0406\u0407\5\u00b2Z\2\u0407\u0408\7Y\2\2\u0408\u040a",
    "\3\2\2\2\u0409\u0405\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u0414\3\2\2\2",
    "\u040b\u040c\7g\2\2\u040c\u040e\5\u00c8e\2\u040d\u040b\3\2\2\2\u040d",
    "\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410\7X\2\2\u0410\u0411\5",
    "\u00b2Z\2\u0411\u0412\7Y\2\2\u0412\u0414\3\2\2\2\u0413\u0400\3\2\2\2",
    "\u0413\u040d\3\2\2\2\u0414\u042a\3\2\2\2\u0415\u0416\7G\2\2\u0416\u0417",
    "\7V\2\2\u0417\u0418\5\u00c8e\2\u0418\u0419\7]\2\2\u0419\u041a\5\u0104",
    "\u0083\2\u041a\u041b\7W\2\2\u041b\u041c\7X\2\2\u041c\u041d\5\u00b2Z",
    "\2\u041d\u041e\7Y\2\2\u041e\u042a\3\2\2\2\u041f\u0420\7H\2\2\u0420\u0421",
    "\7V\2\2\u0421\u0422\5\u00c8e\2\u0422\u0423\7]\2\2\u0423\u0424\5\u0104",
    "\u0083\2\u0424\u0425\7W\2\2\u0425\u0426\7X\2\2\u0426\u0427\5\u00b2Z",
    "\2\u0427\u0428\7Y\2\2\u0428\u042a\3\2\2\2\u0429\u03ff\3\2\2\2\u0429",
    "\u0415\3\2\2\2\u0429\u041f\3\2\2\2\u042a\u00b1\3\2\2\2\u042b\u0430\5",
    "\u00b4[\2\u042c\u042d\7]\2\2\u042d\u042f\5\u00b4[\2\u042e\u042c\3\2",
    "\2\2\u042f\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431",
    "\u0434\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u0435\7]\2\2\u0434\u0433\3",
    "\2\2\2\u0434\u0435\3\2\2\2\u0435\u00b3\3\2\2\2\u0436\u0439\5\u00f6|",
    "\2\u0437\u0438\7a\2\2\u0438\u043a\5\u00eex\2\u0439\u0437\3\2\2\2\u0439",
    "\u043a\3\2\2\2\u043a\u00b5\3\2\2\2\u043b\u043f\5\u0104\u0083\2\u043c",
    "\u043e\5\u00b8]\2\u043d\u043c\3\2\2\2\u043e\u0441\3\2\2\2\u043f\u043d",
    "\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0453\3\2\2\2\u0441\u043f\3\2\2\2",
    "\u0442\u0443\7V\2\2\u0443\u0444\5\u00ba^\2\u0444\u0448\7W\2\2\u0445",
    "\u0447\5\u00b8]\2\u0446\u0445\3\2\2\2\u0447\u044a\3\2\2\2\u0448\u0446",
    "\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u0453\3\2\2\2\u044a\u0448\3\2\2\2",
    "\u044b\u044c\7V\2\2\u044c\u044e\7v\2\2\u044d\u044f\5\u0104\u0083\2\u044e",
    "\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0451\7",
    "W\2\2\u0451\u0453\5j\66\2\u0452\u043b\3\2\2\2\u0452\u0442\3\2\2\2\u0452",
    "\u044b\3\2\2\2\u0453\u00b7\3\2\2\2\u0454\u0456\7Z\2\2\u0455\u0457\5",
    "\u00f4{\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2\2\2\u0457\u0458\3\2\2",
    "\2\u0458\u0463\7[\2\2\u0459\u045f\7V\2\2\u045a\u045d\5\u00ceh\2\u045b",
    "\u045c\7]\2\2\u045c\u045e\7\u0082\2\2\u045d\u045b\3\2\2\2\u045d\u045e",
    "\3\2\2\2\u045e\u0460\3\2\2\2\u045f\u045a\3\2\2\2\u045f\u0460\3\2\2\2",
    "\u0460\u0461\3\2\2\2\u0461\u0463\7W\2\2\u0462\u0454\3\2\2\2\u0462\u0459",
    "\3\2\2\2\u0463\u00b9\3\2\2\2\u0464\u0466\5\u00bc_\2\u0465\u0464\3\2",
    "\2\2\u0465\u0466\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0468\5\u00b6\\\2",
    "\u0468\u00bb\3\2\2\2\u0469\u046d\7r\2\2\u046a\u046c\5\u0094K\2\u046b",
    "\u046a\3\2\2\2\u046c\u046f\3\2\2\2\u046d\u046b\3\2\2\2\u046d\u046e\3",
    "\2\2\2\u046e\u0471\3\2\2\2\u046f\u046d\3\2\2\2\u0470\u0472\5\u00bc_",
    "\2\u0471\u0470\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u00bd\3\2\2\2\u0473",
    "\u047f\5\u0104\u0083\2\u0474\u0475\7V\2\2\u0475\u047a\5Z.\2\u0476\u0477",
    "\7]\2\2\u0477\u0479\5Z.\2\u0478\u0476\3\2\2\2\u0479\u047c\3\2\2\2\u047a",
    "\u0478\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047d\3\2\2\2\u047c\u047a\3",
    "\2\2\2\u047d\u047e\7W\2\2\u047e\u0480\3\2\2\2\u047f\u0474\3\2\2\2\u047f",
    "\u0480\3\2\2\2\u0480\u00bf\3\2\2\2\u0481\u048b\5\u00eav\2\u0482\u0487",
    "\7X\2\2\u0483\u0485\5\u00c2b\2\u0484\u0486\7]\2\2\u0485\u0484\3\2\2",
    "\2\u0485\u0486\3\2\2\2\u0486\u0488\3\2\2\2\u0487\u0483\3\2\2\2\u0487",
    "\u0488\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048b\7Y\2\2\u048a\u0481\3",
    "\2\2\2\u048a\u0482\3\2\2\2\u048b\u00c1\3\2\2\2\u048c\u048e\5\u00c4c",
    "\2\u048d\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u048f\3\2\2\2\u048f",
    "\u0497\5\u00c0a\2\u0490\u0492\7]\2\2\u0491\u0493\5\u00c4c\2\u0492\u0491",
    "\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0496\5\u00c0",
    "a\2\u0495\u0490\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2\u0497",
    "\u0498\3\2\2\2\u0498\u00c3\3\2\2\2\u0499\u0497\3\2\2\2\u049a\u049c\5",
    "\u00c6d\2\u049b\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049b\3\2\2",
    "\2\u049d\u049e\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a0\7a\2\2\u04a0",
    "\u00c5\3\2\2\2\u04a1\u04a2\7Z\2\2\u04a2\u04a3\5\u00f4{\2\u04a3\u04a4",
    "\7[\2\2\u04a4\u04a8\3\2\2\2\u04a5\u04a6\7^\2\2\u04a6\u04a8\5\u0104\u0083",
    "\2\u04a7\u04a1\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u00c7\3\2\2\2\u04a9",
    "\u04ab\5\u009eP\2\u04aa\u04ac\5\u00caf\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac",
    "\3\2\2\2\u04ac\u04af\3\2\2\2\u04ad\u04af\5R*\2\u04ae\u04a9\3\2\2\2\u04ae",
    "\u04ad\3\2\2\2\u04af\u00c9\3\2\2\2\u04b0\u04b1\5\u00bc_\2\u04b1\u04b2",
    "\5\u00caf\2\u04b2\u04c5\3\2\2\2\u04b3\u04b4\7V\2\2\u04b4\u04b5\5\u00ca",
    "f\2\u04b5\u04b7\7W\2\2\u04b6\u04b8\5\u00ccg\2\u04b7\u04b6\3\2\2\2\u04b8",
    "\u04b9\3\2\2\2\u04b9\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04c5\3",
    "\2\2\2\u04bb\u04bd\7Z\2\2\u04bc\u04be\5\u00f4{\2\u04bd\u04bc\3\2\2\2",
    "\u04bd\u04be\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c1\7[\2\2\u04c0\u04bb",
    "\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2",
    "\u04c3\u04c5\3\2\2\2\u04c4\u04b0\3\2\2\2\u04c4\u04b3\3\2\2\2\u04c4\u04c0",
    "\3\2\2\2\u04c5\u00cb\3\2\2\2\u04c6\u04c8\7Z\2\2\u04c7\u04c9\5\u00f4",
    "{\2\u04c8\u04c7\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca",
    "\u04d1\7[\2\2\u04cb\u04cd\7V\2\2\u04cc\u04ce\5\u00ceh\2\u04cd\u04cc",
    "\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d1\7W\2\2",
    "\u04d0\u04c6\3\2\2\2\u04d0\u04cb\3\2\2\2\u04d1\u00cd\3\2\2\2\u04d2\u04d7",
    "\5\u00d0i\2\u04d3\u04d4\7]\2\2\u04d4\u04d6\5\u00d0i\2\u04d5\u04d3\3",
    "\2\2\2\u04d6\u04d9\3\2\2\2\u04d7\u04d5\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8",
    "\u00cf\3\2\2\2\u04d9\u04d7\3\2\2\2\u04da\u04dc\5\u0094K\2\u04db\u04da",
    "\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de\3\2\2\2",
    "\u04de\u04e3\3\2\2\2\u04df\u04e1\5\u00ba^\2\u04e0\u04df\3\2\2\2\u04e0",
    "\u04e1\3\2\2\2\u04e1\u04e4\3\2\2\2\u04e2\u04e4\5\u00caf\2\u04e3\u04e0",
    "\3\2\2\2\u04e3\u04e2\3\2\2\2\u04e4\u00d1\3\2\2\2\u04e5\u04e7\5\u00d4",
    "k\2\u04e6\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8",
    "\u04e9\3\2\2\2\u04e9\u00d3\3\2\2\2\u04ea\u04ec\5\u00d6l\2\u04eb\u04ed",
    "\7\\\2\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u0514\3\2\2\2",
    "\u04ee\u04f0\5\u00d8m\2\u04ef\u04f1\7\\\2\2\u04f0\u04ef\3\2\2\2\u04f0",
    "\u04f1\3\2\2\2\u04f1\u0514\3\2\2\2\u04f2\u04f4\5\u00dan\2\u04f3\u04f5",
    "\7\\\2\2\u04f4\u04f3\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u0514\3\2\2\2",
    "\u04f6\u04f8\5\u00e4s\2\u04f7\u04f9\7\\\2\2\u04f8\u04f7\3\2\2\2\u04f8",
    "\u04f9\3\2\2\2\u04f9\u0514\3\2\2\2\u04fa\u04fc\5\u00e6t\2\u04fb\u04fd",
    "\7\\\2\2\u04fc\u04fb\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u0514\3\2\2\2",
    "\u04fe\u0500\5\u008aF\2\u04ff\u0501\7\\\2\2\u0500\u04ff\3\2\2\2\u0500",
    "\u0501\3\2\2\2\u0501\u0514\3\2\2\2\u0502\u0504\5\u008cG\2\u0503\u0505",
    "\7\\\2\2\u0504\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0514\3\2\2\2",
    "\u0506\u0508\5\u0086D\2\u0507\u0509\7\\\2\2\u0508\u0507\3\2\2\2\u0508",
    "\u0509\3\2\2\2\u0509\u0514\3\2\2\2\u050a\u050c\5\u0088E\2\u050b\u050d",
    "\7\\\2\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u0514\3\2\2\2",
    "\u050e\u0510\5\u00e8u\2\u050f\u0511\7\\\2\2\u0510\u050f\3\2\2\2\u0510",
    "\u0511\3\2\2\2\u0511\u0514\3\2\2\2\u0512\u0514\7\\\2\2\u0513\u04ea\3",
    "\2\2\2\u0513\u04ee\3\2\2\2\u0513\u04f2\3\2\2\2\u0513\u04f6\3\2\2\2\u0513",
    "\u04fa\3\2\2\2\u0513\u04fe\3\2\2\2\u0513\u0502\3\2\2\2\u0513\u0506\3",
    "\2\2\2\u0513\u050a\3\2\2\2\u0513\u050e\3\2\2\2\u0513\u0512\3\2\2\2\u0514",
    "\u00d5\3\2\2\2\u0515\u0516\5\u0104\u0083\2\u0516\u0517\7g\2\2\u0517",
    "\u0518\5\u00d4k\2\u0518\u0528\3\2\2\2\u0519\u051f\7\"\2\2\u051a\u0520",
    "\5\u00f4{\2\u051b\u051c\7V\2\2\u051c\u051d\5\u00f4{\2\u051d\u051e\7",
    "W\2\2\u051e\u0520\3\2\2\2\u051f\u051a\3\2\2\2\u051f\u051b\3\2\2\2\u0520",
    "\u0521\3\2\2\2\u0521\u0522\7g\2\2\u0522\u0523\5\u00d4k\2\u0523\u0528",
    "\3\2\2\2\u0524\u0525\7&\2\2\u0525\u0526\7g\2\2\u0526\u0528\5\u00d4k",
    "\2\u0527\u0515\3\2\2\2\u0527\u0519\3\2\2\2\u0527\u0524\3\2\2\2\u0528",
    "\u00d7\3\2\2\2\u0529\u052e\7X\2\2\u052a\u052d\5\u0092J\2\u052b\u052d",
    "\5\u00d2j\2\u052c\u052a\3\2\2\2\u052c\u052b\3\2\2\2\u052d\u0530\3\2",
    "\2\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0531\3\2\2\2\u0530",
    "\u052e\3\2\2\2\u0531\u0532\7Y\2\2\u0532\u00d9\3\2\2\2\u0533\u0534\7",
    "/\2\2\u0534\u0535\7V\2\2\u0535\u0536\5\u00e8u\2\u0536\u0537\7W\2\2\u0537",
    "\u053a\5\u00d4k\2\u0538\u0539\7)\2\2\u0539\u053b\5\u00d4k\2\u053a\u0538",
    "\3\2\2\2\u053a\u053b\3\2\2\2\u053b\u0543\3\2\2\2\u053c\u053d\7?\2\2",
    "\u053d\u053e\7V\2\2\u053e\u053f\5\u00e8u\2\u053f\u0540\7W\2\2\u0540",
    "\u0541\5\u00d4k\2\u0541\u0543\3\2\2\2\u0542\u0533\3\2\2\2\u0542\u053c",
    "\3\2\2\2\u0543\u00db\3\2\2\2\u0544\u0545\7-\2\2\u0545\u0546\7V\2\2\u0546",
    "\u0547\5~@\2\u0547\u0549\7\60\2\2\u0548\u054a\5\u00e8u\2\u0549\u0548",
    "\3\2\2\2\u0549\u054a\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\7W\2\2",
    "\u054c\u054d\5\u00d4k\2\u054d\u00dd\3\2\2\2\u054e\u054f\7-\2\2\u054f",
    "\u0558\7V\2\2\u0550\u0552\5\u0094K\2\u0551\u0550\3\2\2\2\u0552\u0553",
    "\3\2\2\2\u0553\u0551\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0555\3\2\2\2",
    "\u0555\u0556\5\u0096L\2\u0556\u0559\3\2\2\2\u0557\u0559\5\u00e8u\2\u0558",
    "\u0551\3\2\2\2\u0558\u0557\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055a\3",
    "\2\2\2\u055a\u055c\7\\\2\2\u055b\u055d\5\u00e8u\2\u055c\u055b\3\2\2",
    "\2\u055c\u055d\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560\7\\\2\2\u055f",
    "\u0561\5\u00e8u\2\u0560\u055f\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562",
    "\3\2\2\2\u0562\u0563\7W\2\2\u0563\u0564\5\u00d4k\2\u0564\u00df\3\2\2",
    "\2\u0565\u0566\7F\2\2\u0566\u0567\7V\2\2\u0567\u0568\5\u00e8u\2\u0568",
    "\u0569\7W\2\2\u0569\u056a\5\u00d4k\2\u056a\u00e1\3\2\2\2\u056b\u056c",
    "\7\'\2\2\u056c\u056d\5\u00d4k\2\u056d\u056e\7F\2\2\u056e\u056f\7V\2",
    "\2\u056f\u0570\5\u00e8u\2\u0570\u0571\7W\2\2\u0571\u0572\7\\\2\2\u0572",
    "\u00e3\3\2\2\2\u0573\u0578\5\u00e0q\2\u0574\u0578\5\u00e2r\2\u0575\u0578",
    "\5\u00dep\2\u0576\u0578\5\u00dco\2\u0577\u0573\3\2\2\2\u0577\u0574\3",
    "\2\2\2\u0577\u0575\3\2\2\2\u0577\u0576\3\2\2\2\u0578\u00e5\3\2\2\2\u0579",
    "\u057a\7\63\2\2\u057a\u057b\5\u0104\u0083\2\u057b\u057c\7\\\2\2\u057c",
    "\u0587\3\2\2\2\u057d\u057e\7%\2\2\u057e\u0587\7\\\2\2\u057f\u0580\7",
    "\37\2\2\u0580\u0587\7\\\2\2\u0581\u0583\79\2\2\u0582\u0584\5\u00e8u",
    "\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\3\2\2\2\u0585",
    "\u0587\7\\\2\2\u0586\u0579\3\2\2\2\u0586\u057d\3\2\2\2\u0586\u057f\3",
    "\2\2\2\u0586\u0581\3\2\2\2\u0587\u00e7\3\2\2\2\u0588\u058d\5\u00eav",
    "\2\u0589\u058a\7]\2\2\u058a\u058c\5\u00eav\2\u058b\u0589\3\2\2\2\u058c",
    "\u058f\3\2\2\2\u058d\u058b\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u00e9\3",
    "\2\2\2\u058f\u058d\3\2\2\2\u0590\u0596\5\u00ecw\2\u0591\u0592\5\u00f6",
    "|\2\u0592\u0593\5\u00f2z\2\u0593\u0594\5\u00eav\2\u0594\u0596\3\2\2",
    "\2\u0595\u0590\3\2\2\2\u0595\u0591\3\2\2\2\u0596\u00eb\3\2\2\2\u0597",
    "\u05a1\5\u00eex\2\u0598\u0599\5\u00eex\2\u0599\u059b\7f\2\2\u059a\u059c",
    "\5\u00e8u\2\u059b\u059a\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059d\3\2",
    "\2\2\u059d\u059e\7g\2\2\u059e\u059f\5\u00ecw\2\u059f\u05a1\3\2\2\2\u05a0",
    "\u0597\3\2\2\2\u05a0\u0598\3\2\2\2\u05a1\u00ed\3\2\2\2\u05a2\u05a3\b",
    "x\1\2\u05a3\u05a4\5\u00f0y\2\u05a4\u05cb\3\2\2\2\u05a5\u05a6\f\f\2\2",
    "\u05a6\u05a7\t\n\2\2\u05a7\u05ca\5\u00eex\r\u05a8\u05a9\f\13\2\2\u05a9",
    "\u05aa\t\13\2\2\u05aa\u05ca\5\u00eex\f\u05ab\u05b1\f\n\2\2\u05ac\u05ad",
    "\7c\2\2\u05ad\u05b2\7c\2\2\u05ae\u05af\7b\2\2\u05af\u05b2\7b\2\2\u05b0",
    "\u05b2\7c\2\2\u05b1\u05ac\3\2\2\2\u05b1\u05ae\3\2\2\2\u05b1\u05b0\3",
    "\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05ca\5\u00eex\13\u05b4\u05b5\f\t\2",
    "\2\u05b5\u05b6\t\f\2\2\u05b6\u05ca\5\u00eex\n\u05b7\u05b8\f\b\2\2\u05b8",
    "\u05b9\t\r\2\2\u05b9\u05ca\5\u00eex\t\u05ba\u05bb\f\7\2\2\u05bb\u05bc",
    "\7t\2\2\u05bc\u05ca\5\u00eex\b\u05bd\u05be\f\6\2\2\u05be\u05bf\7v\2",
    "\2\u05bf\u05ca\5\u00eex\7\u05c0\u05c1\f\5\2\2\u05c1\u05c2\7u\2\2\u05c2",
    "\u05ca\5\u00eex\6\u05c3\u05c4\f\4\2\2\u05c4\u05c5\7l\2\2\u05c5\u05ca",
    "\5\u00eex\5\u05c6\u05c7\f\3\2\2\u05c7\u05c8\7m\2\2\u05c8\u05ca\5\u00ee",
    "x\4\u05c9\u05a5\3\2\2\2\u05c9\u05a8\3\2\2\2\u05c9\u05ab\3\2\2\2\u05c9",
    "\u05b4\3\2\2\2\u05c9\u05b7\3\2\2\2\u05c9\u05ba\3\2\2\2\u05c9\u05bd\3",
    "\2\2\2\u05c9\u05c0\3\2\2\2\u05c9\u05c3\3\2\2\2\u05c9\u05c6\3\2\2\2\u05ca",
    "\u05cd\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u00ef\3",
    "\2\2\2\u05cd\u05cb\3\2\2\2\u05ce\u05cf\7V\2\2\u05cf\u05d0\5\u00c8e\2",
    "\u05d0\u05d1\7W\2\2\u05d1\u05d2\5\u00f0y\2\u05d2\u05d5\3\2\2\2\u05d3",
    "\u05d5\5\u00f6|\2\u05d4\u05ce\3\2\2\2\u05d4\u05d3\3\2\2\2\u05d5\u00f1",
    "\3\2\2\2\u05d6\u05d7\t\16\2\2\u05d7\u00f3\3\2\2\2\u05d8\u05db\5\u0104",
    "\u0083\2\u05d9\u05db\5\u0100\u0081\2\u05da\u05d8\3\2\2\2\u05da\u05d9",
    "\3\2\2\2\u05db\u00f5\3\2\2\2\u05dc\u05f1\5\u00fa~\2\u05dd\u05de\7n\2",
    "\2\u05de\u05f1\5\u00f6|\2\u05df\u05e0\7o\2\2\u05e0\u05f1\5\u00f6|\2",
    "\u05e1\u05e2\5\u00f8}\2\u05e2\u05e3\5\u00f0y\2\u05e3\u05f1\3\2\2\2\u05e4",
    "\u05ea\7<\2\2\u05e5\u05e6\7V\2\2\u05e6\u05e7\5\u00c8e\2\u05e7\u05e8",
    "\7W\2\2\u05e8\u05eb\3\2\2\2\u05e9\u05eb\5\u00f6|\2\u05ea\u05e5\3\2\2",
    "\2\u05ea\u05e9\3\2\2\2\u05eb\u05f1\3\2\2\2\u05ec\u05ed\7X\2\2\u05ed",
    "\u05ee\5\u00b2Z\2\u05ee\u05ef\7Y\2\2\u05ef\u05f1\3\2\2\2\u05f0\u05dc",
    "\3\2\2\2\u05f0\u05dd\3\2\2\2\u05f0\u05df\3\2\2\2\u05f0\u05e1\3\2\2\2",
    "\u05f0\u05e4\3\2\2\2\u05f0\u05ec\3\2\2\2\u05f1\u00f7\3\2\2\2\u05f2\u05f3",
    "\t\17\2\2\u05f3\u00f9\3\2\2\2\u05f4\u0604\5Z.\2\u05f5\u05f6\7Z\2\2\u05f6",
    "\u05f7\5\u00e8u\2\u05f7\u05f8\7[\2\2\u05f8\u0603\3\2\2\2\u05f9\u05fb",
    "\7V\2\2\u05fa\u05fc\5\u00fe\u0080\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc",
    "\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u0603\7W\2\2\u05fe\u0603\5\u00fc",
    "\177\2\u05ff\u0603\7n\2\2\u0600\u0603\7o\2\2\u0601\u0603\7r\2\2\u0602",
    "\u05f5\3\2\2\2\u0602\u05f9\3\2\2\2\u0602\u05fe\3\2\2\2\u0602\u05ff\3",
    "\2\2\2\u0602\u0600\3\2\2\2\u0602\u0601\3\2\2\2\u0603\u0606\3\2\2\2\u0604",
    "\u0602\3\2\2\2\u0604\u0605\3\2\2\2\u0605\u00fb\3\2\2\2\u0606\u0604\3",
    "\2\2\2\u0607\u0608\t\20\2\2\u0608\u0609\5\u0104\u0083\2\u0609\u00fd",
    "\3\2\2\2\u060a\u060f\5\u00e8u\2\u060b\u060c\7]\2\2\u060c\u060e\5\u00e8",
    "u\2\u060d\u060b\3\2\2\2\u060e\u0611\3\2\2\2\u060f\u060d\3\2\2\2\u060f",
    "\u0610\3\2\2\2\u0610\u00ff\3\2\2\2\u0611\u060f\3\2\2\2\u0612\u0614\t",
    "\13\2\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0615\3\2\2\2",
    "\u0615\u061e\7\u0091\2\2\u0616\u061e\7\u0090\2\2\u0617\u061e\7\u0092",
    "\2\2\u0618\u061e\7\u008d\2\2\u0619\u061b\t\13\2\2\u061a\u0619\3\2\2",
    "\2\u061a\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061e\7\u0093\2\2\u061d",
    "\u0613\3\2\2\2\u061d\u0616\3\2\2\2\u061d\u0617\3\2\2\2\u061d\u0618\3",
    "\2\2\2\u061d\u061a\3\2\2\2\u061e\u0101\3\2\2\2\u061f\u0621\t\21\2\2",
    "\u0620\u061f\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624",
    "\7\u008e\2\2\u0623\u0620\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0623\3\2",
    "\2\2\u0625\u0626\3\2\2\2\u0626\u062d\3\2\2\2\u0627\u0629\7\u008f\2\2",
    "\u0628\u0627\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u0628\3\2\2\2\u062a\u062b",
    "\3\2\2\2\u062b\u062d\3\2\2\2\u062c\u0623\3\2\2\2\u062c\u0628\3\2\2\2",
    "\u062d\u0103\3\2\2\2\u062e\u062f\t\22\2\2\u062f\u0105\3\2\2\2\u00d0",
    "\u0109\u011a\u0126\u0129\u012c\u012f\u0137\u013b\u013e\u0141\u0149\u014c",
    "\u014f\u0159\u0160\u0163\u0166\u0169\u016c\u017d\u0189\u0191\u019a\u01ad",
    "\u01b7\u01ba\u01c0\u01c9\u01d1\u01db\u01e0\u01e7\u01ed\u01f6\u01fa\u0201",
    "\u0208\u0211\u0215\u0218\u0220\u0224\u0226\u0229\u022f\u0233\u0239\u0247",
    "\u024e\u0254\u025a\u025e\u0262\u0268\u026e\u0275\u0277\u027b\u0292\u0297",
    "\u029b\u02ae\u02b4\u02b8\u02c3\u02c9\u02cd\u02d9\u02db\u02e1\u02e6\u02ea",
    "\u02f1\u02f4\u0300\u0306\u0308\u030b\u0312\u0316\u031d\u0321\u0325\u032f",
    "\u0334\u0336\u0345\u035c\u0362\u0366\u0374\u037f\u0383\u0386\u038e\u0395",
    "\u039b\u03a0\u03a6\u03aa\u03af\u03b5\u03b9\u03bb\u03c7\u03cb\u03cd\u03d0",
    "\u03da\u03e0\u03e3\u03e8\u03ed\u03f4\u03f9\u03fd\u0403\u0409\u040d\u0413",
    "\u0429\u0430\u0434\u0439\u043f\u0448\u044e\u0452\u0456\u045d\u045f\u0462",
    "\u0465\u046d\u0471\u047a\u047f\u0485\u0487\u048a\u048d\u0492\u0497\u049d",
    "\u04a7\u04ab\u04ae\u04b9\u04bd\u04c2\u04c4\u04c8\u04cd\u04d0\u04d7\u04dd",
    "\u04e0\u04e3\u04e8\u04ec\u04f0\u04f4\u04f8\u04fc\u0500\u0504\u0508\u050c",
    "\u0510\u0513\u051f\u0527\u052c\u052e\u053a\u0542\u0549\u0553\u0558\u055c",
    "\u0560\u0577\u0583\u0586\u058d\u0595\u059b\u05a0\u05b1\u05c9\u05cb\u05d4",
    "\u05da\u05ea\u05f0\u05fb\u0602\u0604\u060f\u0613\u061a\u061d\u0620\u0625",
    "\u062a\u062c"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', "'@autoreleasepool'", "'@catch'", "'@class'", 
                     "'@dynamic'", "'@encode'", "'@end'", "'@finally'", 
                     "'@implementation'", "'@interface'", "'@import'", "'@package'", 
                     "'@protocol'", "'@optional'", "'@private'", "'@property'", 
                     "'@protected'", "'@public'", "'@required'", "'@selector'", 
                     "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", 
                     "'super'", "'self'", "'abstract'", "'auto'", "'boolean'", 
                     "'break'", "'bycopy'", "'byref'", "'case'", "'char'", 
                     "'const'", "'continue'", "'default'", "'do'", "'double'", 
                     "'else'", "'enum'", "'extern'", "'float'", "'for'", 
                     "'id'", "'if'", "'in'", "'inout'", "'instancetype'", 
                     "'goto'", "'int'", "'long'", "'oneway'", "'out'", "'register'", 
                     "'return'", "'short'", "'signed'", "'sizeof'", "'static'", 
                     "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", 
                     "'va_arg'", "'void'", "'volatile'", "'while'", "'NS_OPTIONS'", 
                     "'NS_ENUM'", "'__weak'", "'__unsafe_unretained'", "'__unused'", 
                     "'__deprecated'", "'__autoreleasing'", "'typeof'", 
                     "'__typeof'", "'__typeof__'", "'__kindof'", "'__covariant'", 
                     "'__contravariant'", "'nullable'", "'L'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "';'", "','", "'.'", "'->'", 
                     "'@'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", 
                     "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
                     "'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", 
                     "'%'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", 
                     "'^='", "'%='", "'<<='", "'>>='", "'...'", "'assign'", 
                     "'getter'", "'nonatomic'", "'setter'", "'strong'", 
                     "'retain'", "'readonly'", "'readwrite'", "'weak'", 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', "'\\'" ];

var symbolicNames = [ 'null', "AUTORELEASEPOOL", "CATCH", "CLASS", "DYNAMIC", 
                      "ENCODE", "END", "FINALLY", "IMPLEMENTATION", "INTERFACE", 
                      "IMPORT", "PACKAGE", "PROTOCOL", "OPTIONAL", "PRIVATE", 
                      "PROPERTY", "PROTECTED", "PUBLIC", "REQUIRED", "SELECTOR", 
                      "SYNCHRONIZED", "SYNTHESIZE", "THROW", "TRY", "SUPER", 
                      "SELF", "ABSTRACT", "AUTO", "BOOLEAN", "BREAK", "BYCOPY", 
                      "BYREF", "CASE", "CHAR", "CONST", "CONTINUE", "DEFAULT", 
                      "DO", "DOUBLE", "ELSE", "ENUM", "EXTERN", "FLOAT", 
                      "FOR", "ID", "IF", "IN", "INOUT", "INSTANCETYPE", 
                      "GOTO", "INT", "LONG", "ONEWAY", "OUT", "REGISTER", 
                      "RETURN", "SHORT", "SIGNED", "SIZEOF", "STATIC", "STRUCT", 
                      "SWITCH", "TYPEDEF", "UNION", "UNSIGNED", "VA_ARG", 
                      "VOID", "VOLATILE", "WHILE", "NS_OPTIONS", "NS_ENUM", 
                      "WWEAK", "WUNSAFE_UNRETAINED", "WUNUSED", "WDEPRECATED", 
                      "WAUTORELEASING", "TYPEOF", "TYPEOF__", "TYPEOF____", 
                      "KINDOF__", "COVARIANT", "CONTRAVARIANT", "NULLABLE", 
                      "L_STR", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
                      "RBRACK", "SEMI", "COMMA", "DOT", "STRUCTACCESS", 
                      "AT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                      "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", 
                      "INC", "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", 
                      "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", 
                      "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "ELIPSIS", "ASSIGNPA", "GETTER", "NONATOMIC", "SETTER", 
                      "STRONG", "RETAIN", "READONLY", "READWRITE", "WEAK", 
                      "IDENTIFIER", "CHARACTER_LITERAL", "STRING", "QUOTE_STRING", 
                      "HEX_LITERAL", "DECIMAL_LITERAL", "OCTAL_LITERAL", 
                      "FLOATING_POINT_LITERAL", "WS", "COMMENT", "LINE_COMMENT", 
                      "BACKSLASH" ];

var ruleNames =  [ "translationUnit", "externalDeclaration", "topLevelFunctionDefinition", 
                   "importDeclaration", "classInterface", "categoryInterface", 
                   "classImplementation", "categoryImplementation", "protocolDeclaration", 
                   "protocolDeclarationList", "classDeclarationList", "classList", 
                   "protocolReferenceList", "protocolList", "propertyDeclaration", 
                   "propertyAttributesList", "propertyAttribute", "className", 
                   "superclassName", "categoryName", "protocolName", "instanceVariables", 
                   "visibilitySpecification", "interfaceDeclarationList", 
                   "interfaceDeclarationListItem", "classMethodDeclaration", 
                   "instanceMethodDeclaration", "methodDeclaration", "implementationDefinitionList", 
                   "implementationDefinitionListItem", "classMethodDefinition", 
                   "instanceMethodDefinition", "methodDefinition", "methodSelector", 
                   "keywordDeclarator", "selector", "methodType", "propertyImplementation", 
                   "propertySynthesizeList", "propertySynthesizeItem", "blockType", 
                   "genericsSpecifier", "signedUnsigned", "protocolQualifier", 
                   "primaryExpression", "structExpression", "structPair", 
                   "vaArgExpression", "dictionaryExpression", "dictionaryPair", 
                   "arrayExpression", "boxExpression", "blockParameters", 
                   "blockExpression", "messageExpression", "receiver", "messageSelector", 
                   "keywordArgument", "selectorExpression", "selectorName", 
                   "protocolExpression", "encodeExpression", "typeVariableDeclarator", 
                   "tryStatement", "catchStatement", "finallyStatement", 
                   "throwStatement", "tryBlock", "synchronizedStatement", 
                   "autoreleaseStatement", "functionDefinition", "functionSignature", 
                   "declaration", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "structOrUnionSpecifier", "structDeclaration", 
                   "specifierQualifierList", "arcBehaviourSpecifier", "storageClassSpecifier", 
                   "typeofTypeSpecifier", "typeSpecifier", "typeQualifier", 
                   "classNameGeneric", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "directDeclarator", 
                   "declaratorSuffix", "declarator", "pointer", "macros", 
                   "initializer", "initializer_list", "designation", "designator", 
                   "typeName", "abstractDeclarator", "abstractDeclaratorSuffix", 
                   "parameterDeclarationList", "parameterDeclaration", "statementList", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "selectionStatement", "forInStatement", "forStatement", 
                   "whileStatement", "doStatement", "iterationStatement", 
                   "jumpStatement", "expression", "assignmentExpression", 
                   "conditionalExpression", "binaryExpression", "castExpression", 
                   "assignmentOperator", "constantExpression", "unaryExpression", 
                   "unaryOperator", "postfixExpression", "dataMemberAccess", 
                   "argumentExpressionList", "constant", "stringLiteral", 
                   "identifier" ];

function ObjectiveCParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ObjectiveCParser.prototype = Object.create(antlr4.Parser.prototype);
ObjectiveCParser.prototype.constructor = ObjectiveCParser;

Object.defineProperty(ObjectiveCParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ObjectiveCParser.EOF = antlr4.Token.EOF;
ObjectiveCParser.AUTORELEASEPOOL = 1;
ObjectiveCParser.CATCH = 2;
ObjectiveCParser.CLASS = 3;
ObjectiveCParser.DYNAMIC = 4;
ObjectiveCParser.ENCODE = 5;
ObjectiveCParser.END = 6;
ObjectiveCParser.FINALLY = 7;
ObjectiveCParser.IMPLEMENTATION = 8;
ObjectiveCParser.INTERFACE = 9;
ObjectiveCParser.IMPORT = 10;
ObjectiveCParser.PACKAGE = 11;
ObjectiveCParser.PROTOCOL = 12;
ObjectiveCParser.OPTIONAL = 13;
ObjectiveCParser.PRIVATE = 14;
ObjectiveCParser.PROPERTY = 15;
ObjectiveCParser.PROTECTED = 16;
ObjectiveCParser.PUBLIC = 17;
ObjectiveCParser.REQUIRED = 18;
ObjectiveCParser.SELECTOR = 19;
ObjectiveCParser.SYNCHRONIZED = 20;
ObjectiveCParser.SYNTHESIZE = 21;
ObjectiveCParser.THROW = 22;
ObjectiveCParser.TRY = 23;
ObjectiveCParser.SUPER = 24;
ObjectiveCParser.SELF = 25;
ObjectiveCParser.ABSTRACT = 26;
ObjectiveCParser.AUTO = 27;
ObjectiveCParser.BOOLEAN = 28;
ObjectiveCParser.BREAK = 29;
ObjectiveCParser.BYCOPY = 30;
ObjectiveCParser.BYREF = 31;
ObjectiveCParser.CASE = 32;
ObjectiveCParser.CHAR = 33;
ObjectiveCParser.CONST = 34;
ObjectiveCParser.CONTINUE = 35;
ObjectiveCParser.DEFAULT = 36;
ObjectiveCParser.DO = 37;
ObjectiveCParser.DOUBLE = 38;
ObjectiveCParser.ELSE = 39;
ObjectiveCParser.ENUM = 40;
ObjectiveCParser.EXTERN = 41;
ObjectiveCParser.FLOAT = 42;
ObjectiveCParser.FOR = 43;
ObjectiveCParser.ID = 44;
ObjectiveCParser.IF = 45;
ObjectiveCParser.IN = 46;
ObjectiveCParser.INOUT = 47;
ObjectiveCParser.INSTANCETYPE = 48;
ObjectiveCParser.GOTO = 49;
ObjectiveCParser.INT = 50;
ObjectiveCParser.LONG = 51;
ObjectiveCParser.ONEWAY = 52;
ObjectiveCParser.OUT = 53;
ObjectiveCParser.REGISTER = 54;
ObjectiveCParser.RETURN = 55;
ObjectiveCParser.SHORT = 56;
ObjectiveCParser.SIGNED = 57;
ObjectiveCParser.SIZEOF = 58;
ObjectiveCParser.STATIC = 59;
ObjectiveCParser.STRUCT = 60;
ObjectiveCParser.SWITCH = 61;
ObjectiveCParser.TYPEDEF = 62;
ObjectiveCParser.UNION = 63;
ObjectiveCParser.UNSIGNED = 64;
ObjectiveCParser.VA_ARG = 65;
ObjectiveCParser.VOID = 66;
ObjectiveCParser.VOLATILE = 67;
ObjectiveCParser.WHILE = 68;
ObjectiveCParser.NS_OPTIONS = 69;
ObjectiveCParser.NS_ENUM = 70;
ObjectiveCParser.WWEAK = 71;
ObjectiveCParser.WUNSAFE_UNRETAINED = 72;
ObjectiveCParser.WUNUSED = 73;
ObjectiveCParser.WDEPRECATED = 74;
ObjectiveCParser.WAUTORELEASING = 75;
ObjectiveCParser.TYPEOF = 76;
ObjectiveCParser.TYPEOF__ = 77;
ObjectiveCParser.TYPEOF____ = 78;
ObjectiveCParser.KINDOF__ = 79;
ObjectiveCParser.COVARIANT = 80;
ObjectiveCParser.CONTRAVARIANT = 81;
ObjectiveCParser.NULLABLE = 82;
ObjectiveCParser.L_STR = 83;
ObjectiveCParser.LPAREN = 84;
ObjectiveCParser.RPAREN = 85;
ObjectiveCParser.LBRACE = 86;
ObjectiveCParser.RBRACE = 87;
ObjectiveCParser.LBRACK = 88;
ObjectiveCParser.RBRACK = 89;
ObjectiveCParser.SEMI = 90;
ObjectiveCParser.COMMA = 91;
ObjectiveCParser.DOT = 92;
ObjectiveCParser.STRUCTACCESS = 93;
ObjectiveCParser.AT = 94;
ObjectiveCParser.ASSIGN = 95;
ObjectiveCParser.GT = 96;
ObjectiveCParser.LT = 97;
ObjectiveCParser.BANG = 98;
ObjectiveCParser.TILDE = 99;
ObjectiveCParser.QUESTION = 100;
ObjectiveCParser.COLON = 101;
ObjectiveCParser.EQUAL = 102;
ObjectiveCParser.LE = 103;
ObjectiveCParser.GE = 104;
ObjectiveCParser.NOTEQUAL = 105;
ObjectiveCParser.AND = 106;
ObjectiveCParser.OR = 107;
ObjectiveCParser.INC = 108;
ObjectiveCParser.DEC = 109;
ObjectiveCParser.ADD = 110;
ObjectiveCParser.SUB = 111;
ObjectiveCParser.MUL = 112;
ObjectiveCParser.DIV = 113;
ObjectiveCParser.BITAND = 114;
ObjectiveCParser.BITOR = 115;
ObjectiveCParser.CARET = 116;
ObjectiveCParser.MOD = 117;
ObjectiveCParser.ADD_ASSIGN = 118;
ObjectiveCParser.SUB_ASSIGN = 119;
ObjectiveCParser.MUL_ASSIGN = 120;
ObjectiveCParser.DIV_ASSIGN = 121;
ObjectiveCParser.AND_ASSIGN = 122;
ObjectiveCParser.OR_ASSIGN = 123;
ObjectiveCParser.XOR_ASSIGN = 124;
ObjectiveCParser.MOD_ASSIGN = 125;
ObjectiveCParser.LSHIFT_ASSIGN = 126;
ObjectiveCParser.RSHIFT_ASSIGN = 127;
ObjectiveCParser.ELIPSIS = 128;
ObjectiveCParser.ASSIGNPA = 129;
ObjectiveCParser.GETTER = 130;
ObjectiveCParser.NONATOMIC = 131;
ObjectiveCParser.SETTER = 132;
ObjectiveCParser.STRONG = 133;
ObjectiveCParser.RETAIN = 134;
ObjectiveCParser.READONLY = 135;
ObjectiveCParser.READWRITE = 136;
ObjectiveCParser.WEAK = 137;
ObjectiveCParser.IDENTIFIER = 138;
ObjectiveCParser.CHARACTER_LITERAL = 139;
ObjectiveCParser.STRING = 140;
ObjectiveCParser.QUOTE_STRING = 141;
ObjectiveCParser.HEX_LITERAL = 142;
ObjectiveCParser.DECIMAL_LITERAL = 143;
ObjectiveCParser.OCTAL_LITERAL = 144;
ObjectiveCParser.FLOATING_POINT_LITERAL = 145;
ObjectiveCParser.WS = 146;
ObjectiveCParser.COMMENT = 147;
ObjectiveCParser.LINE_COMMENT = 148;
ObjectiveCParser.BACKSLASH = 149;

ObjectiveCParser.RULE_translationUnit = 0;
ObjectiveCParser.RULE_externalDeclaration = 1;
ObjectiveCParser.RULE_topLevelFunctionDefinition = 2;
ObjectiveCParser.RULE_importDeclaration = 3;
ObjectiveCParser.RULE_classInterface = 4;
ObjectiveCParser.RULE_categoryInterface = 5;
ObjectiveCParser.RULE_classImplementation = 6;
ObjectiveCParser.RULE_categoryImplementation = 7;
ObjectiveCParser.RULE_protocolDeclaration = 8;
ObjectiveCParser.RULE_protocolDeclarationList = 9;
ObjectiveCParser.RULE_classDeclarationList = 10;
ObjectiveCParser.RULE_classList = 11;
ObjectiveCParser.RULE_protocolReferenceList = 12;
ObjectiveCParser.RULE_protocolList = 13;
ObjectiveCParser.RULE_propertyDeclaration = 14;
ObjectiveCParser.RULE_propertyAttributesList = 15;
ObjectiveCParser.RULE_propertyAttribute = 16;
ObjectiveCParser.RULE_className = 17;
ObjectiveCParser.RULE_superclassName = 18;
ObjectiveCParser.RULE_categoryName = 19;
ObjectiveCParser.RULE_protocolName = 20;
ObjectiveCParser.RULE_instanceVariables = 21;
ObjectiveCParser.RULE_visibilitySpecification = 22;
ObjectiveCParser.RULE_interfaceDeclarationList = 23;
ObjectiveCParser.RULE_interfaceDeclarationListItem = 24;
ObjectiveCParser.RULE_classMethodDeclaration = 25;
ObjectiveCParser.RULE_instanceMethodDeclaration = 26;
ObjectiveCParser.RULE_methodDeclaration = 27;
ObjectiveCParser.RULE_implementationDefinitionList = 28;
ObjectiveCParser.RULE_implementationDefinitionListItem = 29;
ObjectiveCParser.RULE_classMethodDefinition = 30;
ObjectiveCParser.RULE_instanceMethodDefinition = 31;
ObjectiveCParser.RULE_methodDefinition = 32;
ObjectiveCParser.RULE_methodSelector = 33;
ObjectiveCParser.RULE_keywordDeclarator = 34;
ObjectiveCParser.RULE_selector = 35;
ObjectiveCParser.RULE_methodType = 36;
ObjectiveCParser.RULE_propertyImplementation = 37;
ObjectiveCParser.RULE_propertySynthesizeList = 38;
ObjectiveCParser.RULE_propertySynthesizeItem = 39;
ObjectiveCParser.RULE_blockType = 40;
ObjectiveCParser.RULE_genericsSpecifier = 41;
ObjectiveCParser.RULE_signedUnsigned = 42;
ObjectiveCParser.RULE_protocolQualifier = 43;
ObjectiveCParser.RULE_primaryExpression = 44;
ObjectiveCParser.RULE_structExpression = 45;
ObjectiveCParser.RULE_structPair = 46;
ObjectiveCParser.RULE_vaArgExpression = 47;
ObjectiveCParser.RULE_dictionaryExpression = 48;
ObjectiveCParser.RULE_dictionaryPair = 49;
ObjectiveCParser.RULE_arrayExpression = 50;
ObjectiveCParser.RULE_boxExpression = 51;
ObjectiveCParser.RULE_blockParameters = 52;
ObjectiveCParser.RULE_blockExpression = 53;
ObjectiveCParser.RULE_messageExpression = 54;
ObjectiveCParser.RULE_receiver = 55;
ObjectiveCParser.RULE_messageSelector = 56;
ObjectiveCParser.RULE_keywordArgument = 57;
ObjectiveCParser.RULE_selectorExpression = 58;
ObjectiveCParser.RULE_selectorName = 59;
ObjectiveCParser.RULE_protocolExpression = 60;
ObjectiveCParser.RULE_encodeExpression = 61;
ObjectiveCParser.RULE_typeVariableDeclarator = 62;
ObjectiveCParser.RULE_tryStatement = 63;
ObjectiveCParser.RULE_catchStatement = 64;
ObjectiveCParser.RULE_finallyStatement = 65;
ObjectiveCParser.RULE_throwStatement = 66;
ObjectiveCParser.RULE_tryBlock = 67;
ObjectiveCParser.RULE_synchronizedStatement = 68;
ObjectiveCParser.RULE_autoreleaseStatement = 69;
ObjectiveCParser.RULE_functionDefinition = 70;
ObjectiveCParser.RULE_functionSignature = 71;
ObjectiveCParser.RULE_declaration = 72;
ObjectiveCParser.RULE_declarationSpecifier = 73;
ObjectiveCParser.RULE_initDeclaratorList = 74;
ObjectiveCParser.RULE_initDeclarator = 75;
ObjectiveCParser.RULE_structOrUnionSpecifier = 76;
ObjectiveCParser.RULE_structDeclaration = 77;
ObjectiveCParser.RULE_specifierQualifierList = 78;
ObjectiveCParser.RULE_arcBehaviourSpecifier = 79;
ObjectiveCParser.RULE_storageClassSpecifier = 80;
ObjectiveCParser.RULE_typeofTypeSpecifier = 81;
ObjectiveCParser.RULE_typeSpecifier = 82;
ObjectiveCParser.RULE_typeQualifier = 83;
ObjectiveCParser.RULE_classNameGeneric = 84;
ObjectiveCParser.RULE_structDeclaratorList = 85;
ObjectiveCParser.RULE_structDeclarator = 86;
ObjectiveCParser.RULE_enumSpecifier = 87;
ObjectiveCParser.RULE_enumeratorList = 88;
ObjectiveCParser.RULE_enumerator = 89;
ObjectiveCParser.RULE_directDeclarator = 90;
ObjectiveCParser.RULE_declaratorSuffix = 91;
ObjectiveCParser.RULE_declarator = 92;
ObjectiveCParser.RULE_pointer = 93;
ObjectiveCParser.RULE_macros = 94;
ObjectiveCParser.RULE_initializer = 95;
ObjectiveCParser.RULE_initializer_list = 96;
ObjectiveCParser.RULE_designation = 97;
ObjectiveCParser.RULE_designator = 98;
ObjectiveCParser.RULE_typeName = 99;
ObjectiveCParser.RULE_abstractDeclarator = 100;
ObjectiveCParser.RULE_abstractDeclaratorSuffix = 101;
ObjectiveCParser.RULE_parameterDeclarationList = 102;
ObjectiveCParser.RULE_parameterDeclaration = 103;
ObjectiveCParser.RULE_statementList = 104;
ObjectiveCParser.RULE_statement = 105;
ObjectiveCParser.RULE_labeledStatement = 106;
ObjectiveCParser.RULE_compoundStatement = 107;
ObjectiveCParser.RULE_selectionStatement = 108;
ObjectiveCParser.RULE_forInStatement = 109;
ObjectiveCParser.RULE_forStatement = 110;
ObjectiveCParser.RULE_whileStatement = 111;
ObjectiveCParser.RULE_doStatement = 112;
ObjectiveCParser.RULE_iterationStatement = 113;
ObjectiveCParser.RULE_jumpStatement = 114;
ObjectiveCParser.RULE_expression = 115;
ObjectiveCParser.RULE_assignmentExpression = 116;
ObjectiveCParser.RULE_conditionalExpression = 117;
ObjectiveCParser.RULE_binaryExpression = 118;
ObjectiveCParser.RULE_castExpression = 119;
ObjectiveCParser.RULE_assignmentOperator = 120;
ObjectiveCParser.RULE_constantExpression = 121;
ObjectiveCParser.RULE_unaryExpression = 122;
ObjectiveCParser.RULE_unaryOperator = 123;
ObjectiveCParser.RULE_postfixExpression = 124;
ObjectiveCParser.RULE_dataMemberAccess = 125;
ObjectiveCParser.RULE_argumentExpressionList = 126;
ObjectiveCParser.RULE_constant = 127;
ObjectiveCParser.RULE_stringLiteral = 128;
ObjectiveCParser.RULE_identifier = 129;

function TranslationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_translationUnit;
    return this;
}

TranslationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationUnitContext.prototype.constructor = TranslationUnitContext;

TranslationUnitContext.prototype.EOF = function() {
    return this.getToken(ObjectiveCParser.EOF, 0);
};

TranslationUnitContext.prototype.externalDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExternalDeclarationContext);
    } else {
        return this.getTypedRuleContext(ExternalDeclarationContext,i);
    }
};

TranslationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTranslationUnit(this);
	}
};

TranslationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTranslationUnit(this);
	}
};




ObjectiveCParser.TranslationUnitContext = TranslationUnitContext;

ObjectiveCParser.prototype.translationUnit = function() {

    var localctx = new TranslationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ObjectiveCParser.RULE_translationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.CLASS) | (1 << ObjectiveCParser.DYNAMIC) | (1 << ObjectiveCParser.IMPLEMENTATION) | (1 << ObjectiveCParser.INTERFACE) | (1 << ObjectiveCParser.IMPORT) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SYNTHESIZE) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 260;
            this.externalDeclaration();
            this.state = 265;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 266;
        this.match(ObjectiveCParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExternalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_externalDeclaration;
    return this;
}

ExternalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalDeclarationContext.prototype.constructor = ExternalDeclarationContext;

ExternalDeclarationContext.prototype.importDeclaration = function() {
    return this.getTypedRuleContext(ImportDeclarationContext,0);
};

ExternalDeclarationContext.prototype.topLevelFunctionDefinition = function() {
    return this.getTypedRuleContext(TopLevelFunctionDefinitionContext,0);
};

ExternalDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExternalDeclarationContext.prototype.classInterface = function() {
    return this.getTypedRuleContext(ClassInterfaceContext,0);
};

ExternalDeclarationContext.prototype.classImplementation = function() {
    return this.getTypedRuleContext(ClassImplementationContext,0);
};

ExternalDeclarationContext.prototype.categoryInterface = function() {
    return this.getTypedRuleContext(CategoryInterfaceContext,0);
};

ExternalDeclarationContext.prototype.categoryImplementation = function() {
    return this.getTypedRuleContext(CategoryImplementationContext,0);
};

ExternalDeclarationContext.prototype.protocolDeclaration = function() {
    return this.getTypedRuleContext(ProtocolDeclarationContext,0);
};

ExternalDeclarationContext.prototype.protocolDeclarationList = function() {
    return this.getTypedRuleContext(ProtocolDeclarationListContext,0);
};

ExternalDeclarationContext.prototype.classDeclarationList = function() {
    return this.getTypedRuleContext(ClassDeclarationListContext,0);
};

ExternalDeclarationContext.prototype.macros = function() {
    return this.getTypedRuleContext(MacrosContext,0);
};

ExternalDeclarationContext.prototype.implementationDefinitionList = function() {
    return this.getTypedRuleContext(ImplementationDefinitionListContext,0);
};

ExternalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterExternalDeclaration(this);
	}
};

ExternalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitExternalDeclaration(this);
	}
};




ObjectiveCParser.ExternalDeclarationContext = ExternalDeclarationContext;

ObjectiveCParser.prototype.externalDeclaration = function() {

    var localctx = new ExternalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ObjectiveCParser.RULE_externalDeclaration);
    try {
        this.state = 280;
        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 268;
            this.importDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 269;
            this.topLevelFunctionDefinition();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 270;
            this.declaration();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 271;
            this.classInterface();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 272;
            this.classImplementation();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 273;
            this.categoryInterface();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 274;
            this.categoryImplementation();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 275;
            this.protocolDeclaration();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 276;
            this.protocolDeclarationList();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 277;
            this.classDeclarationList();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 278;
            this.macros();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 279;
            this.implementationDefinitionList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TopLevelFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_topLevelFunctionDefinition;
    return this;
}

TopLevelFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelFunctionDefinitionContext.prototype.constructor = TopLevelFunctionDefinitionContext;

TopLevelFunctionDefinitionContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

TopLevelFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTopLevelFunctionDefinition(this);
	}
};

TopLevelFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTopLevelFunctionDefinition(this);
	}
};




ObjectiveCParser.TopLevelFunctionDefinitionContext = TopLevelFunctionDefinitionContext;

ObjectiveCParser.prototype.topLevelFunctionDefinition = function() {

    var localctx = new TopLevelFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ObjectiveCParser.RULE_topLevelFunctionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 282;
        this.functionDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitImportDeclaration(this);
	}
};




ObjectiveCParser.ImportDeclarationContext = ImportDeclarationContext;

ObjectiveCParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ObjectiveCParser.RULE_importDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(ObjectiveCParser.IMPORT);
        this.state = 285;
        this.identifier();
        this.state = 286;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassInterfaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classInterface;
    return this;
}

ClassInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassInterfaceContext.prototype.constructor = ClassInterfaceContext;

ClassInterfaceContext.prototype.classNameGeneric = function() {
    return this.getTypedRuleContext(ClassNameGenericContext,0);
};

ClassInterfaceContext.prototype.superclassName = function() {
    return this.getTypedRuleContext(SuperclassNameContext,0);
};

ClassInterfaceContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

ClassInterfaceContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

ClassInterfaceContext.prototype.interfaceDeclarationList = function() {
    return this.getTypedRuleContext(InterfaceDeclarationListContext,0);
};

ClassInterfaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassInterface(this);
	}
};

ClassInterfaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassInterface(this);
	}
};




ObjectiveCParser.ClassInterfaceContext = ClassInterfaceContext;

ObjectiveCParser.prototype.classInterface = function() {

    var localctx = new ClassInterfaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ObjectiveCParser.RULE_classInterface);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 288;
        this.match(ObjectiveCParser.INTERFACE);
        this.state = 289;
        this.classNameGeneric();
        this.state = 292;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COLON) {
            this.state = 290;
            this.match(ObjectiveCParser.COLON);
            this.state = 291;
            this.superclassName();
        }

        this.state = 295;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 294;
            this.protocolReferenceList();
        }

        this.state = 298;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 297;
            this.instanceVariables();
        }

        this.state = 301;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.PROPERTY) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 300;
            this.interfaceDeclarationList();
        }

        this.state = 303;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CategoryInterfaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_categoryInterface;
    return this;
}

CategoryInterfaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryInterfaceContext.prototype.constructor = CategoryInterfaceContext;

CategoryInterfaceContext.prototype.classNameGeneric = function() {
    return this.getTypedRuleContext(ClassNameGenericContext,0);
};

CategoryInterfaceContext.prototype.categoryName = function() {
    return this.getTypedRuleContext(CategoryNameContext,0);
};

CategoryInterfaceContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

CategoryInterfaceContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

CategoryInterfaceContext.prototype.interfaceDeclarationList = function() {
    return this.getTypedRuleContext(InterfaceDeclarationListContext,0);
};

CategoryInterfaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCategoryInterface(this);
	}
};

CategoryInterfaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCategoryInterface(this);
	}
};




ObjectiveCParser.CategoryInterfaceContext = CategoryInterfaceContext;

ObjectiveCParser.prototype.categoryInterface = function() {

    var localctx = new CategoryInterfaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ObjectiveCParser.RULE_categoryInterface);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 305;
        this.match(ObjectiveCParser.INTERFACE);
        this.state = 306;
        this.classNameGeneric();
        this.state = 307;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 309;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 308;
            this.categoryName();
        }

        this.state = 311;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 313;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 312;
            this.protocolReferenceList();
        }

        this.state = 316;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 315;
            this.instanceVariables();
        }

        this.state = 319;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.PROPERTY) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 318;
            this.interfaceDeclarationList();
        }

        this.state = 321;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classImplementation;
    return this;
}

ClassImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassImplementationContext.prototype.constructor = ClassImplementationContext;

ClassImplementationContext.prototype.classNameGeneric = function() {
    return this.getTypedRuleContext(ClassNameGenericContext,0);
};

ClassImplementationContext.prototype.superclassName = function() {
    return this.getTypedRuleContext(SuperclassNameContext,0);
};

ClassImplementationContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

ClassImplementationContext.prototype.implementationDefinitionList = function() {
    return this.getTypedRuleContext(ImplementationDefinitionListContext,0);
};

ClassImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassImplementation(this);
	}
};

ClassImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassImplementation(this);
	}
};




ObjectiveCParser.ClassImplementationContext = ClassImplementationContext;

ObjectiveCParser.prototype.classImplementation = function() {

    var localctx = new ClassImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ObjectiveCParser.RULE_classImplementation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 323;
        this.match(ObjectiveCParser.IMPLEMENTATION);
        this.state = 324;
        this.classNameGeneric();
        this.state = 327;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COLON) {
            this.state = 325;
            this.match(ObjectiveCParser.COLON);
            this.state = 326;
            this.superclassName();
        }

        this.state = 330;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 329;
            this.instanceVariables();
        }

        this.state = 333;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.DYNAMIC) | (1 << ObjectiveCParser.SYNTHESIZE) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 332;
            this.implementationDefinitionList();
        }

        this.state = 335;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CategoryImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_categoryImplementation;
    return this;
}

CategoryImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryImplementationContext.prototype.constructor = CategoryImplementationContext;

CategoryImplementationContext.prototype.classNameGeneric = function() {
    return this.getTypedRuleContext(ClassNameGenericContext,0);
};

CategoryImplementationContext.prototype.categoryName = function() {
    return this.getTypedRuleContext(CategoryNameContext,0);
};

CategoryImplementationContext.prototype.implementationDefinitionList = function() {
    return this.getTypedRuleContext(ImplementationDefinitionListContext,0);
};

CategoryImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCategoryImplementation(this);
	}
};

CategoryImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCategoryImplementation(this);
	}
};




ObjectiveCParser.CategoryImplementationContext = CategoryImplementationContext;

ObjectiveCParser.prototype.categoryImplementation = function() {

    var localctx = new CategoryImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ObjectiveCParser.RULE_categoryImplementation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(ObjectiveCParser.IMPLEMENTATION);
        this.state = 338;
        this.classNameGeneric();
        this.state = 339;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 340;
        this.categoryName();
        this.state = 341;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 343;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.DYNAMIC) | (1 << ObjectiveCParser.SYNTHESIZE) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 342;
            this.implementationDefinitionList();
        }

        this.state = 345;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolDeclaration;
    return this;
}

ProtocolDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolDeclarationContext.prototype.constructor = ProtocolDeclarationContext;

ProtocolDeclarationContext.prototype.protocolName = function() {
    return this.getTypedRuleContext(ProtocolNameContext,0);
};

ProtocolDeclarationContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

ProtocolDeclarationContext.prototype.interfaceDeclarationList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceDeclarationListContext);
    } else {
        return this.getTypedRuleContext(InterfaceDeclarationListContext,i);
    }
};

ProtocolDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolDeclaration(this);
	}
};

ProtocolDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolDeclaration(this);
	}
};




ObjectiveCParser.ProtocolDeclarationContext = ProtocolDeclarationContext;

ObjectiveCParser.prototype.protocolDeclaration = function() {

    var localctx = new ProtocolDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ObjectiveCParser.RULE_protocolDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 348;
        this.protocolName();
        this.state = 350;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LT) {
            this.state = 349;
            this.protocolReferenceList();
        }

        this.state = 353;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.REQUIRED) {
            this.state = 352;
            this.match(ObjectiveCParser.REQUIRED);
        }

        this.state = 356;
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        if(la_===1) {
            this.state = 355;
            this.interfaceDeclarationList();

        }
        this.state = 359;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.OPTIONAL) {
            this.state = 358;
            this.match(ObjectiveCParser.OPTIONAL);
        }

        this.state = 362;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.PROPERTY) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (ObjectiveCParser.CHAR - 33)) | (1 << (ObjectiveCParser.CONST - 33)) | (1 << (ObjectiveCParser.DOUBLE - 33)) | (1 << (ObjectiveCParser.ENUM - 33)) | (1 << (ObjectiveCParser.EXTERN - 33)) | (1 << (ObjectiveCParser.FLOAT - 33)) | (1 << (ObjectiveCParser.ID - 33)) | (1 << (ObjectiveCParser.IN - 33)) | (1 << (ObjectiveCParser.INOUT - 33)) | (1 << (ObjectiveCParser.INSTANCETYPE - 33)) | (1 << (ObjectiveCParser.INT - 33)) | (1 << (ObjectiveCParser.LONG - 33)) | (1 << (ObjectiveCParser.ONEWAY - 33)) | (1 << (ObjectiveCParser.OUT - 33)) | (1 << (ObjectiveCParser.REGISTER - 33)) | (1 << (ObjectiveCParser.SHORT - 33)) | (1 << (ObjectiveCParser.SIGNED - 33)) | (1 << (ObjectiveCParser.STATIC - 33)) | (1 << (ObjectiveCParser.STRUCT - 33)) | (1 << (ObjectiveCParser.TYPEDEF - 33)) | (1 << (ObjectiveCParser.UNION - 33)) | (1 << (ObjectiveCParser.UNSIGNED - 33)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ObjectiveCParser.VOID - 66)) | (1 << (ObjectiveCParser.VOLATILE - 66)) | (1 << (ObjectiveCParser.NS_OPTIONS - 66)) | (1 << (ObjectiveCParser.NS_ENUM - 66)) | (1 << (ObjectiveCParser.WWEAK - 66)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 66)) | (1 << (ObjectiveCParser.WUNUSED - 66)) | (1 << (ObjectiveCParser.WDEPRECATED - 66)) | (1 << (ObjectiveCParser.WAUTORELEASING - 66)) | (1 << (ObjectiveCParser.TYPEOF - 66)) | (1 << (ObjectiveCParser.TYPEOF__ - 66)) | (1 << (ObjectiveCParser.TYPEOF____ - 66)) | (1 << (ObjectiveCParser.KINDOF__ - 66)) | (1 << (ObjectiveCParser.COVARIANT - 66)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 66)) | (1 << (ObjectiveCParser.NULLABLE - 66)) | (1 << (ObjectiveCParser.L_STR - 66)) | (1 << (ObjectiveCParser.LPAREN - 66)) | (1 << (ObjectiveCParser.SEMI - 66)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.MUL - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)))) !== 0)) {
            this.state = 361;
            this.interfaceDeclarationList();
        }

        this.state = 364;
        this.match(ObjectiveCParser.END);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolDeclarationList;
    return this;
}

ProtocolDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolDeclarationListContext.prototype.constructor = ProtocolDeclarationListContext;

ProtocolDeclarationListContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ProtocolDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolDeclarationList(this);
	}
};

ProtocolDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolDeclarationList(this);
	}
};




ObjectiveCParser.ProtocolDeclarationListContext = ProtocolDeclarationListContext;

ObjectiveCParser.prototype.protocolDeclarationList = function() {

    var localctx = new ProtocolDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ObjectiveCParser.RULE_protocolDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 367;
        this.protocolList();
        this.state = 368;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classDeclarationList;
    return this;
}

ClassDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassDeclarationListContext.prototype.constructor = ClassDeclarationListContext;

ClassDeclarationListContext.prototype.classList = function() {
    return this.getTypedRuleContext(ClassListContext,0);
};

ClassDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassDeclarationList(this);
	}
};

ClassDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassDeclarationList(this);
	}
};




ObjectiveCParser.ClassDeclarationListContext = ClassDeclarationListContext;

ObjectiveCParser.prototype.classDeclarationList = function() {

    var localctx = new ClassDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ObjectiveCParser.RULE_classDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(ObjectiveCParser.CLASS);
        this.state = 371;
        this.classList();
        this.state = 372;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classList;
    return this;
}

ClassListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassListContext.prototype.constructor = ClassListContext;

ClassListContext.prototype.className = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ClassNameContext);
    } else {
        return this.getTypedRuleContext(ClassNameContext,i);
    }
};

ClassListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassList(this);
	}
};

ClassListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassList(this);
	}
};




ObjectiveCParser.ClassListContext = ClassListContext;

ObjectiveCParser.prototype.classList = function() {

    var localctx = new ClassListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ObjectiveCParser.RULE_classList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 374;
        this.className();
        this.state = 379;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 375;
            this.match(ObjectiveCParser.COMMA);
            this.state = 376;
            this.className();
            this.state = 381;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolReferenceListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolReferenceList;
    return this;
}

ProtocolReferenceListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolReferenceListContext.prototype.constructor = ProtocolReferenceListContext;

ProtocolReferenceListContext.prototype.protocolList = function() {
    return this.getTypedRuleContext(ProtocolListContext,0);
};

ProtocolReferenceListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolReferenceList(this);
	}
};

ProtocolReferenceListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolReferenceList(this);
	}
};




ObjectiveCParser.ProtocolReferenceListContext = ProtocolReferenceListContext;

ObjectiveCParser.prototype.protocolReferenceList = function() {

    var localctx = new ProtocolReferenceListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ObjectiveCParser.RULE_protocolReferenceList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 382;
        this.match(ObjectiveCParser.LT);
        this.state = 383;
        this.protocolList();
        this.state = 384;
        this.match(ObjectiveCParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolList;
    return this;
}

ProtocolListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolListContext.prototype.constructor = ProtocolListContext;

ProtocolListContext.prototype.protocolName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ProtocolNameContext);
    } else {
        return this.getTypedRuleContext(ProtocolNameContext,i);
    }
};

ProtocolListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolList(this);
	}
};

ProtocolListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolList(this);
	}
};




ObjectiveCParser.ProtocolListContext = ProtocolListContext;

ObjectiveCParser.prototype.protocolList = function() {

    var localctx = new ProtocolListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ObjectiveCParser.RULE_protocolList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 386;
        this.protocolName();
        this.state = 391;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 387;
            this.match(ObjectiveCParser.COMMA);
            this.state = 388;
            this.protocolName();
            this.state = 393;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyDeclaration;
    return this;
}

PropertyDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeclarationContext.prototype.constructor = PropertyDeclarationContext;

PropertyDeclarationContext.prototype.structDeclaration = function() {
    return this.getTypedRuleContext(StructDeclarationContext,0);
};

PropertyDeclarationContext.prototype.propertyAttributesList = function() {
    return this.getTypedRuleContext(PropertyAttributesListContext,0);
};

PropertyDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyDeclaration(this);
	}
};

PropertyDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyDeclaration(this);
	}
};




ObjectiveCParser.PropertyDeclarationContext = PropertyDeclarationContext;

ObjectiveCParser.prototype.propertyDeclaration = function() {

    var localctx = new PropertyDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ObjectiveCParser.RULE_propertyDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 394;
        this.match(ObjectiveCParser.PROPERTY);
        this.state = 399;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LPAREN) {
            this.state = 395;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 396;
            this.propertyAttributesList();
            this.state = 397;
            this.match(ObjectiveCParser.RPAREN);
        }

        this.state = 401;
        this.structDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyAttributesListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyAttributesList;
    return this;
}

PropertyAttributesListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAttributesListContext.prototype.constructor = PropertyAttributesListContext;

PropertyAttributesListContext.prototype.propertyAttribute = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyAttributeContext);
    } else {
        return this.getTypedRuleContext(PropertyAttributeContext,i);
    }
};

PropertyAttributesListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyAttributesList(this);
	}
};

PropertyAttributesListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyAttributesList(this);
	}
};




ObjectiveCParser.PropertyAttributesListContext = PropertyAttributesListContext;

ObjectiveCParser.prototype.propertyAttributesList = function() {

    var localctx = new PropertyAttributesListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ObjectiveCParser.RULE_propertyAttributesList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        this.propertyAttribute();
        this.state = 408;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 404;
            this.match(ObjectiveCParser.COMMA);
            this.state = 405;
            this.propertyAttribute();
            this.state = 410;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyAttributeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyAttribute;
    return this;
}

PropertyAttributeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAttributeContext.prototype.constructor = PropertyAttributeContext;

PropertyAttributeContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PropertyAttributeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyAttribute(this);
	}
};

PropertyAttributeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyAttribute(this);
	}
};




ObjectiveCParser.PropertyAttributeContext = PropertyAttributeContext;

ObjectiveCParser.prototype.propertyAttribute = function() {

    var localctx = new PropertyAttributeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ObjectiveCParser.RULE_propertyAttribute);
    try {
        this.state = 427;
        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 411;
            this.match(ObjectiveCParser.NONATOMIC);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 412;
            this.match(ObjectiveCParser.ASSIGNPA);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 413;
            this.match(ObjectiveCParser.WEAK);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 414;
            this.match(ObjectiveCParser.STRONG);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 415;
            this.match(ObjectiveCParser.RETAIN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 416;
            this.match(ObjectiveCParser.READONLY);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 417;
            this.match(ObjectiveCParser.READWRITE);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 418;
            this.match(ObjectiveCParser.GETTER);
            this.state = 419;
            this.match(ObjectiveCParser.ASSIGN);
            this.state = 420;
            this.identifier();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 421;
            this.match(ObjectiveCParser.SETTER);
            this.state = 422;
            this.match(ObjectiveCParser.ASSIGN);
            this.state = 423;
            this.identifier();
            this.state = 424;
            this.match(ObjectiveCParser.COLON);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 426;
            this.identifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_className;
    return this;
}

ClassNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameContext.prototype.constructor = ClassNameContext;

ClassNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClassNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassName(this);
	}
};

ClassNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassName(this);
	}
};




ObjectiveCParser.ClassNameContext = ClassNameContext;

ObjectiveCParser.prototype.className = function() {

    var localctx = new ClassNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ObjectiveCParser.RULE_className);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SuperclassNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_superclassName;
    return this;
}

SuperclassNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuperclassNameContext.prototype.constructor = SuperclassNameContext;

SuperclassNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SuperclassNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSuperclassName(this);
	}
};

SuperclassNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSuperclassName(this);
	}
};




ObjectiveCParser.SuperclassNameContext = SuperclassNameContext;

ObjectiveCParser.prototype.superclassName = function() {

    var localctx = new SuperclassNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ObjectiveCParser.RULE_superclassName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CategoryNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_categoryName;
    return this;
}

CategoryNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CategoryNameContext.prototype.constructor = CategoryNameContext;

CategoryNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CategoryNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCategoryName(this);
	}
};

CategoryNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCategoryName(this);
	}
};




ObjectiveCParser.CategoryNameContext = CategoryNameContext;

ObjectiveCParser.prototype.categoryName = function() {

    var localctx = new CategoryNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ObjectiveCParser.RULE_categoryName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolName;
    return this;
}

ProtocolNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolNameContext.prototype.constructor = ProtocolNameContext;

ProtocolNameContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

ProtocolNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ProtocolNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolName(this);
	}
};

ProtocolNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolName(this);
	}
};




ObjectiveCParser.ProtocolNameContext = ProtocolNameContext;

ObjectiveCParser.prototype.protocolName = function() {

    var localctx = new ProtocolNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ObjectiveCParser.RULE_protocolName);
    var _la = 0; // Token type
    try {
        this.state = 440;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LT:
            this.enterOuterAlt(localctx, 1);
            this.state = 435;
            this.protocolReferenceList();
            break;
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.WWEAK:
        case ObjectiveCParser.WUNUSED:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.TYPEOF__:
        case ObjectiveCParser.TYPEOF____:
        case ObjectiveCParser.KINDOF__:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.ASSIGNPA:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 2);
            this.state = 437;
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 436;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.COVARIANT || _la===ObjectiveCParser.CONTRAVARIANT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }

            }
            this.state = 439;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceVariables;
    return this;
}

InstanceVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceVariablesContext.prototype.constructor = InstanceVariablesContext;

InstanceVariablesContext.prototype.structDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructDeclarationContext);
    } else {
        return this.getTypedRuleContext(StructDeclarationContext,i);
    }
};

InstanceVariablesContext.prototype.visibilitySpecification = function() {
    return this.getTypedRuleContext(VisibilitySpecificationContext,0);
};

InstanceVariablesContext.prototype.instanceVariables = function() {
    return this.getTypedRuleContext(InstanceVariablesContext,0);
};

InstanceVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceVariables(this);
	}
};

InstanceVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceVariables(this);
	}
};




ObjectiveCParser.InstanceVariablesContext = InstanceVariablesContext;

ObjectiveCParser.prototype.instanceVariables = function() {

    var localctx = new InstanceVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ObjectiveCParser.RULE_instanceVariables);
    var _la = 0; // Token type
    try {
        this.state = 478;
        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 442;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 446;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                this.state = 443;
                this.structDeclaration();
                this.state = 448;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 449;
            this.match(ObjectiveCParser.RBRACE);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 450;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 451;
            this.visibilitySpecification();
            this.state = 453; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 452;
                this.structDeclaration();
                this.state = 455; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            this.state = 457;
            this.match(ObjectiveCParser.RBRACE);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 459;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 461; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 460;
                this.structDeclaration();
                this.state = 463; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            this.state = 465;
            this.instanceVariables();
            this.state = 466;
            this.match(ObjectiveCParser.RBRACE);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 468;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 469;
            this.visibilitySpecification();
            this.state = 471; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 470;
                this.structDeclaration();
                this.state = 473; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            this.state = 475;
            this.instanceVariables();
            this.state = 476;
            this.match(ObjectiveCParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VisibilitySpecificationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_visibilitySpecification;
    return this;
}

VisibilitySpecificationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VisibilitySpecificationContext.prototype.constructor = VisibilitySpecificationContext;


VisibilitySpecificationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterVisibilitySpecification(this);
	}
};

VisibilitySpecificationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitVisibilitySpecification(this);
	}
};




ObjectiveCParser.VisibilitySpecificationContext = VisibilitySpecificationContext;

ObjectiveCParser.prototype.visibilitySpecification = function() {

    var localctx = new VisibilitySpecificationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ObjectiveCParser.RULE_visibilitySpecification);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 480;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.PACKAGE) | (1 << ObjectiveCParser.PRIVATE) | (1 << ObjectiveCParser.PROTECTED) | (1 << ObjectiveCParser.PUBLIC))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_interfaceDeclarationList;
    return this;
}

InterfaceDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationListContext.prototype.constructor = InterfaceDeclarationListContext;

InterfaceDeclarationListContext.prototype.interfaceDeclarationListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterfaceDeclarationListItemContext);
    } else {
        return this.getTypedRuleContext(InterfaceDeclarationListItemContext,i);
    }
};

InterfaceDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInterfaceDeclarationList(this);
	}
};

InterfaceDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInterfaceDeclarationList(this);
	}
};




ObjectiveCParser.InterfaceDeclarationListContext = InterfaceDeclarationListContext;

ObjectiveCParser.prototype.interfaceDeclarationList = function() {

    var localctx = new InterfaceDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ObjectiveCParser.RULE_interfaceDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 482;
        		this.interfaceDeclarationListItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 485; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,31, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterfaceDeclarationListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_interfaceDeclarationListItem;
    return this;
}

InterfaceDeclarationListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterfaceDeclarationListItemContext.prototype.constructor = InterfaceDeclarationListItemContext;

InterfaceDeclarationListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

InterfaceDeclarationListItemContext.prototype.classMethodDeclaration = function() {
    return this.getTypedRuleContext(ClassMethodDeclarationContext,0);
};

InterfaceDeclarationListItemContext.prototype.instanceMethodDeclaration = function() {
    return this.getTypedRuleContext(InstanceMethodDeclarationContext,0);
};

InterfaceDeclarationListItemContext.prototype.propertyDeclaration = function() {
    return this.getTypedRuleContext(PropertyDeclarationContext,0);
};

InterfaceDeclarationListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInterfaceDeclarationListItem(this);
	}
};

InterfaceDeclarationListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInterfaceDeclarationListItem(this);
	}
};




ObjectiveCParser.InterfaceDeclarationListItemContext = InterfaceDeclarationListItemContext;

ObjectiveCParser.prototype.interfaceDeclarationListItem = function() {

    var localctx = new InterfaceDeclarationListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ObjectiveCParser.RULE_interfaceDeclarationListItem);
    try {
        this.state = 491;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.AUTO:
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.CHAR:
        case ObjectiveCParser.CONST:
        case ObjectiveCParser.DOUBLE:
        case ObjectiveCParser.ENUM:
        case ObjectiveCParser.EXTERN:
        case ObjectiveCParser.FLOAT:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.INSTANCETYPE:
        case ObjectiveCParser.INT:
        case ObjectiveCParser.LONG:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
        case ObjectiveCParser.REGISTER:
        case ObjectiveCParser.SHORT:
        case ObjectiveCParser.SIGNED:
        case ObjectiveCParser.STATIC:
        case ObjectiveCParser.STRUCT:
        case ObjectiveCParser.TYPEDEF:
        case ObjectiveCParser.UNION:
        case ObjectiveCParser.UNSIGNED:
        case ObjectiveCParser.VOID:
        case ObjectiveCParser.VOLATILE:
        case ObjectiveCParser.NS_OPTIONS:
        case ObjectiveCParser.NS_ENUM:
        case ObjectiveCParser.WWEAK:
        case ObjectiveCParser.WUNSAFE_UNRETAINED:
        case ObjectiveCParser.WUNUSED:
        case ObjectiveCParser.WDEPRECATED:
        case ObjectiveCParser.WAUTORELEASING:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.TYPEOF__:
        case ObjectiveCParser.TYPEOF____:
        case ObjectiveCParser.KINDOF__:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.LPAREN:
        case ObjectiveCParser.SEMI:
        case ObjectiveCParser.MUL:
        case ObjectiveCParser.ASSIGNPA:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 487;
            this.declaration();
            break;
        case ObjectiveCParser.ADD:
            this.enterOuterAlt(localctx, 2);
            this.state = 488;
            this.classMethodDeclaration();
            break;
        case ObjectiveCParser.SUB:
            this.enterOuterAlt(localctx, 3);
            this.state = 489;
            this.instanceMethodDeclaration();
            break;
        case ObjectiveCParser.PROPERTY:
            this.enterOuterAlt(localctx, 4);
            this.state = 490;
            this.propertyDeclaration();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classMethodDeclaration;
    return this;
}

ClassMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMethodDeclarationContext.prototype.constructor = ClassMethodDeclarationContext;

ClassMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

ClassMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassMethodDeclaration(this);
	}
};

ClassMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassMethodDeclaration(this);
	}
};




ObjectiveCParser.ClassMethodDeclarationContext = ClassMethodDeclarationContext;

ObjectiveCParser.prototype.classMethodDeclaration = function() {

    var localctx = new ClassMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ObjectiveCParser.RULE_classMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 493;
        this.match(ObjectiveCParser.ADD);
        this.state = 494;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceMethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceMethodDeclaration;
    return this;
}

InstanceMethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceMethodDeclarationContext.prototype.constructor = InstanceMethodDeclarationContext;

InstanceMethodDeclarationContext.prototype.methodDeclaration = function() {
    return this.getTypedRuleContext(MethodDeclarationContext,0);
};

InstanceMethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceMethodDeclaration(this);
	}
};

InstanceMethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceMethodDeclaration(this);
	}
};




ObjectiveCParser.InstanceMethodDeclarationContext = InstanceMethodDeclarationContext;

ObjectiveCParser.prototype.instanceMethodDeclaration = function() {

    var localctx = new InstanceMethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ObjectiveCParser.RULE_instanceMethodDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 496;
        this.match(ObjectiveCParser.SUB);
        this.state = 497;
        this.methodDeclaration();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodDeclaration;
    return this;
}

MethodDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDeclarationContext.prototype.constructor = MethodDeclarationContext;

MethodDeclarationContext.prototype.methodSelector = function() {
    return this.getTypedRuleContext(MethodSelectorContext,0);
};

MethodDeclarationContext.prototype.methodType = function() {
    return this.getTypedRuleContext(MethodTypeContext,0);
};

MethodDeclarationContext.prototype.macros = function() {
    return this.getTypedRuleContext(MacrosContext,0);
};

MethodDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodDeclaration(this);
	}
};

MethodDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodDeclaration(this);
	}
};




ObjectiveCParser.MethodDeclarationContext = MethodDeclarationContext;

ObjectiveCParser.prototype.methodDeclaration = function() {

    var localctx = new MethodDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ObjectiveCParser.RULE_methodDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 500;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LPAREN) {
            this.state = 499;
            this.methodType();
        }

        this.state = 502;
        this.methodSelector();
        this.state = 504;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 503;
            this.macros();
        }

        this.state = 506;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationDefinitionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_implementationDefinitionList;
    return this;
}

ImplementationDefinitionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationDefinitionListContext.prototype.constructor = ImplementationDefinitionListContext;

ImplementationDefinitionListContext.prototype.implementationDefinitionListItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImplementationDefinitionListItemContext);
    } else {
        return this.getTypedRuleContext(ImplementationDefinitionListItemContext,i);
    }
};

ImplementationDefinitionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterImplementationDefinitionList(this);
	}
};

ImplementationDefinitionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitImplementationDefinitionList(this);
	}
};




ObjectiveCParser.ImplementationDefinitionListContext = ImplementationDefinitionListContext;

ObjectiveCParser.prototype.implementationDefinitionList = function() {

    var localctx = new ImplementationDefinitionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ObjectiveCParser.RULE_implementationDefinitionList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 509; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 508;
        		this.implementationDefinitionListItem();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 511; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,35, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImplementationDefinitionListItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_implementationDefinitionListItem;
    return this;
}

ImplementationDefinitionListItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImplementationDefinitionListItemContext.prototype.constructor = ImplementationDefinitionListItemContext;

ImplementationDefinitionListItemContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ImplementationDefinitionListItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ImplementationDefinitionListItemContext.prototype.classMethodDefinition = function() {
    return this.getTypedRuleContext(ClassMethodDefinitionContext,0);
};

ImplementationDefinitionListItemContext.prototype.instanceMethodDefinition = function() {
    return this.getTypedRuleContext(InstanceMethodDefinitionContext,0);
};

ImplementationDefinitionListItemContext.prototype.propertyImplementation = function() {
    return this.getTypedRuleContext(PropertyImplementationContext,0);
};

ImplementationDefinitionListItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterImplementationDefinitionListItem(this);
	}
};

ImplementationDefinitionListItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitImplementationDefinitionListItem(this);
	}
};




ObjectiveCParser.ImplementationDefinitionListItemContext = ImplementationDefinitionListItemContext;

ObjectiveCParser.prototype.implementationDefinitionListItem = function() {

    var localctx = new ImplementationDefinitionListItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ObjectiveCParser.RULE_implementationDefinitionListItem);
    try {
        this.state = 518;
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 513;
            this.functionDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 514;
            this.declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 515;
            this.classMethodDefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 516;
            this.instanceMethodDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 517;
            this.propertyImplementation();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassMethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classMethodDefinition;
    return this;
}

ClassMethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassMethodDefinitionContext.prototype.constructor = ClassMethodDefinitionContext;

ClassMethodDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

ClassMethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassMethodDefinition(this);
	}
};

ClassMethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassMethodDefinition(this);
	}
};




ObjectiveCParser.ClassMethodDefinitionContext = ClassMethodDefinitionContext;

ObjectiveCParser.prototype.classMethodDefinition = function() {

    var localctx = new ClassMethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ObjectiveCParser.RULE_classMethodDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.match(ObjectiveCParser.ADD);
        this.state = 521;
        this.methodDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InstanceMethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_instanceMethodDefinition;
    return this;
}

InstanceMethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InstanceMethodDefinitionContext.prototype.constructor = InstanceMethodDefinitionContext;

InstanceMethodDefinitionContext.prototype.methodDefinition = function() {
    return this.getTypedRuleContext(MethodDefinitionContext,0);
};

InstanceMethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInstanceMethodDefinition(this);
	}
};

InstanceMethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInstanceMethodDefinition(this);
	}
};




ObjectiveCParser.InstanceMethodDefinitionContext = InstanceMethodDefinitionContext;

ObjectiveCParser.prototype.instanceMethodDefinition = function() {

    var localctx = new InstanceMethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ObjectiveCParser.RULE_instanceMethodDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 523;
        this.match(ObjectiveCParser.SUB);
        this.state = 524;
        this.methodDefinition();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodDefinition;
    return this;
}

MethodDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodDefinitionContext.prototype.constructor = MethodDefinitionContext;

MethodDefinitionContext.prototype.methodSelector = function() {
    return this.getTypedRuleContext(MethodSelectorContext,0);
};

MethodDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

MethodDefinitionContext.prototype.methodType = function() {
    return this.getTypedRuleContext(MethodTypeContext,0);
};

MethodDefinitionContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

MethodDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodDefinition(this);
	}
};

MethodDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodDefinition(this);
	}
};




ObjectiveCParser.MethodDefinitionContext = MethodDefinitionContext;

ObjectiveCParser.prototype.methodDefinition = function() {

    var localctx = new MethodDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ObjectiveCParser.RULE_methodDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 527;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LPAREN) {
            this.state = 526;
            this.methodType();
        }

        this.state = 529;
        this.methodSelector();
        this.state = 531;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)) | (1 << (ObjectiveCParser.LPAREN - 71)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (ObjectiveCParser.MUL - 112)) | (1 << (ObjectiveCParser.ASSIGNPA - 112)) | (1 << (ObjectiveCParser.GETTER - 112)) | (1 << (ObjectiveCParser.NONATOMIC - 112)) | (1 << (ObjectiveCParser.SETTER - 112)) | (1 << (ObjectiveCParser.STRONG - 112)) | (1 << (ObjectiveCParser.RETAIN - 112)) | (1 << (ObjectiveCParser.READONLY - 112)) | (1 << (ObjectiveCParser.READWRITE - 112)) | (1 << (ObjectiveCParser.WEAK - 112)) | (1 << (ObjectiveCParser.IDENTIFIER - 112)))) !== 0)) {
            this.state = 530;
            this.initDeclaratorList();
        }

        this.state = 534;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SEMI) {
            this.state = 533;
            this.match(ObjectiveCParser.SEMI);
        }

        this.state = 536;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodSelector;
    return this;
}

MethodSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodSelectorContext.prototype.constructor = MethodSelectorContext;

MethodSelectorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

MethodSelectorContext.prototype.keywordDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeywordDeclaratorContext);
    } else {
        return this.getTypedRuleContext(KeywordDeclaratorContext,i);
    }
};

MethodSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodSelector(this);
	}
};

MethodSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodSelector(this);
	}
};




ObjectiveCParser.MethodSelectorContext = MethodSelectorContext;

ObjectiveCParser.prototype.methodSelector = function() {

    var localctx = new MethodSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ObjectiveCParser.RULE_methodSelector);
    var _la = 0; // Token type
    try {
        this.state = 548;
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 538;
            this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 540; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 539;
            		this.keywordDeclarator();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 542; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,40, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 546;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 544;
                this.match(ObjectiveCParser.COMMA);
                this.state = 545;
                this.match(ObjectiveCParser.ELIPSIS);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_keywordDeclarator;
    return this;
}

KeywordDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordDeclaratorContext.prototype.constructor = KeywordDeclaratorContext;

KeywordDeclaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

KeywordDeclaratorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

KeywordDeclaratorContext.prototype.methodType = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MethodTypeContext);
    } else {
        return this.getTypedRuleContext(MethodTypeContext,i);
    }
};

KeywordDeclaratorContext.prototype.arcBehaviourSpecifier = function() {
    return this.getTypedRuleContext(ArcBehaviourSpecifierContext,0);
};

KeywordDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterKeywordDeclarator(this);
	}
};

KeywordDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitKeywordDeclarator(this);
	}
};




ObjectiveCParser.KeywordDeclaratorContext = KeywordDeclaratorContext;

ObjectiveCParser.prototype.keywordDeclarator = function() {

    var localctx = new KeywordDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ObjectiveCParser.RULE_keywordDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 551;
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.RETURN - 25)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 550;
            this.selector();
        }

        this.state = 553;
        this.match(ObjectiveCParser.COLON);
        this.state = 557;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.LPAREN) {
            this.state = 554;
            this.methodType();
            this.state = 559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 561;
        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
        if(la_===1) {
            this.state = 560;
            this.arcBehaviourSpecifier();

        }
        this.state = 563;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selector;
    return this;
}

SelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorContext.prototype.constructor = SelectorContext;

SelectorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelector(this);
	}
};

SelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelector(this);
	}
};




ObjectiveCParser.SelectorContext = SelectorContext;

ObjectiveCParser.prototype.selector = function() {

    var localctx = new SelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ObjectiveCParser.RULE_selector);
    try {
        this.state = 567;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.WWEAK:
        case ObjectiveCParser.WUNUSED:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.TYPEOF__:
        case ObjectiveCParser.TYPEOF____:
        case ObjectiveCParser.KINDOF__:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.ASSIGNPA:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 565;
            this.identifier();
            break;
        case ObjectiveCParser.RETURN:
            this.enterOuterAlt(localctx, 2);
            this.state = 566;
            this.match(ObjectiveCParser.RETURN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MethodTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_methodType;
    return this;
}

MethodTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MethodTypeContext.prototype.constructor = MethodTypeContext;

MethodTypeContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MethodTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMethodType(this);
	}
};

MethodTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMethodType(this);
	}
};




ObjectiveCParser.MethodTypeContext = MethodTypeContext;

ObjectiveCParser.prototype.methodType = function() {

    var localctx = new MethodTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ObjectiveCParser.RULE_methodType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 570;
        this.typeName();
        this.state = 571;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyImplementationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertyImplementation;
    return this;
}

PropertyImplementationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyImplementationContext.prototype.constructor = PropertyImplementationContext;

PropertyImplementationContext.prototype.propertySynthesizeList = function() {
    return this.getTypedRuleContext(PropertySynthesizeListContext,0);
};

PropertyImplementationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertyImplementation(this);
	}
};

PropertyImplementationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertyImplementation(this);
	}
};




ObjectiveCParser.PropertyImplementationContext = PropertyImplementationContext;

ObjectiveCParser.prototype.propertyImplementation = function() {

    var localctx = new PropertyImplementationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ObjectiveCParser.RULE_propertyImplementation);
    try {
        this.state = 581;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SYNTHESIZE:
            this.enterOuterAlt(localctx, 1);
            this.state = 573;
            this.match(ObjectiveCParser.SYNTHESIZE);
            this.state = 574;
            this.propertySynthesizeList();
            this.state = 575;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.DYNAMIC:
            this.enterOuterAlt(localctx, 2);
            this.state = 577;
            this.match(ObjectiveCParser.DYNAMIC);
            this.state = 578;
            this.propertySynthesizeList();
            this.state = 579;
            this.match(ObjectiveCParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySynthesizeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertySynthesizeList;
    return this;
}

PropertySynthesizeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySynthesizeListContext.prototype.constructor = PropertySynthesizeListContext;

PropertySynthesizeListContext.prototype.propertySynthesizeItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertySynthesizeItemContext);
    } else {
        return this.getTypedRuleContext(PropertySynthesizeItemContext,i);
    }
};

PropertySynthesizeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertySynthesizeList(this);
	}
};

PropertySynthesizeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertySynthesizeList(this);
	}
};




ObjectiveCParser.PropertySynthesizeListContext = PropertySynthesizeListContext;

ObjectiveCParser.prototype.propertySynthesizeList = function() {

    var localctx = new PropertySynthesizeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ObjectiveCParser.RULE_propertySynthesizeList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.propertySynthesizeItem();
        this.state = 588;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 584;
            this.match(ObjectiveCParser.COMMA);
            this.state = 585;
            this.propertySynthesizeItem();
            this.state = 590;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertySynthesizeItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_propertySynthesizeItem;
    return this;
}

PropertySynthesizeItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertySynthesizeItemContext.prototype.constructor = PropertySynthesizeItemContext;

PropertySynthesizeItemContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

PropertySynthesizeItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPropertySynthesizeItem(this);
	}
};

PropertySynthesizeItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPropertySynthesizeItem(this);
	}
};




ObjectiveCParser.PropertySynthesizeItemContext = PropertySynthesizeItemContext;

ObjectiveCParser.prototype.propertySynthesizeItem = function() {

    var localctx = new PropertySynthesizeItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ObjectiveCParser.RULE_propertySynthesizeItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 591;
        this.identifier();
        this.state = 594;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGN) {
            this.state = 592;
            this.match(ObjectiveCParser.ASSIGN);
            this.state = 593;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockType;
    return this;
}

BlockTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockTypeContext.prototype.constructor = BlockTypeContext;

BlockTypeContext.prototype.typeofTypeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeofTypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeofTypeSpecifierContext,i);
    }
};

BlockTypeContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

BlockTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockType(this);
	}
};

BlockTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockType(this);
	}
};




ObjectiveCParser.BlockTypeContext = BlockTypeContext;

ObjectiveCParser.prototype.blockType = function() {

    var localctx = new BlockTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ObjectiveCParser.RULE_blockType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 596;
        this.typeofTypeSpecifier();
        this.state = 597;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 598;
        this.match(ObjectiveCParser.CARET);
        this.state = 600;
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 599;
            this.typeofTypeSpecifier();
        }

        this.state = 602;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 604;
        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
        if(la_===1) {
            this.state = 603;
            this.blockParameters();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GenericsSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_genericsSpecifier;
    return this;
}

GenericsSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GenericsSpecifierContext.prototype.constructor = GenericsSpecifierContext;

GenericsSpecifierContext.prototype.typeofTypeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeofTypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeofTypeSpecifierContext,i);
    }
};

GenericsSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterGenericsSpecifier(this);
	}
};

GenericsSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitGenericsSpecifier(this);
	}
};




ObjectiveCParser.GenericsSpecifierContext = GenericsSpecifierContext;

ObjectiveCParser.prototype.genericsSpecifier = function() {

    var localctx = new GenericsSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ObjectiveCParser.RULE_genericsSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 606;
        this.match(ObjectiveCParser.LT);
        this.state = 608;
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 607;
            this.typeofTypeSpecifier();
        }

        this.state = 614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 610;
            this.match(ObjectiveCParser.COMMA);
            this.state = 611;
            this.typeofTypeSpecifier();
            this.state = 616;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 617;
        this.match(ObjectiveCParser.GT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SignedUnsignedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_signedUnsigned;
    return this;
}

SignedUnsignedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SignedUnsignedContext.prototype.constructor = SignedUnsignedContext;


SignedUnsignedContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSignedUnsigned(this);
	}
};

SignedUnsignedContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSignedUnsigned(this);
	}
};




ObjectiveCParser.SignedUnsignedContext = SignedUnsignedContext;

ObjectiveCParser.prototype.signedUnsigned = function() {

    var localctx = new SignedUnsignedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ObjectiveCParser.RULE_signedUnsigned);
    var _la = 0; // Token type
    try {
        this.state = 633;
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 620;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SIGNED || _la===ObjectiveCParser.UNSIGNED) {
                this.state = 619;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.SIGNED || _la===ObjectiveCParser.UNSIGNED)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 629;
            switch(this._input.LA(1)) {
            case ObjectiveCParser.CHAR:
                this.state = 622;
                this.match(ObjectiveCParser.CHAR);
                break;
            case ObjectiveCParser.SHORT:
                this.state = 623;
                this.match(ObjectiveCParser.SHORT);
                break;
            case ObjectiveCParser.INT:
                this.state = 624;
                this.match(ObjectiveCParser.INT);
                break;
            case ObjectiveCParser.LONG:
                this.state = 625;
                this.match(ObjectiveCParser.LONG);
                this.state = 627;
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                if(la_===1) {
                    this.state = 626;
                    this.match(ObjectiveCParser.LONG);

                }
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 631;
            this.match(ObjectiveCParser.UNSIGNED);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 632;
            this.match(ObjectiveCParser.SIGNED);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolQualifier;
    return this;
}

ProtocolQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolQualifierContext.prototype.constructor = ProtocolQualifierContext;


ProtocolQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolQualifier(this);
	}
};

ProtocolQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolQualifier(this);
	}
};




ObjectiveCParser.ProtocolQualifierContext = ProtocolQualifierContext;

ObjectiveCParser.prototype.protocolQualifier = function() {

    var localctx = new ProtocolQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ObjectiveCParser.RULE_protocolQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        _la = this._input.LA(1);
        if(!(((((_la - 30)) & ~0x1f) == 0 && ((1 << (_la - 30)) & ((1 << (ObjectiveCParser.BYCOPY - 30)) | (1 << (ObjectiveCParser.BYREF - 30)) | (1 << (ObjectiveCParser.IN - 30)) | (1 << (ObjectiveCParser.INOUT - 30)) | (1 << (ObjectiveCParser.ONEWAY - 30)) | (1 << (ObjectiveCParser.OUT - 30)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.vaArgExpression = function() {
    return this.getTypedRuleContext(VaArgExpressionContext,0);
};

PrimaryExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

PrimaryExpressionContext.prototype.stringLiteral = function() {
    return this.getTypedRuleContext(StringLiteralContext,0);
};

PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.messageExpression = function() {
    return this.getTypedRuleContext(MessageExpressionContext,0);
};

PrimaryExpressionContext.prototype.selectorExpression = function() {
    return this.getTypedRuleContext(SelectorExpressionContext,0);
};

PrimaryExpressionContext.prototype.protocolExpression = function() {
    return this.getTypedRuleContext(ProtocolExpressionContext,0);
};

PrimaryExpressionContext.prototype.encodeExpression = function() {
    return this.getTypedRuleContext(EncodeExpressionContext,0);
};

PrimaryExpressionContext.prototype.dictionaryExpression = function() {
    return this.getTypedRuleContext(DictionaryExpressionContext,0);
};

PrimaryExpressionContext.prototype.arrayExpression = function() {
    return this.getTypedRuleContext(ArrayExpressionContext,0);
};

PrimaryExpressionContext.prototype.boxExpression = function() {
    return this.getTypedRuleContext(BoxExpressionContext,0);
};

PrimaryExpressionContext.prototype.blockExpression = function() {
    return this.getTypedRuleContext(BlockExpressionContext,0);
};

PrimaryExpressionContext.prototype.structExpression = function() {
    return this.getTypedRuleContext(StructExpressionContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};




ObjectiveCParser.PrimaryExpressionContext = PrimaryExpressionContext;

ObjectiveCParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ObjectiveCParser.RULE_primaryExpression);
    try {
        this.state = 656;
        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 637;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 638;
            this.vaArgExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 639;
            this.constant();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 640;
            this.stringLiteral();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 641;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 642;
            this.expression();
            this.state = 643;
            this.match(ObjectiveCParser.RPAREN);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 645;
            this.match(ObjectiveCParser.SELF);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 646;
            this.match(ObjectiveCParser.SUPER);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 647;
            this.messageExpression();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 648;
            this.selectorExpression();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 649;
            this.protocolExpression();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 650;
            this.encodeExpression();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 651;
            this.dictionaryExpression();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 652;
            this.arrayExpression();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 653;
            this.boxExpression();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 654;
            this.blockExpression();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 655;
            this.structExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structExpression;
    return this;
}

StructExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructExpressionContext.prototype.constructor = StructExpressionContext;

StructExpressionContext.prototype.structPair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructPairContext);
    } else {
        return this.getTypedRuleContext(StructPairContext,i);
    }
};

StructExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructExpression(this);
	}
};

StructExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructExpression(this);
	}
};




ObjectiveCParser.StructExpressionContext = StructExpressionContext;

ObjectiveCParser.prototype.structExpression = function() {

    var localctx = new StructExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ObjectiveCParser.RULE_structExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 663; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 659;
            this.structPair();
            this.state = 661;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 660;
                this.match(ObjectiveCParser.COMMA);
            }

            this.state = 665; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ObjectiveCParser.DOT);
        this.state = 667;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structPair;
    return this;
}

StructPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructPairContext.prototype.constructor = StructPairContext;

StructPairContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructPairContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

StructPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructPair(this);
	}
};

StructPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructPair(this);
	}
};




ObjectiveCParser.StructPairContext = StructPairContext;

ObjectiveCParser.prototype.structPair = function() {

    var localctx = new StructPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ObjectiveCParser.RULE_structPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 669;
        this.match(ObjectiveCParser.DOT);
        this.state = 670;
        this.identifier();
        this.state = 671;
        this.match(ObjectiveCParser.ASSIGN);
        this.state = 672;
        this.postfixExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VaArgExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_vaArgExpression;
    return this;
}

VaArgExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VaArgExpressionContext.prototype.constructor = VaArgExpressionContext;

VaArgExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

VaArgExpressionContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

VaArgExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterVaArgExpression(this);
	}
};

VaArgExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitVaArgExpression(this);
	}
};




ObjectiveCParser.VaArgExpressionContext = VaArgExpressionContext;

ObjectiveCParser.prototype.vaArgExpression = function() {

    var localctx = new VaArgExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ObjectiveCParser.RULE_vaArgExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.match(ObjectiveCParser.VA_ARG);
        this.state = 675;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 676;
        this.postfixExpression();
        this.state = 677;
        this.match(ObjectiveCParser.COMMA);
        this.state = 678;
        this.typeSpecifier();
        this.state = 679;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DictionaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_dictionaryExpression;
    return this;
}

DictionaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryExpressionContext.prototype.constructor = DictionaryExpressionContext;

DictionaryExpressionContext.prototype.dictionaryPair = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionaryPairContext);
    } else {
        return this.getTypedRuleContext(DictionaryPairContext,i);
    }
};

DictionaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDictionaryExpression(this);
	}
};

DictionaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDictionaryExpression(this);
	}
};




ObjectiveCParser.DictionaryExpressionContext = DictionaryExpressionContext;

ObjectiveCParser.prototype.dictionaryExpression = function() {

    var localctx = new DictionaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ObjectiveCParser.RULE_dictionaryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.match(ObjectiveCParser.AT);
        this.state = 682;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 684;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
            this.state = 683;
            this.dictionaryPair();
        }

        this.state = 690;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 686;
                this.match(ObjectiveCParser.COMMA);
                this.state = 687;
                this.dictionaryPair(); 
            }
            this.state = 692;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

        this.state = 694;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 693;
            this.match(ObjectiveCParser.COMMA);
        }

        this.state = 696;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DictionaryPairContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_dictionaryPair;
    return this;
}

DictionaryPairContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryPairContext.prototype.constructor = DictionaryPairContext;

DictionaryPairContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

DictionaryPairContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

DictionaryPairContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDictionaryPair(this);
	}
};

DictionaryPairContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDictionaryPair(this);
	}
};




ObjectiveCParser.DictionaryPairContext = DictionaryPairContext;

ObjectiveCParser.prototype.dictionaryPair = function() {

    var localctx = new DictionaryPairContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ObjectiveCParser.RULE_dictionaryPair);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 698;
        this.castExpression();
        this.state = 699;
        this.match(ObjectiveCParser.COLON);
        this.state = 700;
        this.conditionalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArrayExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_arrayExpression;
    return this;
}

ArrayExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayExpressionContext.prototype.constructor = ArrayExpressionContext;

ArrayExpressionContext.prototype.conditionalExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConditionalExpressionContext);
    } else {
        return this.getTypedRuleContext(ConditionalExpressionContext,i);
    }
};

ArrayExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArrayExpression(this);
	}
};

ArrayExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArrayExpression(this);
	}
};




ObjectiveCParser.ArrayExpressionContext = ArrayExpressionContext;

ObjectiveCParser.prototype.arrayExpression = function() {

    var localctx = new ArrayExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ObjectiveCParser.RULE_arrayExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(ObjectiveCParser.AT);
        this.state = 703;
        this.match(ObjectiveCParser.LBRACK);
        this.state = 705;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
            this.state = 704;
            this.conditionalExpression();
        }

        this.state = 711;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 707;
                this.match(ObjectiveCParser.COMMA);
                this.state = 708;
                this.conditionalExpression(); 
            }
            this.state = 713;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 715;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 714;
            this.match(ObjectiveCParser.COMMA);
        }

        this.state = 717;
        this.match(ObjectiveCParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BoxExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_boxExpression;
    return this;
}

BoxExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BoxExpressionContext.prototype.constructor = BoxExpressionContext;

BoxExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BoxExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

BoxExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

BoxExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBoxExpression(this);
	}
};

BoxExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBoxExpression(this);
	}
};




ObjectiveCParser.BoxExpressionContext = BoxExpressionContext;

ObjectiveCParser.prototype.boxExpression = function() {

    var localctx = new BoxExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ObjectiveCParser.RULE_boxExpression);
    try {
        this.state = 729;
        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 719;
            this.match(ObjectiveCParser.AT);
            this.state = 720;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 721;
            this.expression();
            this.state = 722;
            this.match(ObjectiveCParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 724;
            this.match(ObjectiveCParser.AT);
            this.state = 727;
            switch(this._input.LA(1)) {
            case ObjectiveCParser.ADD:
            case ObjectiveCParser.SUB:
            case ObjectiveCParser.CHARACTER_LITERAL:
            case ObjectiveCParser.HEX_LITERAL:
            case ObjectiveCParser.DECIMAL_LITERAL:
            case ObjectiveCParser.OCTAL_LITERAL:
            case ObjectiveCParser.FLOATING_POINT_LITERAL:
                this.state = 725;
                this.constant();
                break;
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.WWEAK:
            case ObjectiveCParser.WUNUSED:
            case ObjectiveCParser.TYPEOF:
            case ObjectiveCParser.TYPEOF__:
            case ObjectiveCParser.TYPEOF____:
            case ObjectiveCParser.KINDOF__:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.L_STR:
            case ObjectiveCParser.ASSIGNPA:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 726;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockParameters;
    return this;
}

BlockParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockParametersContext.prototype.constructor = BlockParametersContext;

BlockParametersContext.prototype.typeVariableDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeVariableDeclaratorContext);
    } else {
        return this.getTypedRuleContext(TypeVariableDeclaratorContext,i);
    }
};

BlockParametersContext.prototype.typeName = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameContext);
    } else {
        return this.getTypedRuleContext(TypeNameContext,i);
    }
};

BlockParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockParameters(this);
	}
};

BlockParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockParameters(this);
	}
};




ObjectiveCParser.BlockParametersContext = BlockParametersContext;

ObjectiveCParser.prototype.blockParameters = function() {

    var localctx = new BlockParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ObjectiveCParser.RULE_blockParameters);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 731;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 735;
        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
        if(la_===1) {
            this.state = 732;
            this.typeVariableDeclarator();

        } else if(la_===2) {
            this.state = 733;
            this.typeName();

        } else if(la_===3) {
            this.state = 734;
            this.match(ObjectiveCParser.VOID);

        }
        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 737;
            this.match(ObjectiveCParser.COMMA);
            this.state = 740;
            var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
            switch(la_) {
            case 1:
                this.state = 738;
                this.typeVariableDeclarator();
                break;

            case 2:
                this.state = 739;
                this.typeName();
                break;

            }
            this.state = 746;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 747;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_blockExpression;
    return this;
}

BlockExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockExpressionContext.prototype.constructor = BlockExpressionContext;

BlockExpressionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

BlockExpressionContext.prototype.typeofTypeSpecifier = function() {
    return this.getTypedRuleContext(TypeofTypeSpecifierContext,0);
};

BlockExpressionContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

BlockExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBlockExpression(this);
	}
};

BlockExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBlockExpression(this);
	}
};




ObjectiveCParser.BlockExpressionContext = BlockExpressionContext;

ObjectiveCParser.prototype.blockExpression = function() {

    var localctx = new BlockExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ObjectiveCParser.RULE_blockExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 749;
        this.match(ObjectiveCParser.CARET);
        this.state = 751;
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 750;
            this.typeofTypeSpecifier();
        }

        this.state = 754;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LPAREN) {
            this.state = 753;
            this.blockParameters();
        }

        this.state = 756;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MessageExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_messageExpression;
    return this;
}

MessageExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MessageExpressionContext.prototype.constructor = MessageExpressionContext;

MessageExpressionContext.prototype.receiver = function() {
    return this.getTypedRuleContext(ReceiverContext,0);
};

MessageExpressionContext.prototype.messageSelector = function() {
    return this.getTypedRuleContext(MessageSelectorContext,0);
};

MessageExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMessageExpression(this);
	}
};

MessageExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMessageExpression(this);
	}
};




ObjectiveCParser.MessageExpressionContext = MessageExpressionContext;

ObjectiveCParser.prototype.messageExpression = function() {

    var localctx = new MessageExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ObjectiveCParser.RULE_messageExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 758;
        this.match(ObjectiveCParser.LBRACK);
        this.state = 759;
        this.receiver();
        this.state = 760;
        this.messageSelector();
        this.state = 761;
        this.match(ObjectiveCParser.RBRACK);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReceiverContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_receiver;
    return this;
}

ReceiverContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReceiverContext.prototype.constructor = ReceiverContext;

ReceiverContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReceiverContext.prototype.className = function() {
    return this.getTypedRuleContext(ClassNameContext,0);
};

ReceiverContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterReceiver(this);
	}
};

ReceiverContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitReceiver(this);
	}
};




ObjectiveCParser.ReceiverContext = ReceiverContext;

ObjectiveCParser.prototype.receiver = function() {

    var localctx = new ReceiverContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ObjectiveCParser.RULE_receiver);
    try {
        this.state = 766;
        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 763;
            this.expression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 764;
            this.className();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 765;
            this.match(ObjectiveCParser.SUPER);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MessageSelectorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_messageSelector;
    return this;
}

MessageSelectorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MessageSelectorContext.prototype.constructor = MessageSelectorContext;

MessageSelectorContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

MessageSelectorContext.prototype.keywordArgument = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(KeywordArgumentContext);
    } else {
        return this.getTypedRuleContext(KeywordArgumentContext,i);
    }
};

MessageSelectorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMessageSelector(this);
	}
};

MessageSelectorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMessageSelector(this);
	}
};




ObjectiveCParser.MessageSelectorContext = MessageSelectorContext;

ObjectiveCParser.prototype.messageSelector = function() {

    var localctx = new MessageSelectorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ObjectiveCParser.RULE_messageSelector);
    var _la = 0; // Token type
    try {
        this.state = 774;
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 768;
            this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 770; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 769;
                this.keywordArgument();
                this.state = 772; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.RETURN - 25)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)) | (1 << (ObjectiveCParser.COLON - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function KeywordArgumentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_keywordArgument;
    return this;
}

KeywordArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordArgumentContext.prototype.constructor = KeywordArgumentContext;

KeywordArgumentContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

KeywordArgumentContext.prototype.selector = function() {
    return this.getTypedRuleContext(SelectorContext,0);
};

KeywordArgumentContext.prototype.initializer_list = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Initializer_listContext);
    } else {
        return this.getTypedRuleContext(Initializer_listContext,i);
    }
};

KeywordArgumentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterKeywordArgument(this);
	}
};

KeywordArgumentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitKeywordArgument(this);
	}
};




ObjectiveCParser.KeywordArgumentContext = KeywordArgumentContext;

ObjectiveCParser.prototype.keywordArgument = function() {

    var localctx = new KeywordArgumentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ObjectiveCParser.RULE_keywordArgument);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 777;
        _la = this._input.LA(1);
        if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.RETURN - 25)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 776;
            this.selector();
        }

        this.state = 779;
        this.match(ObjectiveCParser.COLON);
        this.state = 780;
        this.expression();
        this.state = 788;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.LBRACE) {
            this.state = 781;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 782;
            this.initializer_list();
            this.state = 784;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.COMMA) {
                this.state = 783;
                this.match(ObjectiveCParser.COMMA);
            }

            this.state = 786;
            this.match(ObjectiveCParser.RBRACE);
        }

        this.state = 803;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 790;
            this.match(ObjectiveCParser.COMMA);
            this.state = 791;
            this.expression();
            this.state = 799;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.LBRACE) {
                this.state = 792;
                this.match(ObjectiveCParser.LBRACE);
                this.state = 793;
                this.initializer_list();
                this.state = 795;
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.COMMA) {
                    this.state = 794;
                    this.match(ObjectiveCParser.COMMA);
                }

                this.state = 797;
                this.match(ObjectiveCParser.RBRACE);
            }

            this.state = 805;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectorExpression;
    return this;
}

SelectorExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorExpressionContext.prototype.constructor = SelectorExpressionContext;

SelectorExpressionContext.prototype.selectorName = function() {
    return this.getTypedRuleContext(SelectorNameContext,0);
};

SelectorExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectorExpression(this);
	}
};

SelectorExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectorExpression(this);
	}
};




ObjectiveCParser.SelectorExpressionContext = SelectorExpressionContext;

ObjectiveCParser.prototype.selectorExpression = function() {

    var localctx = new SelectorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ObjectiveCParser.RULE_selectorExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 806;
        this.match(ObjectiveCParser.SELECTOR);
        this.state = 807;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 808;
        this.selectorName();
        this.state = 809;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectorNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectorName;
    return this;
}

SelectorNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectorNameContext.prototype.constructor = SelectorNameContext;

SelectorNameContext.prototype.selector = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectorContext);
    } else {
        return this.getTypedRuleContext(SelectorContext,i);
    }
};

SelectorNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectorName(this);
	}
};

SelectorNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectorName(this);
	}
};




ObjectiveCParser.SelectorNameContext = SelectorNameContext;

ObjectiveCParser.prototype.selectorName = function() {

    var localctx = new SelectorNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ObjectiveCParser.RULE_selectorName);
    var _la = 0; // Token type
    try {
        this.state = 820;
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 811;
            this.selector();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 816; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 813;
                _la = this._input.LA(1);
                if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.RETURN - 25)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                    this.state = 812;
                    this.selector();
                }

                this.state = 815;
                this.match(ObjectiveCParser.COLON);
                this.state = 818; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.RETURN - 25)))) !== 0) || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)) | (1 << (ObjectiveCParser.COLON - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ProtocolExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_protocolExpression;
    return this;
}

ProtocolExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProtocolExpressionContext.prototype.constructor = ProtocolExpressionContext;

ProtocolExpressionContext.prototype.protocolName = function() {
    return this.getTypedRuleContext(ProtocolNameContext,0);
};

ProtocolExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterProtocolExpression(this);
	}
};

ProtocolExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitProtocolExpression(this);
	}
};




ObjectiveCParser.ProtocolExpressionContext = ProtocolExpressionContext;

ObjectiveCParser.prototype.protocolExpression = function() {

    var localctx = new ProtocolExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ObjectiveCParser.RULE_protocolExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this.match(ObjectiveCParser.PROTOCOL);
        this.state = 823;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 824;
        this.protocolName();
        this.state = 825;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EncodeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_encodeExpression;
    return this;
}

EncodeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EncodeExpressionContext.prototype.constructor = EncodeExpressionContext;

EncodeExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

EncodeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEncodeExpression(this);
	}
};

EncodeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEncodeExpression(this);
	}
};




ObjectiveCParser.EncodeExpressionContext = EncodeExpressionContext;

ObjectiveCParser.prototype.encodeExpression = function() {

    var localctx = new EncodeExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ObjectiveCParser.RULE_encodeExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 827;
        this.match(ObjectiveCParser.ENCODE);
        this.state = 828;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 829;
        this.typeName();
        this.state = 830;
        this.match(ObjectiveCParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeVariableDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeVariableDeclarator;
    return this;
}

TypeVariableDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeVariableDeclaratorContext.prototype.constructor = TypeVariableDeclaratorContext;

TypeVariableDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

TypeVariableDeclaratorContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

TypeVariableDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeVariableDeclarator(this);
	}
};

TypeVariableDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeVariableDeclarator(this);
	}
};




ObjectiveCParser.TypeVariableDeclaratorContext = TypeVariableDeclaratorContext;

ObjectiveCParser.prototype.typeVariableDeclarator = function() {

    var localctx = new TypeVariableDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ObjectiveCParser.RULE_typeVariableDeclarator);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 833; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 832;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 835; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,86, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 837;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_tryStatement;
    return this;
}

TryStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryStatementContext.prototype.constructor = TryStatementContext;

TryStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

TryStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTryStatement(this);
	}
};

TryStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTryStatement(this);
	}
};




ObjectiveCParser.TryStatementContext = TryStatementContext;

ObjectiveCParser.prototype.tryStatement = function() {

    var localctx = new TryStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ObjectiveCParser.RULE_tryStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 839;
        this.match(ObjectiveCParser.TRY);
        this.state = 840;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CatchStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_catchStatement;
    return this;
}

CatchStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CatchStatementContext.prototype.constructor = CatchStatementContext;

CatchStatementContext.prototype.typeVariableDeclarator = function() {
    return this.getTypedRuleContext(TypeVariableDeclaratorContext,0);
};

CatchStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

CatchStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCatchStatement(this);
	}
};

CatchStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCatchStatement(this);
	}
};




ObjectiveCParser.CatchStatementContext = CatchStatementContext;

ObjectiveCParser.prototype.catchStatement = function() {

    var localctx = new CatchStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ObjectiveCParser.RULE_catchStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(ObjectiveCParser.CATCH);
        this.state = 843;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 844;
        this.typeVariableDeclarator();
        this.state = 845;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 846;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FinallyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_finallyStatement;
    return this;
}

FinallyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FinallyStatementContext.prototype.constructor = FinallyStatementContext;

FinallyStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

FinallyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFinallyStatement(this);
	}
};

FinallyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFinallyStatement(this);
	}
};




ObjectiveCParser.FinallyStatementContext = FinallyStatementContext;

ObjectiveCParser.prototype.finallyStatement = function() {

    var localctx = new FinallyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ObjectiveCParser.RULE_finallyStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(ObjectiveCParser.FINALLY);
        this.state = 849;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;

ThrowStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ThrowStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitThrowStatement(this);
	}
};




ObjectiveCParser.ThrowStatementContext = ThrowStatementContext;

ObjectiveCParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ObjectiveCParser.RULE_throwStatement);
    try {
        this.state = 858;
        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 851;
            this.match(ObjectiveCParser.THROW);
            this.state = 852;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 853;
            this.identifier();
            this.state = 854;
            this.match(ObjectiveCParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 856;
            this.match(ObjectiveCParser.THROW);
            this.state = 857;
            this.expression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TryBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_tryBlock;
    return this;
}

TryBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TryBlockContext.prototype.constructor = TryBlockContext;

TryBlockContext.prototype.tryStatement = function() {
    return this.getTypedRuleContext(TryStatementContext,0);
};

TryBlockContext.prototype.catchStatement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CatchStatementContext);
    } else {
        return this.getTypedRuleContext(CatchStatementContext,i);
    }
};

TryBlockContext.prototype.finallyStatement = function() {
    return this.getTypedRuleContext(FinallyStatementContext,0);
};

TryBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTryBlock(this);
	}
};

TryBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTryBlock(this);
	}
};




ObjectiveCParser.TryBlockContext = TryBlockContext;

ObjectiveCParser.prototype.tryBlock = function() {

    var localctx = new TryBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ObjectiveCParser.RULE_tryBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 860;
        this.tryStatement();
        this.state = 864;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.CATCH) {
            this.state = 861;
            this.catchStatement();
            this.state = 866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 868;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.FINALLY) {
            this.state = 867;
            this.finallyStatement();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SynchronizedStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_synchronizedStatement;
    return this;
}

SynchronizedStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SynchronizedStatementContext.prototype.constructor = SynchronizedStatementContext;

SynchronizedStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SynchronizedStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

SynchronizedStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSynchronizedStatement(this);
	}
};

SynchronizedStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSynchronizedStatement(this);
	}
};




ObjectiveCParser.SynchronizedStatementContext = SynchronizedStatementContext;

ObjectiveCParser.prototype.synchronizedStatement = function() {

    var localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ObjectiveCParser.RULE_synchronizedStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 870;
        this.match(ObjectiveCParser.SYNCHRONIZED);
        this.state = 871;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 872;
        this.expression();
        this.state = 873;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 874;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AutoreleaseStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_autoreleaseStatement;
    return this;
}

AutoreleaseStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AutoreleaseStatementContext.prototype.constructor = AutoreleaseStatementContext;

AutoreleaseStatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

AutoreleaseStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAutoreleaseStatement(this);
	}
};

AutoreleaseStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAutoreleaseStatement(this);
	}
};




ObjectiveCParser.AutoreleaseStatementContext = AutoreleaseStatementContext;

ObjectiveCParser.prototype.autoreleaseStatement = function() {

    var localctx = new AutoreleaseStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, ObjectiveCParser.RULE_autoreleaseStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.match(ObjectiveCParser.AUTORELEASEPOOL);
        this.state = 877;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.functionSignature = function() {
    return this.getTypedRuleContext(FunctionSignatureContext,0);
};

FunctionDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

FunctionDefinitionContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionDefinition(this);
	}
};




ObjectiveCParser.FunctionDefinitionContext = FunctionDefinitionContext;

ObjectiveCParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ObjectiveCParser.RULE_functionDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 879;
                this.declarationSpecifier(); 
            }
            this.state = 884;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
        }

        this.state = 885;
        this.functionSignature();
        this.state = 886;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionSignatureContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_functionSignature;
    return this;
}

FunctionSignatureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSignatureContext.prototype.constructor = FunctionSignatureContext;

FunctionSignatureContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

FunctionSignatureContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterFunctionSignature(this);
	}
};

FunctionSignatureContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitFunctionSignature(this);
	}
};




ObjectiveCParser.FunctionSignatureContext = FunctionSignatureContext;

ObjectiveCParser.prototype.functionSignature = function() {

    var localctx = new FunctionSignatureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ObjectiveCParser.RULE_functionSignature);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 888;
        this.declarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

DeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

DeclarationContext.prototype.macros = function() {
    return this.getTypedRuleContext(MacrosContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclaration(this);
	}
};




ObjectiveCParser.DeclarationContext = DeclarationContext;

ObjectiveCParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ObjectiveCParser.RULE_declaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,91,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 890;
                this.declarationSpecifier(); 
            }
            this.state = 895;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,91,this._ctx);
        }

        this.state = 897;
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        if(la_===1) {
            this.state = 896;
            this.initDeclaratorList();

        }
        this.state = 900;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 899;
            this.macros();
        }

        this.state = 902;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declarationSpecifier;
    return this;
}

DeclarationSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifierContext.prototype.constructor = DeclarationSpecifierContext;

DeclarationSpecifierContext.prototype.arcBehaviourSpecifier = function() {
    return this.getTypedRuleContext(ArcBehaviourSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.storageClassSpecifier = function() {
    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeofTypeSpecifier = function() {
    return this.getTypedRuleContext(TypeofTypeSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

DeclarationSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclarationSpecifier(this);
	}
};

DeclarationSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclarationSpecifier(this);
	}
};




ObjectiveCParser.DeclarationSpecifierContext = DeclarationSpecifierContext;

ObjectiveCParser.prototype.declarationSpecifier = function() {

    var localctx = new DeclarationSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ObjectiveCParser.RULE_declarationSpecifier);
    try {
        this.state = 908;
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 904;
            this.arcBehaviourSpecifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 905;
            this.storageClassSpecifier();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 906;
            this.typeofTypeSpecifier();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 907;
            this.typeQualifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initDeclaratorList;
    return this;
}

InitDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorListContext.prototype.constructor = InitDeclaratorListContext;

InitDeclaratorListContext.prototype.initDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitDeclaratorContext);
    } else {
        return this.getTypedRuleContext(InitDeclaratorContext,i);
    }
};

InitDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitDeclaratorList(this);
	}
};

InitDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitDeclaratorList(this);
	}
};




ObjectiveCParser.InitDeclaratorListContext = InitDeclaratorListContext;

ObjectiveCParser.prototype.initDeclaratorList = function() {

    var localctx = new InitDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ObjectiveCParser.RULE_initDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 910;
        this.initDeclarator();
        this.state = 915;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 911;
            this.match(ObjectiveCParser.COMMA);
            this.state = 912;
            this.initDeclarator();
            this.state = 917;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initDeclarator;
    return this;
}

InitDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorContext.prototype.constructor = InitDeclaratorContext;

InitDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitDeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitDeclarator(this);
	}
};

InitDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitDeclarator(this);
	}
};




ObjectiveCParser.InitDeclaratorContext = InitDeclaratorContext;

ObjectiveCParser.prototype.initDeclarator = function() {

    var localctx = new InitDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ObjectiveCParser.RULE_initDeclarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 918;
        this.declarator();
        this.state = 921;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGN) {
            this.state = 919;
            this.match(ObjectiveCParser.ASSIGN);
            this.state = 920;
            this.initializer();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructOrUnionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structOrUnionSpecifier;
    return this;
}

StructOrUnionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionSpecifierContext.prototype.constructor = StructOrUnionSpecifierContext;

StructOrUnionSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructOrUnionSpecifierContext.prototype.structDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructDeclarationContext);
    } else {
        return this.getTypedRuleContext(StructDeclarationContext,i);
    }
};

StructOrUnionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructOrUnionSpecifier(this);
	}
};

StructOrUnionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructOrUnionSpecifier(this);
	}
};




ObjectiveCParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext;

ObjectiveCParser.prototype.structOrUnionSpecifier = function() {

    var localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ObjectiveCParser.RULE_structOrUnionSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 923;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.STRUCT || _la===ObjectiveCParser.UNION)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 936;
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            this.state = 924;
            this.identifier();
            break;

        case 2:
            this.state = 926;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                this.state = 925;
                this.identifier();
            }

            this.state = 928;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 930; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 929;
                this.structDeclaration();
                this.state = 932; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0));
            this.state = 934;
            this.match(ObjectiveCParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structDeclaration;
    return this;
}

StructDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclarationContext.prototype.constructor = StructDeclarationContext;

StructDeclarationContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

StructDeclarationContext.prototype.structDeclaratorList = function() {
    return this.getTypedRuleContext(StructDeclaratorListContext,0);
};

StructDeclarationContext.prototype.macros = function() {
    return this.getTypedRuleContext(MacrosContext,0);
};

StructDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructDeclaration(this);
	}
};

StructDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructDeclaration(this);
	}
};




ObjectiveCParser.StructDeclarationContext = StructDeclarationContext;

ObjectiveCParser.prototype.structDeclaration = function() {

    var localctx = new StructDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ObjectiveCParser.RULE_structDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 938;
        this.specifierQualifierList();
        this.state = 939;
        this.structDeclaratorList();
        this.state = 941;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
            this.state = 940;
            this.macros();
        }

        this.state = 943;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_specifierQualifierList;
    return this;
}

SpecifierQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierQualifierListContext.prototype.constructor = SpecifierQualifierListContext;

SpecifierQualifierListContext.prototype.arcBehaviourSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArcBehaviourSpecifierContext);
    } else {
        return this.getTypedRuleContext(ArcBehaviourSpecifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.typeofTypeSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeofTypeSpecifierContext);
    } else {
        return this.getTypedRuleContext(TypeofTypeSpecifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.typeQualifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeQualifierContext);
    } else {
        return this.getTypedRuleContext(TypeQualifierContext,i);
    }
};

SpecifierQualifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSpecifierQualifierList(this);
	}
};

SpecifierQualifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSpecifierQualifierList(this);
	}
};




ObjectiveCParser.SpecifierQualifierListContext = SpecifierQualifierListContext;

ObjectiveCParser.prototype.specifierQualifierList = function() {

    var localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ObjectiveCParser.RULE_specifierQualifierList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 951;
        		var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
        		switch(la_) {
        		case 1:
        		    this.state = 945;
        		    this.arcBehaviourSpecifier();
        		    this.state = 947;
        		    var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
        		    if(la_===1) {
        		        this.state = 946;
        		        this.match(ObjectiveCParser.MUL);

        		    }
        		    break;

        		case 2:
        		    this.state = 949;
        		    this.typeofTypeSpecifier();
        		    break;

        		case 3:
        		    this.state = 950;
        		    this.typeQualifier();
        		    break;

        		}
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 953; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,103, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArcBehaviourSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_arcBehaviourSpecifier;
    return this;
}

ArcBehaviourSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArcBehaviourSpecifierContext.prototype.constructor = ArcBehaviourSpecifierContext;


ArcBehaviourSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArcBehaviourSpecifier(this);
	}
};

ArcBehaviourSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArcBehaviourSpecifier(this);
	}
};




ObjectiveCParser.ArcBehaviourSpecifierContext = ArcBehaviourSpecifierContext;

ObjectiveCParser.prototype.arcBehaviourSpecifier = function() {

    var localctx = new ArcBehaviourSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ObjectiveCParser.RULE_arcBehaviourSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 955;
        _la = this._input.LA(1);
        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.WDEPRECATED - 71)) | (1 << (ObjectiveCParser.WAUTORELEASING - 71)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageClassSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_storageClassSpecifier;
    return this;
}

StorageClassSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageClassSpecifierContext.prototype.constructor = StorageClassSpecifierContext;


StorageClassSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStorageClassSpecifier(this);
	}
};

StorageClassSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStorageClassSpecifier(this);
	}
};




ObjectiveCParser.StorageClassSpecifierContext = StorageClassSpecifierContext;

ObjectiveCParser.prototype.storageClassSpecifier = function() {

    var localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ObjectiveCParser.RULE_storageClassSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 957;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.AUTO || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ObjectiveCParser.EXTERN - 41)) | (1 << (ObjectiveCParser.REGISTER - 41)) | (1 << (ObjectiveCParser.STATIC - 41)) | (1 << (ObjectiveCParser.TYPEDEF - 41)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeofTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeofTypeSpecifier;
    return this;
}

TypeofTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeofTypeSpecifierContext.prototype.constructor = TypeofTypeSpecifierContext;

TypeofTypeSpecifierContext.prototype.className = function() {
    return this.getTypedRuleContext(ClassNameContext,0);
};

TypeofTypeSpecifierContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

TypeofTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeofTypeSpecifier(this);
	}
};

TypeofTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeofTypeSpecifier(this);
	}
};




ObjectiveCParser.TypeofTypeSpecifierContext = TypeofTypeSpecifierContext;

ObjectiveCParser.prototype.typeofTypeSpecifier = function() {

    var localctx = new TypeofTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ObjectiveCParser.RULE_typeofTypeSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 971;
        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 959;
            _la = this._input.LA(1);
            if(!(((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 960;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 961;
            this.className();
            this.state = 962;
            this.match(ObjectiveCParser.RPAREN);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 965;
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 964;
                this.match(ObjectiveCParser.KINDOF__);

            }
            this.state = 967;
            this.typeSpecifier();
            this.state = 969;
            var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
            if(la_===1) {
                this.state = 968;
                this.match(ObjectiveCParser.MUL);

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeSpecifier;
    return this;
}

TypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierContext.prototype.constructor = TypeSpecifierContext;

TypeSpecifierContext.prototype.signedUnsigned = function() {
    return this.getTypedRuleContext(SignedUnsignedContext,0);
};

TypeSpecifierContext.prototype.classNameGeneric = function() {
    return this.getTypedRuleContext(ClassNameGenericContext,0);
};

TypeSpecifierContext.prototype.structOrUnionSpecifier = function() {
    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
};

TypeSpecifierContext.prototype.enumSpecifier = function() {
    return this.getTypedRuleContext(EnumSpecifierContext,0);
};

TypeSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TypeSpecifierContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

TypeSpecifierContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

TypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeSpecifier(this);
	}
};

TypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeSpecifier(this);
	}
};




ObjectiveCParser.TypeSpecifierContext = TypeSpecifierContext;

ObjectiveCParser.prototype.typeSpecifier = function() {

    var localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ObjectiveCParser.RULE_typeSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 974;
        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
        if(la_===1) {
            this.state = 973;
            this.match(ObjectiveCParser.NULLABLE);

        }
        this.state = 990;
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.state = 976;
            this.match(ObjectiveCParser.VOID);
            break;

        case 2:
            this.state = 977;
            this.match(ObjectiveCParser.CHAR);
            break;

        case 3:
            this.state = 978;
            this.match(ObjectiveCParser.FLOAT);
            break;

        case 4:
            this.state = 979;
            this.match(ObjectiveCParser.DOUBLE);
            break;

        case 5:
            this.state = 980;
            this.signedUnsigned();
            break;

        case 6:
            this.state = 981;
            this.match(ObjectiveCParser.INSTANCETYPE);
            break;

        case 7:
            this.state = 982;
            this.match(ObjectiveCParser.ID);
            this.state = 984;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.LT) {
                this.state = 983;
                this.protocolReferenceList();
            }

            break;

        case 8:
            this.state = 986;
            this.classNameGeneric();
            break;

        case 9:
            this.state = 987;
            this.structOrUnionSpecifier();
            break;

        case 10:
            this.state = 988;
            this.enumSpecifier();
            break;

        case 11:
            this.state = 989;
            this.identifier();
            break;

        }
        this.state = 993;
        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
        if(la_===1) {
            this.state = 992;
            this.pointer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeQualifier;
    return this;
}

TypeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierContext.prototype.constructor = TypeQualifierContext;

TypeQualifierContext.prototype.protocolQualifier = function() {
    return this.getTypedRuleContext(ProtocolQualifierContext,0);
};

TypeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeQualifier(this);
	}
};

TypeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeQualifier(this);
	}
};




ObjectiveCParser.TypeQualifierContext = TypeQualifierContext;

ObjectiveCParser.prototype.typeQualifier = function() {

    var localctx = new TypeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ObjectiveCParser.RULE_typeQualifier);
    try {
        this.state = 998;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.CONST:
            this.enterOuterAlt(localctx, 1);
            this.state = 995;
            this.match(ObjectiveCParser.CONST);
            break;
        case ObjectiveCParser.VOLATILE:
            this.enterOuterAlt(localctx, 2);
            this.state = 996;
            this.match(ObjectiveCParser.VOLATILE);
            break;
        case ObjectiveCParser.BYCOPY:
        case ObjectiveCParser.BYREF:
        case ObjectiveCParser.IN:
        case ObjectiveCParser.INOUT:
        case ObjectiveCParser.ONEWAY:
        case ObjectiveCParser.OUT:
            this.enterOuterAlt(localctx, 3);
            this.state = 997;
            this.protocolQualifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClassNameGenericContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_classNameGeneric;
    return this;
}

ClassNameGenericContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassNameGenericContext.prototype.constructor = ClassNameGenericContext;

ClassNameGenericContext.prototype.className = function() {
    return this.getTypedRuleContext(ClassNameContext,0);
};

ClassNameGenericContext.prototype.protocolReferenceList = function() {
    return this.getTypedRuleContext(ProtocolReferenceListContext,0);
};

ClassNameGenericContext.prototype.genericsSpecifier = function() {
    return this.getTypedRuleContext(GenericsSpecifierContext,0);
};

ClassNameGenericContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterClassNameGeneric(this);
	}
};

ClassNameGenericContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitClassNameGeneric(this);
	}
};




ObjectiveCParser.ClassNameGenericContext = ClassNameGenericContext;

ObjectiveCParser.prototype.classNameGeneric = function() {

    var localctx = new ClassNameGenericContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ObjectiveCParser.RULE_classNameGeneric);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1000;
        this.className();
        this.state = 1003;
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 1001;
            this.protocolReferenceList();

        } else if(la_===2) {
            this.state = 1002;
            this.genericsSpecifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structDeclaratorList;
    return this;
}

StructDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorListContext.prototype.constructor = StructDeclaratorListContext;

StructDeclaratorListContext.prototype.structDeclarator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StructDeclaratorContext);
    } else {
        return this.getTypedRuleContext(StructDeclaratorContext,i);
    }
};

StructDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructDeclaratorList(this);
	}
};

StructDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructDeclaratorList(this);
	}
};




ObjectiveCParser.StructDeclaratorListContext = StructDeclaratorListContext;

ObjectiveCParser.prototype.structDeclaratorList = function() {

    var localctx = new StructDeclaratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ObjectiveCParser.RULE_structDeclaratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1005;
        this.structDeclarator();
        this.state = 1010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1006;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1007;
            this.structDeclarator();
            this.state = 1012;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_structDeclarator;
    return this;
}

StructDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorContext.prototype.constructor = StructDeclaratorContext;

StructDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

StructDeclaratorContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

StructDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStructDeclarator(this);
	}
};

StructDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStructDeclarator(this);
	}
};




ObjectiveCParser.StructDeclaratorContext = StructDeclaratorContext;

ObjectiveCParser.prototype.structDeclarator = function() {

    var localctx = new StructDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ObjectiveCParser.RULE_structDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1019;
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1015;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)) | (1 << (ObjectiveCParser.LPAREN - 71)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (ObjectiveCParser.MUL - 112)) | (1 << (ObjectiveCParser.ASSIGNPA - 112)) | (1 << (ObjectiveCParser.GETTER - 112)) | (1 << (ObjectiveCParser.NONATOMIC - 112)) | (1 << (ObjectiveCParser.SETTER - 112)) | (1 << (ObjectiveCParser.STRONG - 112)) | (1 << (ObjectiveCParser.RETAIN - 112)) | (1 << (ObjectiveCParser.READONLY - 112)) | (1 << (ObjectiveCParser.READWRITE - 112)) | (1 << (ObjectiveCParser.WEAK - 112)) | (1 << (ObjectiveCParser.IDENTIFIER - 112)))) !== 0)) {
                this.state = 1014;
                this.declarator();
            }

            this.state = 1017;
            this.match(ObjectiveCParser.COLON);
            this.state = 1018;
            this.constant();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumSpecifier;
    return this;
}

EnumSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSpecifierContext.prototype.constructor = EnumSpecifierContext;

EnumSpecifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumSpecifierContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

EnumSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumSpecifier(this);
	}
};

EnumSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumSpecifier(this);
	}
};




ObjectiveCParser.EnumSpecifierContext = EnumSpecifierContext;

ObjectiveCParser.prototype.enumSpecifier = function() {

    var localctx = new EnumSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ObjectiveCParser.RULE_enumSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 1063;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.ENUM:
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.match(ObjectiveCParser.ENUM);
            this.state = 1041;
            switch(this._input.LA(1)) {
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.WWEAK:
            case ObjectiveCParser.WUNUSED:
            case ObjectiveCParser.TYPEOF:
            case ObjectiveCParser.TYPEOF__:
            case ObjectiveCParser.TYPEOF____:
            case ObjectiveCParser.KINDOF__:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.L_STR:
            case ObjectiveCParser.ASSIGNPA:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.IDENTIFIER:
                this.state = 1022;
                this.identifier();
                this.state = 1025;
                var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
                if(la_===1) {
                    this.state = 1023;
                    this.match(ObjectiveCParser.COLON);
                    this.state = 1024;
                    this.typeName();

                }
                this.state = 1031;
                var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
                if(la_===1) {
                    this.state = 1027;
                    this.match(ObjectiveCParser.LBRACE);
                    this.state = 1028;
                    this.enumeratorList();
                    this.state = 1029;
                    this.match(ObjectiveCParser.RBRACE);

                }
                break;
            case ObjectiveCParser.LBRACE:
            case ObjectiveCParser.COLON:
                this.state = 1035;
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.COLON) {
                    this.state = 1033;
                    this.match(ObjectiveCParser.COLON);
                    this.state = 1034;
                    this.typeName();
                }

                this.state = 1037;
                this.match(ObjectiveCParser.LBRACE);
                this.state = 1038;
                this.enumeratorList();
                this.state = 1039;
                this.match(ObjectiveCParser.RBRACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            break;
        case ObjectiveCParser.NS_OPTIONS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1043;
            this.match(ObjectiveCParser.NS_OPTIONS);
            this.state = 1044;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1045;
            this.typeName();
            this.state = 1046;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1047;
            this.identifier();
            this.state = 1048;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1049;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1050;
            this.enumeratorList();
            this.state = 1051;
            this.match(ObjectiveCParser.RBRACE);
            break;
        case ObjectiveCParser.NS_ENUM:
            this.enterOuterAlt(localctx, 3);
            this.state = 1053;
            this.match(ObjectiveCParser.NS_ENUM);
            this.state = 1054;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1055;
            this.typeName();
            this.state = 1056;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1057;
            this.identifier();
            this.state = 1058;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1059;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1060;
            this.enumeratorList();
            this.state = 1061;
            this.match(ObjectiveCParser.RBRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumeratorList;
    return this;
}

EnumeratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorListContext.prototype.constructor = EnumeratorListContext;

EnumeratorListContext.prototype.enumerator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumeratorContext);
    } else {
        return this.getTypedRuleContext(EnumeratorContext,i);
    }
};

EnumeratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumeratorList(this);
	}
};

EnumeratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumeratorList(this);
	}
};




ObjectiveCParser.EnumeratorListContext = EnumeratorListContext;

ObjectiveCParser.prototype.enumeratorList = function() {

    var localctx = new EnumeratorListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ObjectiveCParser.RULE_enumeratorList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1065;
        this.enumerator();
        this.state = 1070;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1066;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1067;
                this.enumerator(); 
            }
            this.state = 1072;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

        this.state = 1074;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.COMMA) {
            this.state = 1073;
            this.match(ObjectiveCParser.COMMA);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

EnumeratorContext.prototype.binaryExpression = function() {
    return this.getTypedRuleContext(BinaryExpressionContext,0);
};

EnumeratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterEnumerator(this);
	}
};

EnumeratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitEnumerator(this);
	}
};




ObjectiveCParser.EnumeratorContext = EnumeratorContext;

ObjectiveCParser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ObjectiveCParser.RULE_enumerator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1076;
        this.unaryExpression();
        this.state = 1079;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.ASSIGN) {
            this.state = 1077;
            this.match(ObjectiveCParser.ASSIGN);
            this.state = 1078;
            this.binaryExpression(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_directDeclarator;
    return this;
}

DirectDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectDeclaratorContext.prototype.constructor = DirectDeclaratorContext;

DirectDeclaratorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DirectDeclaratorContext.prototype.declaratorSuffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclaratorSuffixContext);
    } else {
        return this.getTypedRuleContext(DeclaratorSuffixContext,i);
    }
};

DirectDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

DirectDeclaratorContext.prototype.blockParameters = function() {
    return this.getTypedRuleContext(BlockParametersContext,0);
};

DirectDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDirectDeclarator(this);
	}
};

DirectDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDirectDeclarator(this);
	}
};




ObjectiveCParser.DirectDeclaratorContext = DirectDeclaratorContext;

ObjectiveCParser.prototype.directDeclarator = function() {

    var localctx = new DirectDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ObjectiveCParser.RULE_directDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1104;
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1081;
            this.identifier();
            this.state = 1085;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.LPAREN || _la===ObjectiveCParser.LBRACK) {
                this.state = 1082;
                this.declaratorSuffix();
                this.state = 1087;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1088;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1089;
            this.declarator();
            this.state = 1090;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1094;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.LPAREN || _la===ObjectiveCParser.LBRACK) {
                this.state = 1091;
                this.declaratorSuffix();
                this.state = 1096;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1097;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1098;
            this.match(ObjectiveCParser.CARET);
            this.state = 1100;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                this.state = 1099;
                this.identifier();
            }

            this.state = 1102;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1103;
            this.blockParameters();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declaratorSuffix;
    return this;
}

DeclaratorSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorSuffixContext.prototype.constructor = DeclaratorSuffixContext;

DeclaratorSuffixContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

DeclaratorSuffixContext.prototype.parameterDeclarationList = function() {
    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
};

DeclaratorSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclaratorSuffix(this);
	}
};

DeclaratorSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclaratorSuffix(this);
	}
};




ObjectiveCParser.DeclaratorSuffixContext = DeclaratorSuffixContext;

ObjectiveCParser.prototype.declaratorSuffix = function() {

    var localctx = new DeclaratorSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ObjectiveCParser.RULE_declaratorSuffix);
    var _la = 0; // Token type
    try {
        this.state = 1120;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1106;
            this.match(ObjectiveCParser.LBRACK);
            this.state = 1108;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ObjectiveCParser.HEX_LITERAL - 142)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 142)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 142)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 142)))) !== 0)) {
                this.state = 1107;
                this.constantExpression();
            }

            this.state = 1110;
            this.match(ObjectiveCParser.RBRACK);
            break;
        case ObjectiveCParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1111;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1117;
            _la = this._input.LA(1);
            if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.AUTO - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.EXTERN - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.REGISTER - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STATIC - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.TYPEDEF - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                this.state = 1112;
                this.parameterDeclarationList();
                this.state = 1115;
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.COMMA) {
                    this.state = 1113;
                    this.match(ObjectiveCParser.COMMA);
                    this.state = 1114;
                    this.match(ObjectiveCParser.ELIPSIS);
                }

            }

            this.state = 1119;
            this.match(ObjectiveCParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

DeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDeclarator(this);
	}
};

DeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDeclarator(this);
	}
};




ObjectiveCParser.DeclaratorContext = DeclaratorContext;

ObjectiveCParser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ObjectiveCParser.RULE_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1123;
        _la = this._input.LA(1);
        if(_la===ObjectiveCParser.MUL) {
            this.state = 1122;
            this.pointer();
        }

        this.state = 1125;
        this.directDeclarator();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PointerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_pointer;
    return this;
}

PointerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerContext.prototype.constructor = PointerContext;

PointerContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

PointerContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

PointerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPointer(this);
	}
};

PointerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPointer(this);
	}
};




ObjectiveCParser.PointerContext = PointerContext;

ObjectiveCParser.prototype.pointer = function() {

    var localctx = new PointerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ObjectiveCParser.RULE_pointer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1127;
        this.match(ObjectiveCParser.MUL);
        this.state = 1131;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,133,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1128;
                this.declarationSpecifier(); 
            }
            this.state = 1133;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,133,this._ctx);
        }

        this.state = 1135;
        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
        if(la_===1) {
            this.state = 1134;
            this.pointer();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MacrosContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_macros;
    return this;
}

MacrosContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MacrosContext.prototype.constructor = MacrosContext;

MacrosContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

MacrosContext.prototype.primaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryExpressionContext);
    } else {
        return this.getTypedRuleContext(PrimaryExpressionContext,i);
    }
};

MacrosContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterMacros(this);
	}
};

MacrosContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitMacros(this);
	}
};




ObjectiveCParser.MacrosContext = MacrosContext;

ObjectiveCParser.prototype.macros = function() {

    var localctx = new MacrosContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ObjectiveCParser.RULE_macros);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1137;
        this.identifier();
        this.state = 1149;
        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
        if(la_===1) {
            this.state = 1138;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1139;
            this.primaryExpression();
            this.state = 1144;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ObjectiveCParser.COMMA) {
                this.state = 1140;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1141;
                this.primaryExpression();
                this.state = 1146;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1147;
            this.match(ObjectiveCParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.initializer_list = function() {
    return this.getTypedRuleContext(Initializer_listContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitializer(this);
	}
};




ObjectiveCParser.InitializerContext = InitializerContext;

ObjectiveCParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, ObjectiveCParser.RULE_initializer);
    var _la = 0; // Token type
    try {
        this.state = 1160;
        var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1151;
            this.assignmentExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1152;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1157;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.DOT - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
                this.state = 1153;
                this.initializer_list();
                this.state = 1155;
                _la = this._input.LA(1);
                if(_la===ObjectiveCParser.COMMA) {
                    this.state = 1154;
                    this.match(ObjectiveCParser.COMMA);
                }

            }

            this.state = 1159;
            this.match(ObjectiveCParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Initializer_listContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_initializer_list;
    return this;
}

Initializer_listContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Initializer_listContext.prototype.constructor = Initializer_listContext;

Initializer_listContext.prototype.initializer = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InitializerContext);
    } else {
        return this.getTypedRuleContext(InitializerContext,i);
    }
};

Initializer_listContext.prototype.designation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DesignationContext);
    } else {
        return this.getTypedRuleContext(DesignationContext,i);
    }
};

Initializer_listContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterInitializer_list(this);
	}
};

Initializer_listContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitInitializer_list(this);
	}
};




ObjectiveCParser.Initializer_listContext = Initializer_listContext;

ObjectiveCParser.prototype.initializer_list = function() {

    var localctx = new Initializer_listContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ObjectiveCParser.RULE_initializer_list);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1163;
        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
        if(la_===1) {
            this.state = 1162;
            this.designation();

        }
        this.state = 1165;
        this.initializer();
        this.state = 1173;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1166;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1168;
                var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
                if(la_===1) {
                    this.state = 1167;
                    this.designation();

                }
                this.state = 1170;
                this.initializer(); 
            }
            this.state = 1175;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_designation;
    return this;
}

DesignationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignationContext.prototype.constructor = DesignationContext;

DesignationContext.prototype.designator = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DesignatorContext);
    } else {
        return this.getTypedRuleContext(DesignatorContext,i);
    }
};

DesignationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDesignation(this);
	}
};

DesignationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDesignation(this);
	}
};




ObjectiveCParser.DesignationContext = DesignationContext;

ObjectiveCParser.prototype.designation = function() {

    var localctx = new DesignationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ObjectiveCParser.RULE_designation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1177; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1176;
            this.designator();
            this.state = 1179; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===ObjectiveCParser.LBRACK || _la===ObjectiveCParser.DOT);
        this.state = 1181;
        this.match(ObjectiveCParser.ASSIGN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_designator;
    return this;
}

DesignatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorContext.prototype.constructor = DesignatorContext;

DesignatorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

DesignatorContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DesignatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDesignator(this);
	}
};

DesignatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDesignator(this);
	}
};




ObjectiveCParser.DesignatorContext = DesignatorContext;

ObjectiveCParser.prototype.designator = function() {

    var localctx = new DesignatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ObjectiveCParser.RULE_designator);
    try {
        this.state = 1189;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1183;
            this.match(ObjectiveCParser.LBRACK);
            this.state = 1184;
            this.constantExpression();
            this.state = 1185;
            this.match(ObjectiveCParser.RBRACK);
            break;
        case ObjectiveCParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1187;
            this.match(ObjectiveCParser.DOT);
            this.state = 1188;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

TypeNameContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

TypeNameContext.prototype.blockType = function() {
    return this.getTypedRuleContext(BlockTypeContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitTypeName(this);
	}
};




ObjectiveCParser.TypeNameContext = TypeNameContext;

ObjectiveCParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ObjectiveCParser.RULE_typeName);
    try {
        this.state = 1196;
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1191;
            this.specifierQualifierList();
            this.state = 1193;
            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
            if(la_===1) {
                this.state = 1192;
                this.abstractDeclarator();

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1195;
            this.blockType();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_abstractDeclarator;
    return this;
}

AbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorContext.prototype.constructor = AbstractDeclaratorContext;

AbstractDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

AbstractDeclaratorContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

AbstractDeclaratorContext.prototype.abstractDeclaratorSuffix = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AbstractDeclaratorSuffixContext);
    } else {
        return this.getTypedRuleContext(AbstractDeclaratorSuffixContext,i);
    }
};

AbstractDeclaratorContext.prototype.constantExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstantExpressionContext);
    } else {
        return this.getTypedRuleContext(ConstantExpressionContext,i);
    }
};

AbstractDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAbstractDeclarator(this);
	}
};

AbstractDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAbstractDeclarator(this);
	}
};




ObjectiveCParser.AbstractDeclaratorContext = AbstractDeclaratorContext;

ObjectiveCParser.prototype.abstractDeclarator = function() {

    var localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ObjectiveCParser.RULE_abstractDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 1218;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.MUL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1198;
            this.pointer();
            this.state = 1199;
            this.abstractDeclarator();
            break;
        case ObjectiveCParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1201;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1202;
            this.abstractDeclarator();
            this.state = 1203;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1205; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1204;
            		this.abstractDeclaratorSuffix();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1207; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,147, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1214; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1209;
            		this.match(ObjectiveCParser.LBRACK);
            		this.state = 1211;
            		_la = this._input.LA(1);
            		if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ObjectiveCParser.HEX_LITERAL - 142)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 142)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 142)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 142)))) !== 0)) {
            		    this.state = 1210;
            		    this.constantExpression();
            		}

            		this.state = 1213;
            		this.match(ObjectiveCParser.RBRACK);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1216; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,149, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractDeclaratorSuffixContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_abstractDeclaratorSuffix;
    return this;
}

AbstractDeclaratorSuffixContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorSuffixContext.prototype.constructor = AbstractDeclaratorSuffixContext;

AbstractDeclaratorSuffixContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

AbstractDeclaratorSuffixContext.prototype.parameterDeclarationList = function() {
    return this.getTypedRuleContext(ParameterDeclarationListContext,0);
};

AbstractDeclaratorSuffixContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAbstractDeclaratorSuffix(this);
	}
};

AbstractDeclaratorSuffixContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAbstractDeclaratorSuffix(this);
	}
};




ObjectiveCParser.AbstractDeclaratorSuffixContext = AbstractDeclaratorSuffixContext;

ObjectiveCParser.prototype.abstractDeclaratorSuffix = function() {

    var localctx = new AbstractDeclaratorSuffixContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, ObjectiveCParser.RULE_abstractDeclaratorSuffix);
    var _la = 0; // Token type
    try {
        this.state = 1230;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.LBRACK:
            this.enterOuterAlt(localctx, 1);
            this.state = 1220;
            this.match(ObjectiveCParser.LBRACK);
            this.state = 1222;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 110)) & ~0x1f) == 0 && ((1 << (_la - 110)) & ((1 << (ObjectiveCParser.ADD - 110)) | (1 << (ObjectiveCParser.SUB - 110)) | (1 << (ObjectiveCParser.ASSIGNPA - 110)) | (1 << (ObjectiveCParser.GETTER - 110)) | (1 << (ObjectiveCParser.NONATOMIC - 110)) | (1 << (ObjectiveCParser.SETTER - 110)) | (1 << (ObjectiveCParser.STRONG - 110)) | (1 << (ObjectiveCParser.RETAIN - 110)) | (1 << (ObjectiveCParser.READONLY - 110)) | (1 << (ObjectiveCParser.READWRITE - 110)) | (1 << (ObjectiveCParser.WEAK - 110)) | (1 << (ObjectiveCParser.IDENTIFIER - 110)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 110)))) !== 0) || ((((_la - 142)) & ~0x1f) == 0 && ((1 << (_la - 142)) & ((1 << (ObjectiveCParser.HEX_LITERAL - 142)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 142)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 142)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 142)))) !== 0)) {
                this.state = 1221;
                this.constantExpression();
            }

            this.state = 1224;
            this.match(ObjectiveCParser.RBRACK);
            break;
        case ObjectiveCParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1225;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1227;
            _la = this._input.LA(1);
            if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (ObjectiveCParser.SELF - 25)) | (1 << (ObjectiveCParser.AUTO - 25)) | (1 << (ObjectiveCParser.BYCOPY - 25)) | (1 << (ObjectiveCParser.BYREF - 25)) | (1 << (ObjectiveCParser.CHAR - 25)) | (1 << (ObjectiveCParser.CONST - 25)) | (1 << (ObjectiveCParser.DOUBLE - 25)) | (1 << (ObjectiveCParser.ENUM - 25)) | (1 << (ObjectiveCParser.EXTERN - 25)) | (1 << (ObjectiveCParser.FLOAT - 25)) | (1 << (ObjectiveCParser.ID - 25)) | (1 << (ObjectiveCParser.IN - 25)) | (1 << (ObjectiveCParser.INOUT - 25)) | (1 << (ObjectiveCParser.INSTANCETYPE - 25)) | (1 << (ObjectiveCParser.INT - 25)) | (1 << (ObjectiveCParser.LONG - 25)) | (1 << (ObjectiveCParser.ONEWAY - 25)) | (1 << (ObjectiveCParser.OUT - 25)) | (1 << (ObjectiveCParser.REGISTER - 25)) | (1 << (ObjectiveCParser.SHORT - 25)))) !== 0) || ((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (ObjectiveCParser.SIGNED - 57)) | (1 << (ObjectiveCParser.STATIC - 57)) | (1 << (ObjectiveCParser.STRUCT - 57)) | (1 << (ObjectiveCParser.TYPEDEF - 57)) | (1 << (ObjectiveCParser.UNION - 57)) | (1 << (ObjectiveCParser.UNSIGNED - 57)) | (1 << (ObjectiveCParser.VOID - 57)) | (1 << (ObjectiveCParser.VOLATILE - 57)) | (1 << (ObjectiveCParser.NS_OPTIONS - 57)) | (1 << (ObjectiveCParser.NS_ENUM - 57)) | (1 << (ObjectiveCParser.WWEAK - 57)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 57)) | (1 << (ObjectiveCParser.WUNUSED - 57)) | (1 << (ObjectiveCParser.WDEPRECATED - 57)) | (1 << (ObjectiveCParser.WAUTORELEASING - 57)) | (1 << (ObjectiveCParser.TYPEOF - 57)) | (1 << (ObjectiveCParser.TYPEOF__ - 57)) | (1 << (ObjectiveCParser.TYPEOF____ - 57)) | (1 << (ObjectiveCParser.KINDOF__ - 57)) | (1 << (ObjectiveCParser.COVARIANT - 57)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 57)) | (1 << (ObjectiveCParser.NULLABLE - 57)) | (1 << (ObjectiveCParser.L_STR - 57)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0)) {
                this.state = 1226;
                this.parameterDeclarationList();
            }

            this.state = 1229;
            this.match(ObjectiveCParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_parameterDeclarationList;
    return this;
}

ParameterDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationListContext.prototype.constructor = ParameterDeclarationListContext;

ParameterDeclarationListContext.prototype.parameterDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterDeclarationContext);
    } else {
        return this.getTypedRuleContext(ParameterDeclarationContext,i);
    }
};

ParameterDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterParameterDeclarationList(this);
	}
};

ParameterDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitParameterDeclarationList(this);
	}
};




ObjectiveCParser.ParameterDeclarationListContext = ParameterDeclarationListContext;

ObjectiveCParser.prototype.parameterDeclarationList = function() {

    var localctx = new ParameterDeclarationListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ObjectiveCParser.RULE_parameterDeclarationList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.parameterDeclaration();
        this.state = 1237;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,154,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1233;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1234;
                this.parameterDeclaration(); 
            }
            this.state = 1239;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,154,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_parameterDeclaration;
    return this;
}

ParameterDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationContext.prototype.constructor = ParameterDeclarationContext;

ParameterDeclarationContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

ParameterDeclarationContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

ParameterDeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterParameterDeclaration(this);
	}
};

ParameterDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitParameterDeclaration(this);
	}
};




ObjectiveCParser.ParameterDeclarationContext = ParameterDeclarationContext;

ObjectiveCParser.prototype.parameterDeclaration = function() {

    var localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ObjectiveCParser.RULE_parameterDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1241; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1240;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1243; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,155, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
        this.state = 1249;
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1246;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)) | (1 << (ObjectiveCParser.LPAREN - 71)))) !== 0) || ((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (ObjectiveCParser.MUL - 112)) | (1 << (ObjectiveCParser.ASSIGNPA - 112)) | (1 << (ObjectiveCParser.GETTER - 112)) | (1 << (ObjectiveCParser.NONATOMIC - 112)) | (1 << (ObjectiveCParser.SETTER - 112)) | (1 << (ObjectiveCParser.STRONG - 112)) | (1 << (ObjectiveCParser.RETAIN - 112)) | (1 << (ObjectiveCParser.READONLY - 112)) | (1 << (ObjectiveCParser.READWRITE - 112)) | (1 << (ObjectiveCParser.WEAK - 112)) | (1 << (ObjectiveCParser.IDENTIFIER - 112)))) !== 0)) {
                this.state = 1245;
                this.declarator();
            }

            break;

        case 2:
            this.state = 1248;
            this.abstractDeclarator();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_statementList;
    return this;
}

StatementListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementListContext.prototype.constructor = StatementListContext;

StatementListContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

StatementListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStatementList(this);
	}
};

StatementListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStatementList(this);
	}
};




ObjectiveCParser.StatementListContext = StatementListContext;

ObjectiveCParser.prototype.statementList = function() {

    var localctx = new StatementListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ObjectiveCParser.RULE_statementList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 1251;
        		this.statement();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 1254; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,158, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledStatement = function() {
    return this.getTypedRuleContext(LabeledStatementContext,0);
};

StatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

StatementContext.prototype.selectionStatement = function() {
    return this.getTypedRuleContext(SelectionStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.jumpStatement = function() {
    return this.getTypedRuleContext(JumpStatementContext,0);
};

StatementContext.prototype.synchronizedStatement = function() {
    return this.getTypedRuleContext(SynchronizedStatementContext,0);
};

StatementContext.prototype.autoreleaseStatement = function() {
    return this.getTypedRuleContext(AutoreleaseStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.tryBlock = function() {
    return this.getTypedRuleContext(TryBlockContext,0);
};

StatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStatement(this);
	}
};




ObjectiveCParser.StatementContext = StatementContext;

ObjectiveCParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ObjectiveCParser.RULE_statement);
    try {
        this.state = 1297;
        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1256;
            this.labeledStatement();
            this.state = 1258;
            var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
            if(la_===1) {
                this.state = 1257;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1260;
            this.compoundStatement();
            this.state = 1262;
            var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
            if(la_===1) {
                this.state = 1261;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1264;
            this.selectionStatement();
            this.state = 1266;
            var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
            if(la_===1) {
                this.state = 1265;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1268;
            this.iterationStatement();
            this.state = 1270;
            var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
            if(la_===1) {
                this.state = 1269;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1272;
            this.jumpStatement();
            this.state = 1274;
            var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
            if(la_===1) {
                this.state = 1273;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1276;
            this.synchronizedStatement();
            this.state = 1278;
            var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
            if(la_===1) {
                this.state = 1277;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1280;
            this.autoreleaseStatement();
            this.state = 1282;
            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
            if(la_===1) {
                this.state = 1281;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 1284;
            this.throwStatement();
            this.state = 1286;
            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
            if(la_===1) {
                this.state = 1285;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 1288;
            this.tryBlock();
            this.state = 1290;
            var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
            if(la_===1) {
                this.state = 1289;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 1292;
            this.expression();
            this.state = 1294;
            var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
            if(la_===1) {
                this.state = 1293;
                this.match(ObjectiveCParser.SEMI);

            }
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 1296;
            this.match(ObjectiveCParser.SEMI);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_labeledStatement;
    return this;
}

LabeledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

LabeledStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LabeledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStatementContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

LabeledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterLabeledStatement(this);
	}
};

LabeledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitLabeledStatement(this);
	}
};




ObjectiveCParser.LabeledStatementContext = LabeledStatementContext;

ObjectiveCParser.prototype.labeledStatement = function() {

    var localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ObjectiveCParser.RULE_labeledStatement);
    try {
        this.state = 1317;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.WWEAK:
        case ObjectiveCParser.WUNUSED:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.TYPEOF__:
        case ObjectiveCParser.TYPEOF____:
        case ObjectiveCParser.KINDOF__:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.ASSIGNPA:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1299;
            this.identifier();
            this.state = 1300;
            this.match(ObjectiveCParser.COLON);
            this.state = 1301;
            this.statement();
            break;
        case ObjectiveCParser.CASE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1303;
            this.match(ObjectiveCParser.CASE);
            this.state = 1309;
            switch(this._input.LA(1)) {
            case ObjectiveCParser.SELF:
            case ObjectiveCParser.ID:
            case ObjectiveCParser.WWEAK:
            case ObjectiveCParser.WUNUSED:
            case ObjectiveCParser.TYPEOF:
            case ObjectiveCParser.TYPEOF__:
            case ObjectiveCParser.TYPEOF____:
            case ObjectiveCParser.KINDOF__:
            case ObjectiveCParser.COVARIANT:
            case ObjectiveCParser.CONTRAVARIANT:
            case ObjectiveCParser.NULLABLE:
            case ObjectiveCParser.L_STR:
            case ObjectiveCParser.ADD:
            case ObjectiveCParser.SUB:
            case ObjectiveCParser.ASSIGNPA:
            case ObjectiveCParser.GETTER:
            case ObjectiveCParser.NONATOMIC:
            case ObjectiveCParser.SETTER:
            case ObjectiveCParser.STRONG:
            case ObjectiveCParser.RETAIN:
            case ObjectiveCParser.READONLY:
            case ObjectiveCParser.READWRITE:
            case ObjectiveCParser.WEAK:
            case ObjectiveCParser.IDENTIFIER:
            case ObjectiveCParser.CHARACTER_LITERAL:
            case ObjectiveCParser.HEX_LITERAL:
            case ObjectiveCParser.DECIMAL_LITERAL:
            case ObjectiveCParser.OCTAL_LITERAL:
            case ObjectiveCParser.FLOATING_POINT_LITERAL:
                this.state = 1304;
                this.constantExpression();
                break;
            case ObjectiveCParser.LPAREN:
                this.state = 1305;
                this.match(ObjectiveCParser.LPAREN);
                this.state = 1306;
                this.constantExpression();
                this.state = 1307;
                this.match(ObjectiveCParser.RPAREN);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1311;
            this.match(ObjectiveCParser.COLON);
            this.state = 1312;
            this.statement();
            break;
        case ObjectiveCParser.DEFAULT:
            this.enterOuterAlt(localctx, 3);
            this.state = 1314;
            this.match(ObjectiveCParser.DEFAULT);
            this.state = 1315;
            this.match(ObjectiveCParser.COLON);
            this.state = 1316;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.declaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationContext);
    } else {
        return this.getTypedRuleContext(DeclarationContext,i);
    }
};

CompoundStatementContext.prototype.statementList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementListContext);
    } else {
        return this.getTypedRuleContext(StatementListContext,i);
    }
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCompoundStatement(this);
	}
};




ObjectiveCParser.CompoundStatementContext = CompoundStatementContext;

ObjectiveCParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ObjectiveCParser.RULE_compoundStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1319;
        this.match(ObjectiveCParser.LBRACE);
        this.state = 1324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.AUTORELEASEPOOL) | (1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SYNCHRONIZED) | (1 << ObjectiveCParser.THROW) | (1 << ObjectiveCParser.TRY) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF) | (1 << ObjectiveCParser.AUTO) | (1 << ObjectiveCParser.BREAK) | (1 << ObjectiveCParser.BYCOPY) | (1 << ObjectiveCParser.BYREF))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ObjectiveCParser.CASE - 32)) | (1 << (ObjectiveCParser.CHAR - 32)) | (1 << (ObjectiveCParser.CONST - 32)) | (1 << (ObjectiveCParser.CONTINUE - 32)) | (1 << (ObjectiveCParser.DEFAULT - 32)) | (1 << (ObjectiveCParser.DO - 32)) | (1 << (ObjectiveCParser.DOUBLE - 32)) | (1 << (ObjectiveCParser.ENUM - 32)) | (1 << (ObjectiveCParser.EXTERN - 32)) | (1 << (ObjectiveCParser.FLOAT - 32)) | (1 << (ObjectiveCParser.FOR - 32)) | (1 << (ObjectiveCParser.ID - 32)) | (1 << (ObjectiveCParser.IF - 32)) | (1 << (ObjectiveCParser.IN - 32)) | (1 << (ObjectiveCParser.INOUT - 32)) | (1 << (ObjectiveCParser.INSTANCETYPE - 32)) | (1 << (ObjectiveCParser.GOTO - 32)) | (1 << (ObjectiveCParser.INT - 32)) | (1 << (ObjectiveCParser.LONG - 32)) | (1 << (ObjectiveCParser.ONEWAY - 32)) | (1 << (ObjectiveCParser.OUT - 32)) | (1 << (ObjectiveCParser.REGISTER - 32)) | (1 << (ObjectiveCParser.RETURN - 32)) | (1 << (ObjectiveCParser.SHORT - 32)) | (1 << (ObjectiveCParser.SIGNED - 32)) | (1 << (ObjectiveCParser.SIZEOF - 32)) | (1 << (ObjectiveCParser.STATIC - 32)) | (1 << (ObjectiveCParser.STRUCT - 32)) | (1 << (ObjectiveCParser.SWITCH - 32)) | (1 << (ObjectiveCParser.TYPEDEF - 32)) | (1 << (ObjectiveCParser.UNION - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ObjectiveCParser.UNSIGNED - 64)) | (1 << (ObjectiveCParser.VA_ARG - 64)) | (1 << (ObjectiveCParser.VOID - 64)) | (1 << (ObjectiveCParser.VOLATILE - 64)) | (1 << (ObjectiveCParser.WHILE - 64)) | (1 << (ObjectiveCParser.NS_OPTIONS - 64)) | (1 << (ObjectiveCParser.NS_ENUM - 64)) | (1 << (ObjectiveCParser.WWEAK - 64)) | (1 << (ObjectiveCParser.WUNSAFE_UNRETAINED - 64)) | (1 << (ObjectiveCParser.WUNUSED - 64)) | (1 << (ObjectiveCParser.WDEPRECATED - 64)) | (1 << (ObjectiveCParser.WAUTORELEASING - 64)) | (1 << (ObjectiveCParser.TYPEOF - 64)) | (1 << (ObjectiveCParser.TYPEOF__ - 64)) | (1 << (ObjectiveCParser.TYPEOF____ - 64)) | (1 << (ObjectiveCParser.KINDOF__ - 64)) | (1 << (ObjectiveCParser.COVARIANT - 64)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 64)) | (1 << (ObjectiveCParser.NULLABLE - 64)) | (1 << (ObjectiveCParser.L_STR - 64)) | (1 << (ObjectiveCParser.LPAREN - 64)) | (1 << (ObjectiveCParser.LBRACE - 64)) | (1 << (ObjectiveCParser.LBRACK - 64)) | (1 << (ObjectiveCParser.SEMI - 64)) | (1 << (ObjectiveCParser.AT - 64)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ObjectiveCParser.BANG - 98)) | (1 << (ObjectiveCParser.TILDE - 98)) | (1 << (ObjectiveCParser.INC - 98)) | (1 << (ObjectiveCParser.DEC - 98)) | (1 << (ObjectiveCParser.ADD - 98)) | (1 << (ObjectiveCParser.SUB - 98)) | (1 << (ObjectiveCParser.MUL - 98)) | (1 << (ObjectiveCParser.BITAND - 98)) | (1 << (ObjectiveCParser.CARET - 98)) | (1 << (ObjectiveCParser.ASSIGNPA - 98)))) !== 0) || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (ObjectiveCParser.GETTER - 130)) | (1 << (ObjectiveCParser.NONATOMIC - 130)) | (1 << (ObjectiveCParser.SETTER - 130)) | (1 << (ObjectiveCParser.STRONG - 130)) | (1 << (ObjectiveCParser.RETAIN - 130)) | (1 << (ObjectiveCParser.READONLY - 130)) | (1 << (ObjectiveCParser.READWRITE - 130)) | (1 << (ObjectiveCParser.WEAK - 130)) | (1 << (ObjectiveCParser.IDENTIFIER - 130)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 130)) | (1 << (ObjectiveCParser.STRING - 130)) | (1 << (ObjectiveCParser.QUOTE_STRING - 130)) | (1 << (ObjectiveCParser.HEX_LITERAL - 130)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 130)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 130)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 130)))) !== 0)) {
            this.state = 1322;
            var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1320;
                this.declaration();
                break;

            case 2:
                this.state = 1321;
                this.statementList();
                break;

            }
            this.state = 1326;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1327;
        this.match(ObjectiveCParser.RBRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_selectionStatement;
    return this;
}

SelectionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionStatementContext.prototype.constructor = SelectionStatementContext;

SelectionStatementContext.prototype.IF = function() {
    return this.getToken(ObjectiveCParser.IF, 0);
};

SelectionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectionStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionStatementContext.prototype.ELSE = function() {
    return this.getToken(ObjectiveCParser.ELSE, 0);
};

SelectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterSelectionStatement(this);
	}
};

SelectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitSelectionStatement(this);
	}
};




ObjectiveCParser.SelectionStatementContext = SelectionStatementContext;

ObjectiveCParser.prototype.selectionStatement = function() {

    var localctx = new SelectionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ObjectiveCParser.RULE_selectionStatement);
    try {
        this.state = 1344;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.IF:
            this.enterOuterAlt(localctx, 1);
            this.state = 1329;
            this.match(ObjectiveCParser.IF);
            this.state = 1330;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1331;
            this.expression();
            this.state = 1332;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1333;
            this.statement();
            this.state = 1336;
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            if(la_===1) {
                this.state = 1334;
                this.match(ObjectiveCParser.ELSE);
                this.state = 1335;
                this.statement();

            }
            break;
        case ObjectiveCParser.SWITCH:
            this.enterOuterAlt(localctx, 2);
            this.state = 1338;
            this.match(ObjectiveCParser.SWITCH);
            this.state = 1339;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1340;
            this.expression();
            this.state = 1341;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1342;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForInStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_forInStatement;
    return this;
}

ForInStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForInStatementContext.prototype.constructor = ForInStatementContext;

ForInStatementContext.prototype.typeVariableDeclarator = function() {
    return this.getTypedRuleContext(TypeVariableDeclaratorContext,0);
};

ForInStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForInStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForInStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterForInStatement(this);
	}
};

ForInStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitForInStatement(this);
	}
};




ObjectiveCParser.ForInStatementContext = ForInStatementContext;

ObjectiveCParser.prototype.forInStatement = function() {

    var localctx = new ForInStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ObjectiveCParser.RULE_forInStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1346;
        this.match(ObjectiveCParser.FOR);
        this.state = 1347;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 1348;
        this.typeVariableDeclarator();
        this.state = 1349;
        this.match(ObjectiveCParser.IN);
        this.state = 1351;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
            this.state = 1350;
            this.expression();
        }

        this.state = 1353;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 1354;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

ForStatementContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitForStatement(this);
	}
};




ObjectiveCParser.ForStatementContext = ForStatementContext;

ObjectiveCParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ObjectiveCParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1356;
        this.match(ObjectiveCParser.FOR);
        this.state = 1357;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 1366;
        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
        if(la_===1) {
            this.state = 1359; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1358;
            		this.declarationSpecifier();
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1361; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,177, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            this.state = 1363;
            this.initDeclaratorList();

        } else if(la_===2) {
            this.state = 1365;
            this.expression();

        }
        this.state = 1368;
        this.match(ObjectiveCParser.SEMI);
        this.state = 1370;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
            this.state = 1369;
            this.expression();
        }

        this.state = 1372;
        this.match(ObjectiveCParser.SEMI);
        this.state = 1374;
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
            this.state = 1373;
            this.expression();
        }

        this.state = 1376;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 1377;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitWhileStatement(this);
	}
};




ObjectiveCParser.WhileStatementContext = WhileStatementContext;

ObjectiveCParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ObjectiveCParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1379;
        this.match(ObjectiveCParser.WHILE);
        this.state = 1380;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 1381;
        this.expression();
        this.state = 1382;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 1383;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_doStatement;
    return this;
}

DoStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoStatementContext.prototype.constructor = DoStatementContext;

DoStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDoStatement(this);
	}
};

DoStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDoStatement(this);
	}
};




ObjectiveCParser.DoStatementContext = DoStatementContext;

ObjectiveCParser.prototype.doStatement = function() {

    var localctx = new DoStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ObjectiveCParser.RULE_doStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1385;
        this.match(ObjectiveCParser.DO);
        this.state = 1386;
        this.statement();
        this.state = 1387;
        this.match(ObjectiveCParser.WHILE);
        this.state = 1388;
        this.match(ObjectiveCParser.LPAREN);
        this.state = 1389;
        this.expression();
        this.state = 1390;
        this.match(ObjectiveCParser.RPAREN);
        this.state = 1391;
        this.match(ObjectiveCParser.SEMI);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

IterationStatementContext.prototype.doStatement = function() {
    return this.getTypedRuleContext(DoStatementContext,0);
};

IterationStatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

IterationStatementContext.prototype.forInStatement = function() {
    return this.getTypedRuleContext(ForInStatementContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitIterationStatement(this);
	}
};




ObjectiveCParser.IterationStatementContext = IterationStatementContext;

ObjectiveCParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ObjectiveCParser.RULE_iterationStatement);
    try {
        this.state = 1397;
        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1393;
            this.whileStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1394;
            this.doStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1395;
            this.forStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1396;
            this.forInStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function JumpStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_jumpStatement;
    return this;
}

JumpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStatementContext.prototype.constructor = JumpStatementContext;

JumpStatementContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

JumpStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterJumpStatement(this);
	}
};

JumpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitJumpStatement(this);
	}
};




ObjectiveCParser.JumpStatementContext = JumpStatementContext;

ObjectiveCParser.prototype.jumpStatement = function() {

    var localctx = new JumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ObjectiveCParser.RULE_jumpStatement);
    var _la = 0; // Token type
    try {
        this.state = 1412;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.GOTO:
            this.enterOuterAlt(localctx, 1);
            this.state = 1399;
            this.match(ObjectiveCParser.GOTO);
            this.state = 1400;
            this.identifier();
            this.state = 1401;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.CONTINUE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1403;
            this.match(ObjectiveCParser.CONTINUE);
            this.state = 1404;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.BREAK:
            this.enterOuterAlt(localctx, 3);
            this.state = 1405;
            this.match(ObjectiveCParser.BREAK);
            this.state = 1406;
            this.match(ObjectiveCParser.SEMI);
            break;
        case ObjectiveCParser.RETURN:
            this.enterOuterAlt(localctx, 4);
            this.state = 1407;
            this.match(ObjectiveCParser.RETURN);
            this.state = 1409;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
                this.state = 1408;
                this.expression();
            }

            this.state = 1411;
            this.match(ObjectiveCParser.SEMI);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExpressionContext);
    } else {
        return this.getTypedRuleContext(AssignmentExpressionContext,i);
    }
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitExpression(this);
	}
};




ObjectiveCParser.ExpressionContext = ExpressionContext;

ObjectiveCParser.prototype.expression = function() {

    var localctx = new ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ObjectiveCParser.RULE_expression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1414;
        this.assignmentExpression();
        this.state = 1419;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1415;
                this.match(ObjectiveCParser.COMMA);
                this.state = 1416;
                this.assignmentExpression(); 
            }
            this.state = 1421;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

AssignmentExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

AssignmentExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

AssignmentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAssignmentExpression(this);
	}
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAssignmentExpression(this);
	}
};




ObjectiveCParser.AssignmentExpressionContext = AssignmentExpressionContext;

ObjectiveCParser.prototype.assignmentExpression = function() {

    var localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ObjectiveCParser.RULE_assignmentExpression);
    try {
        this.state = 1427;
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1422;
            this.conditionalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1423;
            this.unaryExpression();
            this.state = 1424;
            this.assignmentOperator();
            this.state = 1425;
            this.assignmentExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.binaryExpression = function() {
    return this.getTypedRuleContext(BinaryExpressionContext,0);
};

ConditionalExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitConditionalExpression(this);
	}
};




ObjectiveCParser.ConditionalExpressionContext = ConditionalExpressionContext;

ObjectiveCParser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, ObjectiveCParser.RULE_conditionalExpression);
    var _la = 0; // Token type
    try {
        this.state = 1438;
        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1429;
            this.binaryExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1430;
            this.binaryExpression(0);
            this.state = 1431;
            this.match(ObjectiveCParser.QUESTION);
            this.state = 1433;
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
                this.state = 1432;
                this.expression();
            }

            this.state = 1435;
            this.match(ObjectiveCParser.COLON);
            this.state = 1436;
            this.conditionalExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BinaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_binaryExpression;
    return this;
}

BinaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BinaryExpressionContext.prototype.constructor = BinaryExpressionContext;

BinaryExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

BinaryExpressionContext.prototype.binaryExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BinaryExpressionContext);
    } else {
        return this.getTypedRuleContext(BinaryExpressionContext,i);
    }
};

BinaryExpressionContext.prototype.DIV = function() {
    return this.getToken(ObjectiveCParser.DIV, 0);
};

BinaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterBinaryExpression(this);
	}
};

BinaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitBinaryExpression(this);
	}
};



ObjectiveCParser.prototype.binaryExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BinaryExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 236;
    this.enterRecursionRule(localctx, 236, ObjectiveCParser.RULE_binaryExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1441;
        this.castExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1481;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1479;
                var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1443;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1444;
                    _la = this._input.LA(1);
                    if(!(((((_la - 112)) & ~0x1f) == 0 && ((1 << (_la - 112)) & ((1 << (ObjectiveCParser.MUL - 112)) | (1 << (ObjectiveCParser.DIV - 112)) | (1 << (ObjectiveCParser.MOD - 112)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1445;
                    this.binaryExpression(11);
                    break;

                case 2:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1446;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1447;
                    _la = this._input.LA(1);
                    if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1448;
                    this.binaryExpression(10);
                    break;

                case 3:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1449;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1455;
                    var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1450;
                        this.match(ObjectiveCParser.LT);
                        this.state = 1451;
                        this.match(ObjectiveCParser.LT);
                        break;

                    case 2:
                        this.state = 1452;
                        this.match(ObjectiveCParser.GT);
                        this.state = 1453;
                        this.match(ObjectiveCParser.GT);
                        break;

                    case 3:
                        this.state = 1454;
                        this.match(ObjectiveCParser.LT);
                        break;

                    }
                    this.state = 1457;
                    this.binaryExpression(9);
                    break;

                case 4:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1458;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1459;
                    _la = this._input.LA(1);
                    if(!(((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ObjectiveCParser.GT - 96)) | (1 << (ObjectiveCParser.LE - 96)) | (1 << (ObjectiveCParser.GE - 96)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1460;
                    this.binaryExpression(8);
                    break;

                case 5:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1461;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1462;
                    _la = this._input.LA(1);
                    if(!(_la===ObjectiveCParser.EQUAL || _la===ObjectiveCParser.NOTEQUAL)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1463;
                    this.binaryExpression(7);
                    break;

                case 6:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1464;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1465;
                    this.match(ObjectiveCParser.BITAND);
                    this.state = 1466;
                    this.binaryExpression(6);
                    break;

                case 7:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1467;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1468;
                    this.match(ObjectiveCParser.CARET);
                    this.state = 1469;
                    this.binaryExpression(5);
                    break;

                case 8:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1470;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1471;
                    this.match(ObjectiveCParser.BITOR);
                    this.state = 1472;
                    this.binaryExpression(4);
                    break;

                case 9:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1473;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 1474;
                    this.match(ObjectiveCParser.AND);
                    this.state = 1475;
                    this.binaryExpression(3);
                    break;

                case 10:
                    localctx = new BinaryExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, ObjectiveCParser.RULE_binaryExpression);
                    this.state = 1476;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 1477;
                    this.match(ObjectiveCParser.OR);
                    this.state = 1478;
                    this.binaryExpression(2);
                    break;

                } 
            }
            this.state = 1483;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

CastExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

CastExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitCastExpression(this);
	}
};




ObjectiveCParser.CastExpressionContext = CastExpressionContext;

ObjectiveCParser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, ObjectiveCParser.RULE_castExpression);
    try {
        this.state = 1490;
        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1484;
            this.match(ObjectiveCParser.LPAREN);
            this.state = 1485;
            this.typeName();
            this.state = 1486;
            this.match(ObjectiveCParser.RPAREN);
            this.state = 1487;
            this.castExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1489;
            this.unaryExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;


AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitAssignmentOperator(this);
	}
};




ObjectiveCParser.AssignmentOperatorContext = AssignmentOperatorContext;

ObjectiveCParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, ObjectiveCParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1492;
        _la = this._input.LA(1);
        if(!(((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (ObjectiveCParser.ASSIGN - 95)) | (1 << (ObjectiveCParser.ADD_ASSIGN - 95)) | (1 << (ObjectiveCParser.SUB_ASSIGN - 95)) | (1 << (ObjectiveCParser.MUL_ASSIGN - 95)) | (1 << (ObjectiveCParser.DIV_ASSIGN - 95)) | (1 << (ObjectiveCParser.AND_ASSIGN - 95)) | (1 << (ObjectiveCParser.OR_ASSIGN - 95)) | (1 << (ObjectiveCParser.XOR_ASSIGN - 95)) | (1 << (ObjectiveCParser.MOD_ASSIGN - 95)) | (1 << (ObjectiveCParser.LSHIFT_ASSIGN - 95)))) !== 0) || _la===ObjectiveCParser.RSHIFT_ASSIGN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ConstantExpressionContext.prototype.constant = function() {
    return this.getTypedRuleContext(ConstantContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitConstantExpression(this);
	}
};




ObjectiveCParser.ConstantExpressionContext = ConstantExpressionContext;

ObjectiveCParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, ObjectiveCParser.RULE_constantExpression);
    try {
        this.state = 1496;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.SELF:
        case ObjectiveCParser.ID:
        case ObjectiveCParser.WWEAK:
        case ObjectiveCParser.WUNUSED:
        case ObjectiveCParser.TYPEOF:
        case ObjectiveCParser.TYPEOF__:
        case ObjectiveCParser.TYPEOF____:
        case ObjectiveCParser.KINDOF__:
        case ObjectiveCParser.COVARIANT:
        case ObjectiveCParser.CONTRAVARIANT:
        case ObjectiveCParser.NULLABLE:
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.ASSIGNPA:
        case ObjectiveCParser.GETTER:
        case ObjectiveCParser.NONATOMIC:
        case ObjectiveCParser.SETTER:
        case ObjectiveCParser.STRONG:
        case ObjectiveCParser.RETAIN:
        case ObjectiveCParser.READONLY:
        case ObjectiveCParser.READWRITE:
        case ObjectiveCParser.WEAK:
        case ObjectiveCParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 1494;
            this.identifier();
            break;
        case ObjectiveCParser.ADD:
        case ObjectiveCParser.SUB:
        case ObjectiveCParser.CHARACTER_LITERAL:
        case ObjectiveCParser.HEX_LITERAL:
        case ObjectiveCParser.DECIMAL_LITERAL:
        case ObjectiveCParser.OCTAL_LITERAL:
        case ObjectiveCParser.FLOATING_POINT_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 1495;
            this.constant();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

UnaryExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UnaryExpressionContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitUnaryExpression(this);
	}
};




ObjectiveCParser.UnaryExpressionContext = UnaryExpressionContext;

ObjectiveCParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, ObjectiveCParser.RULE_unaryExpression);
    try {
        this.state = 1518;
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1498;
            this.postfixExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1499;
            this.match(ObjectiveCParser.INC);
            this.state = 1500;
            this.unaryExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1501;
            this.match(ObjectiveCParser.DEC);
            this.state = 1502;
            this.unaryExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1503;
            this.unaryOperator();
            this.state = 1504;
            this.castExpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1506;
            this.match(ObjectiveCParser.SIZEOF);
            this.state = 1512;
            var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1507;
                this.match(ObjectiveCParser.LPAREN);
                this.state = 1508;
                this.typeName();
                this.state = 1509;
                this.match(ObjectiveCParser.RPAREN);
                break;

            case 2:
                this.state = 1511;
                this.unaryExpression();
                break;

            }
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1514;
            this.match(ObjectiveCParser.LBRACE);
            this.state = 1515;
            this.enumeratorList();
            this.state = 1516;
            this.match(ObjectiveCParser.RBRACE);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;


UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitUnaryOperator(this);
	}
};




ObjectiveCParser.UnaryOperatorContext = UnaryOperatorContext;

ObjectiveCParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, ObjectiveCParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1520;
        _la = this._input.LA(1);
        if(!(((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ObjectiveCParser.BANG - 98)) | (1 << (ObjectiveCParser.TILDE - 98)) | (1 << (ObjectiveCParser.ADD - 98)) | (1 << (ObjectiveCParser.SUB - 98)) | (1 << (ObjectiveCParser.MUL - 98)) | (1 << (ObjectiveCParser.BITAND - 98)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

PostfixExpressionContext.prototype.dataMemberAccess = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataMemberAccessContext);
    } else {
        return this.getTypedRuleContext(DataMemberAccessContext,i);
    }
};

PostfixExpressionContext.prototype.argumentExpressionList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ArgumentExpressionListContext);
    } else {
        return this.getTypedRuleContext(ArgumentExpressionListContext,i);
    }
};

PostfixExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitPostfixExpression(this);
	}
};




ObjectiveCParser.PostfixExpressionContext = PostfixExpressionContext;

ObjectiveCParser.prototype.postfixExpression = function() {

    var localctx = new PostfixExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, ObjectiveCParser.RULE_postfixExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1522;
        this.primaryExpression();
        this.state = 1538;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,197,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1536;
                switch(this._input.LA(1)) {
                case ObjectiveCParser.LBRACK:
                    this.state = 1523;
                    this.match(ObjectiveCParser.LBRACK);
                    this.state = 1524;
                    this.expression();
                    this.state = 1525;
                    this.match(ObjectiveCParser.RBRACK);
                    break;
                case ObjectiveCParser.LPAREN:
                    this.state = 1527;
                    this.match(ObjectiveCParser.LPAREN);
                    this.state = 1529;
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ObjectiveCParser.ENCODE) | (1 << ObjectiveCParser.PROTOCOL) | (1 << ObjectiveCParser.SELECTOR) | (1 << ObjectiveCParser.SUPER) | (1 << ObjectiveCParser.SELF))) !== 0) || ((((_la - 44)) & ~0x1f) == 0 && ((1 << (_la - 44)) & ((1 << (ObjectiveCParser.ID - 44)) | (1 << (ObjectiveCParser.SIZEOF - 44)) | (1 << (ObjectiveCParser.VA_ARG - 44)) | (1 << (ObjectiveCParser.WWEAK - 44)) | (1 << (ObjectiveCParser.WUNUSED - 44)))) !== 0) || ((((_la - 76)) & ~0x1f) == 0 && ((1 << (_la - 76)) & ((1 << (ObjectiveCParser.TYPEOF - 76)) | (1 << (ObjectiveCParser.TYPEOF__ - 76)) | (1 << (ObjectiveCParser.TYPEOF____ - 76)) | (1 << (ObjectiveCParser.KINDOF__ - 76)) | (1 << (ObjectiveCParser.COVARIANT - 76)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 76)) | (1 << (ObjectiveCParser.NULLABLE - 76)) | (1 << (ObjectiveCParser.L_STR - 76)) | (1 << (ObjectiveCParser.LPAREN - 76)) | (1 << (ObjectiveCParser.LBRACE - 76)) | (1 << (ObjectiveCParser.LBRACK - 76)) | (1 << (ObjectiveCParser.AT - 76)) | (1 << (ObjectiveCParser.BANG - 76)) | (1 << (ObjectiveCParser.TILDE - 76)))) !== 0) || ((((_la - 108)) & ~0x1f) == 0 && ((1 << (_la - 108)) & ((1 << (ObjectiveCParser.INC - 108)) | (1 << (ObjectiveCParser.DEC - 108)) | (1 << (ObjectiveCParser.ADD - 108)) | (1 << (ObjectiveCParser.SUB - 108)) | (1 << (ObjectiveCParser.MUL - 108)) | (1 << (ObjectiveCParser.BITAND - 108)) | (1 << (ObjectiveCParser.CARET - 108)) | (1 << (ObjectiveCParser.ASSIGNPA - 108)) | (1 << (ObjectiveCParser.GETTER - 108)) | (1 << (ObjectiveCParser.NONATOMIC - 108)) | (1 << (ObjectiveCParser.SETTER - 108)) | (1 << (ObjectiveCParser.STRONG - 108)) | (1 << (ObjectiveCParser.RETAIN - 108)) | (1 << (ObjectiveCParser.READONLY - 108)) | (1 << (ObjectiveCParser.READWRITE - 108)) | (1 << (ObjectiveCParser.WEAK - 108)) | (1 << (ObjectiveCParser.IDENTIFIER - 108)) | (1 << (ObjectiveCParser.CHARACTER_LITERAL - 108)))) !== 0) || ((((_la - 140)) & ~0x1f) == 0 && ((1 << (_la - 140)) & ((1 << (ObjectiveCParser.STRING - 140)) | (1 << (ObjectiveCParser.QUOTE_STRING - 140)) | (1 << (ObjectiveCParser.HEX_LITERAL - 140)) | (1 << (ObjectiveCParser.DECIMAL_LITERAL - 140)) | (1 << (ObjectiveCParser.OCTAL_LITERAL - 140)) | (1 << (ObjectiveCParser.FLOATING_POINT_LITERAL - 140)))) !== 0)) {
                        this.state = 1528;
                        this.argumentExpressionList();
                    }

                    this.state = 1531;
                    this.match(ObjectiveCParser.RPAREN);
                    break;
                case ObjectiveCParser.DOT:
                case ObjectiveCParser.STRUCTACCESS:
                    this.state = 1532;
                    this.dataMemberAccess();
                    break;
                case ObjectiveCParser.INC:
                    this.state = 1533;
                    this.match(ObjectiveCParser.INC);
                    break;
                case ObjectiveCParser.DEC:
                    this.state = 1534;
                    this.match(ObjectiveCParser.DEC);
                    break;
                case ObjectiveCParser.MUL:
                    this.state = 1535;
                    this.match(ObjectiveCParser.MUL);
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1540;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,197,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataMemberAccessContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_dataMemberAccess;
    return this;
}

DataMemberAccessContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataMemberAccessContext.prototype.constructor = DataMemberAccessContext;

DataMemberAccessContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DataMemberAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterDataMemberAccess(this);
	}
};

DataMemberAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitDataMemberAccess(this);
	}
};




ObjectiveCParser.DataMemberAccessContext = DataMemberAccessContext;

ObjectiveCParser.prototype.dataMemberAccess = function() {

    var localctx = new DataMemberAccessContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, ObjectiveCParser.RULE_dataMemberAccess);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1541;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.DOT || _la===ObjectiveCParser.STRUCTACCESS)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
        this.state = 1542;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgumentExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_argumentExpressionList;
    return this;
}

ArgumentExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionListContext.prototype.constructor = ArgumentExpressionListContext;

ArgumentExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ArgumentExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterArgumentExpressionList(this);
	}
};

ArgumentExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitArgumentExpressionList(this);
	}
};




ObjectiveCParser.ArgumentExpressionListContext = ArgumentExpressionListContext;

ObjectiveCParser.prototype.argumentExpressionList = function() {

    var localctx = new ArgumentExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, ObjectiveCParser.RULE_argumentExpressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1544;
        this.expression();
        this.state = 1549;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ObjectiveCParser.COMMA) {
            this.state = 1545;
            this.match(ObjectiveCParser.COMMA);
            this.state = 1546;
            this.expression();
            this.state = 1551;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_constant;
    return this;
}

ConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantContext.prototype.constructor = ConstantContext;

ConstantContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ObjectiveCParser.DECIMAL_LITERAL, 0);
};

ConstantContext.prototype.HEX_LITERAL = function() {
    return this.getToken(ObjectiveCParser.HEX_LITERAL, 0);
};

ConstantContext.prototype.OCTAL_LITERAL = function() {
    return this.getToken(ObjectiveCParser.OCTAL_LITERAL, 0);
};

ConstantContext.prototype.CHARACTER_LITERAL = function() {
    return this.getToken(ObjectiveCParser.CHARACTER_LITERAL, 0);
};

ConstantContext.prototype.FLOATING_POINT_LITERAL = function() {
    return this.getToken(ObjectiveCParser.FLOATING_POINT_LITERAL, 0);
};

ConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterConstant(this);
	}
};

ConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitConstant(this);
	}
};




ObjectiveCParser.ConstantContext = ConstantContext;

ObjectiveCParser.prototype.constant = function() {

    var localctx = new ConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, ObjectiveCParser.RULE_constant);
    var _la = 0; // Token type
    try {
        this.state = 1563;
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1553;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
                this.state = 1552;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1555;
            this.match(ObjectiveCParser.DECIMAL_LITERAL);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1556;
            this.match(ObjectiveCParser.HEX_LITERAL);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1557;
            this.match(ObjectiveCParser.OCTAL_LITERAL);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1558;
            this.match(ObjectiveCParser.CHARACTER_LITERAL);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1560;
            _la = this._input.LA(1);
            if(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB) {
                this.state = 1559;
                _la = this._input.LA(1);
                if(!(_la===ObjectiveCParser.ADD || _la===ObjectiveCParser.SUB)) {
                this._errHandler.recoverInline(this);
                }
                else {
                    this.consume();
                }
            }

            this.state = 1562;
            this.match(ObjectiveCParser.FLOATING_POINT_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_stringLiteral;
    return this;
}

StringLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringLiteralContext.prototype.constructor = StringLiteralContext;

StringLiteralContext.prototype.STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.STRING);
    } else {
        return this.getToken(ObjectiveCParser.STRING, i);
    }
};


StringLiteralContext.prototype.L_STR = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.L_STR);
    } else {
        return this.getToken(ObjectiveCParser.L_STR, i);
    }
};


StringLiteralContext.prototype.QUOTE_STRING = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ObjectiveCParser.QUOTE_STRING);
    } else {
        return this.getToken(ObjectiveCParser.QUOTE_STRING, i);
    }
};


StringLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterStringLiteral(this);
	}
};

StringLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitStringLiteral(this);
	}
};




ObjectiveCParser.StringLiteralContext = StringLiteralContext;

ObjectiveCParser.prototype.stringLiteral = function() {

    var localctx = new StringLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, ObjectiveCParser.RULE_stringLiteral);
    var _la = 0; // Token type
    try {
        this.state = 1578;
        switch(this._input.LA(1)) {
        case ObjectiveCParser.L_STR:
        case ObjectiveCParser.AT:
        case ObjectiveCParser.STRING:
            this.enterOuterAlt(localctx, 1);
            this.state = 1569; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1566;
            		_la = this._input.LA(1);
            		if(_la===ObjectiveCParser.L_STR || _la===ObjectiveCParser.AT) {
            		    this.state = 1565;
            		    _la = this._input.LA(1);
            		    if(!(_la===ObjectiveCParser.L_STR || _la===ObjectiveCParser.AT)) {
            		    this._errHandler.recoverInline(this);
            		    }
            		    else {
            		        this.consume();
            		    }
            		}

            		this.state = 1568;
            		this.match(ObjectiveCParser.STRING);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1571; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,203, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case ObjectiveCParser.QUOTE_STRING:
            this.enterOuterAlt(localctx, 2);
            this.state = 1574; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 1573;
            		this.match(ObjectiveCParser.QUOTE_STRING);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 1576; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,204, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ObjectiveCParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(ObjectiveCParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.L_STR = function() {
    return this.getToken(ObjectiveCParser.L_STR, 0);
};

IdentifierContext.prototype.NULLABLE = function() {
    return this.getToken(ObjectiveCParser.NULLABLE, 0);
};

IdentifierContext.prototype.WWEAK = function() {
    return this.getToken(ObjectiveCParser.WWEAK, 0);
};

IdentifierContext.prototype.TYPEOF = function() {
    return this.getToken(ObjectiveCParser.TYPEOF, 0);
};

IdentifierContext.prototype.TYPEOF__ = function() {
    return this.getToken(ObjectiveCParser.TYPEOF__, 0);
};

IdentifierContext.prototype.TYPEOF____ = function() {
    return this.getToken(ObjectiveCParser.TYPEOF____, 0);
};

IdentifierContext.prototype.KINDOF__ = function() {
    return this.getToken(ObjectiveCParser.KINDOF__, 0);
};

IdentifierContext.prototype.ASSIGNPA = function() {
    return this.getToken(ObjectiveCParser.ASSIGNPA, 0);
};

IdentifierContext.prototype.GETTER = function() {
    return this.getToken(ObjectiveCParser.GETTER, 0);
};

IdentifierContext.prototype.NONATOMIC = function() {
    return this.getToken(ObjectiveCParser.NONATOMIC, 0);
};

IdentifierContext.prototype.SETTER = function() {
    return this.getToken(ObjectiveCParser.SETTER, 0);
};

IdentifierContext.prototype.STRONG = function() {
    return this.getToken(ObjectiveCParser.STRONG, 0);
};

IdentifierContext.prototype.RETAIN = function() {
    return this.getToken(ObjectiveCParser.RETAIN, 0);
};

IdentifierContext.prototype.READONLY = function() {
    return this.getToken(ObjectiveCParser.READONLY, 0);
};

IdentifierContext.prototype.READWRITE = function() {
    return this.getToken(ObjectiveCParser.READWRITE, 0);
};

IdentifierContext.prototype.WEAK = function() {
    return this.getToken(ObjectiveCParser.WEAK, 0);
};

IdentifierContext.prototype.SELF = function() {
    return this.getToken(ObjectiveCParser.SELF, 0);
};

IdentifierContext.prototype.ID = function() {
    return this.getToken(ObjectiveCParser.ID, 0);
};

IdentifierContext.prototype.COVARIANT = function() {
    return this.getToken(ObjectiveCParser.COVARIANT, 0);
};

IdentifierContext.prototype.CONTRAVARIANT = function() {
    return this.getToken(ObjectiveCParser.CONTRAVARIANT, 0);
};

IdentifierContext.prototype.WUNUSED = function() {
    return this.getToken(ObjectiveCParser.WUNUSED, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ObjectiveCParserListener ) {
        listener.exitIdentifier(this);
	}
};




ObjectiveCParser.IdentifierContext = IdentifierContext;

ObjectiveCParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, ObjectiveCParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1580;
        _la = this._input.LA(1);
        if(!(_la===ObjectiveCParser.SELF || _la===ObjectiveCParser.ID || ((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (ObjectiveCParser.WWEAK - 71)) | (1 << (ObjectiveCParser.WUNUSED - 71)) | (1 << (ObjectiveCParser.TYPEOF - 71)) | (1 << (ObjectiveCParser.TYPEOF__ - 71)) | (1 << (ObjectiveCParser.TYPEOF____ - 71)) | (1 << (ObjectiveCParser.KINDOF__ - 71)) | (1 << (ObjectiveCParser.COVARIANT - 71)) | (1 << (ObjectiveCParser.CONTRAVARIANT - 71)) | (1 << (ObjectiveCParser.NULLABLE - 71)) | (1 << (ObjectiveCParser.L_STR - 71)))) !== 0) || ((((_la - 129)) & ~0x1f) == 0 && ((1 << (_la - 129)) & ((1 << (ObjectiveCParser.ASSIGNPA - 129)) | (1 << (ObjectiveCParser.GETTER - 129)) | (1 << (ObjectiveCParser.NONATOMIC - 129)) | (1 << (ObjectiveCParser.SETTER - 129)) | (1 << (ObjectiveCParser.STRONG - 129)) | (1 << (ObjectiveCParser.RETAIN - 129)) | (1 << (ObjectiveCParser.READONLY - 129)) | (1 << (ObjectiveCParser.READWRITE - 129)) | (1 << (ObjectiveCParser.WEAK - 129)) | (1 << (ObjectiveCParser.IDENTIFIER - 129)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ObjectiveCParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 118:
			return this.binaryExpression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ObjectiveCParser.prototype.binaryExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 10);
		case 1:
			return this.precpred(this._ctx, 9);
		case 2:
			return this.precpred(this._ctx, 8);
		case 3:
			return this.precpred(this._ctx, 7);
		case 4:
			return this.precpred(this._ctx, 6);
		case 5:
			return this.precpred(this._ctx, 5);
		case 6:
			return this.precpred(this._ctx, 4);
		case 7:
			return this.precpred(this._ctx, 3);
		case 8:
			return this.precpred(this._ctx, 2);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ObjectiveCParser = ObjectiveCParser;
